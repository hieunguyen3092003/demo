
TEST_MCU_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b4c  08002b4c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08002b4c  08002b4c  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b4c  08002b4c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b4c  08002b4c  00012b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b50  08002b50  00012b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08002b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  200000d0  08002c24  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08002c24  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4d7  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f13  00000000  00000000  0002b5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002d4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002dfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e58  00000000  00000000  0002e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7ed  00000000  00000000  00046818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085c4a  00000000  00000000  00053005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d8c4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ca8  00000000  00000000  000d8ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d0 	.word	0x200000d0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b10 	.word	0x08002b10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d4 	.word	0x200000d4
 8000148:	08002b10 	.word	0x08002b10

0800014c <FSMLightModification>:
 */

#include "FSMLightModification.h"

void FSMLightModification()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status)
 8000150:	4b5d      	ldr	r3, [pc, #372]	; (80002c8 <FSMLightModification+0x17c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b2c      	cmp	r3, #44	; 0x2c
 8000156:	d035      	beq.n	80001c4 <FSMLightModification+0x78>
 8000158:	2b2c      	cmp	r3, #44	; 0x2c
 800015a:	f300 80ac 	bgt.w	80002b6 <FSMLightModification+0x16a>
 800015e:	2b2a      	cmp	r3, #42	; 0x2a
 8000160:	d002      	beq.n	8000168 <FSMLightModification+0x1c>
 8000162:	2b2b      	cmp	r3, #43	; 0x2b
 8000164:	d05b      	beq.n	800021e <FSMLightModification+0xd2>
				}
			}
		}
		break;
	default:
		break;
 8000166:	e0a6      	b.n	80002b6 <FSMLightModification+0x16a>
		if(timer4_flag == 1)
 8000168:	4b58      	ldr	r3, [pc, #352]	; (80002cc <FSMLightModification+0x180>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d104      	bne.n	800017a <FSMLightModification+0x2e>
			setTimer4(25);
 8000170:	2019      	movs	r0, #25
 8000172:	f000 ffd3 	bl	800111c <setTimer4>
			toggleTrafficRed();
 8000176:	f000 fc83 	bl	8000a80 <toggleTrafficRed>
		if(isButton2Pressed() == 1)
 800017a:	f000 fab3 	bl	80006e4 <isButton2Pressed>
 800017e:	4603      	mov	r3, r0
 8000180:	2b01      	cmp	r3, #1
 8000182:	d10c      	bne.n	800019e <FSMLightModification+0x52>
			resetInitialState();
 8000184:	f000 fd1e 	bl	8000bc4 <resetInitialState>
			red_time++;
 8000188:	4b51      	ldr	r3, [pc, #324]	; (80002d0 <FSMLightModification+0x184>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	3301      	adds	r3, #1
 800018e:	4a50      	ldr	r2, [pc, #320]	; (80002d0 <FSMLightModification+0x184>)
 8000190:	6013      	str	r3, [r2, #0]
			setLedBuffer(red_time, 1);
 8000192:	4b4f      	ldr	r3, [pc, #316]	; (80002d0 <FSMLightModification+0x184>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	2101      	movs	r1, #1
 8000198:	4618      	mov	r0, r3
 800019a:	f000 fcab 	bl	8000af4 <setLedBuffer>
		if(isButton3Pressed() == 1)
 800019e:	f000 fabf 	bl	8000720 <isButton3Pressed>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b01      	cmp	r3, #1
 80001a6:	f040 8088 	bne.w	80002ba <FSMLightModification+0x16e>
			resetInitialState();
 80001aa:	f000 fd0b 	bl	8000bc4 <resetInitialState>
			status = MODIFY_YELLOW;	//next mode
 80001ae:	4b46      	ldr	r3, [pc, #280]	; (80002c8 <FSMLightModification+0x17c>)
 80001b0:	2222      	movs	r2, #34	; 0x22
 80001b2:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 80001b4:	2019      	movs	r0, #25
 80001b6:	f000 ffb1 	bl	800111c <setTimer4>
			setLedBuffer(0, 2);
 80001ba:	2102      	movs	r1, #2
 80001bc:	2000      	movs	r0, #0
 80001be:	f000 fc99 	bl	8000af4 <setLedBuffer>
		break;
 80001c2:	e07a      	b.n	80002ba <FSMLightModification+0x16e>
		if(timer4_flag == 1)
 80001c4:	4b41      	ldr	r3, [pc, #260]	; (80002cc <FSMLightModification+0x180>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d104      	bne.n	80001d6 <FSMLightModification+0x8a>
			setTimer4(25);
 80001cc:	2019      	movs	r0, #25
 80001ce:	f000 ffa5 	bl	800111c <setTimer4>
			toggleTrafficYellow();
 80001d2:	f000 fc67 	bl	8000aa4 <toggleTrafficYellow>
		if(isButton2Pressed() == 1)
 80001d6:	f000 fa85 	bl	80006e4 <isButton2Pressed>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d10c      	bne.n	80001fa <FSMLightModification+0xae>
			resetInitialState();
 80001e0:	f000 fcf0 	bl	8000bc4 <resetInitialState>
			yellow_time++;
 80001e4:	4b3b      	ldr	r3, [pc, #236]	; (80002d4 <FSMLightModification+0x188>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	3301      	adds	r3, #1
 80001ea:	4a3a      	ldr	r2, [pc, #232]	; (80002d4 <FSMLightModification+0x188>)
 80001ec:	6013      	str	r3, [r2, #0]
			setLedBuffer(yellow_time, 2);
 80001ee:	4b39      	ldr	r3, [pc, #228]	; (80002d4 <FSMLightModification+0x188>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2102      	movs	r1, #2
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 fc7d 	bl	8000af4 <setLedBuffer>
		if(isButton3Pressed() == 1)
 80001fa:	f000 fa91 	bl	8000720 <isButton3Pressed>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b01      	cmp	r3, #1
 8000202:	d15c      	bne.n	80002be <FSMLightModification+0x172>
			resetInitialState();
 8000204:	f000 fcde 	bl	8000bc4 <resetInitialState>
			status = MODIFY_GREEN;	//next mode
 8000208:	4b2f      	ldr	r3, [pc, #188]	; (80002c8 <FSMLightModification+0x17c>)
 800020a:	2221      	movs	r2, #33	; 0x21
 800020c:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 800020e:	2019      	movs	r0, #25
 8000210:	f000 ff84 	bl	800111c <setTimer4>
			setLedBuffer(0, 3);
 8000214:	2103      	movs	r1, #3
 8000216:	2000      	movs	r0, #0
 8000218:	f000 fc6c 	bl	8000af4 <setLedBuffer>
		break;
 800021c:	e04f      	b.n	80002be <FSMLightModification+0x172>
		if(timer4_flag == 1)
 800021e:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <FSMLightModification+0x180>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d104      	bne.n	8000230 <FSMLightModification+0xe4>
			setTimer4(25);
 8000226:	2019      	movs	r0, #25
 8000228:	f000 ff78 	bl	800111c <setTimer4>
			toggleTrafficGreen();
 800022c:	f000 fc54 	bl	8000ad8 <toggleTrafficGreen>
		if(isButton2Pressed() == 1)
 8000230:	f000 fa58 	bl	80006e4 <isButton2Pressed>
 8000234:	4603      	mov	r3, r0
 8000236:	2b01      	cmp	r3, #1
 8000238:	d10c      	bne.n	8000254 <FSMLightModification+0x108>
			resetInitialState();
 800023a:	f000 fcc3 	bl	8000bc4 <resetInitialState>
			green_time++;
 800023e:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <FSMLightModification+0x18c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	3301      	adds	r3, #1
 8000244:	4a24      	ldr	r2, [pc, #144]	; (80002d8 <FSMLightModification+0x18c>)
 8000246:	6013      	str	r3, [r2, #0]
			setLedBuffer(green_time, 3);
 8000248:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <FSMLightModification+0x18c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2103      	movs	r1, #3
 800024e:	4618      	mov	r0, r3
 8000250:	f000 fc50 	bl	8000af4 <setLedBuffer>
		if(isButton3Pressed() == 1)
 8000254:	f000 fa64 	bl	8000720 <isButton3Pressed>
 8000258:	4603      	mov	r3, r0
 800025a:	2b01      	cmp	r3, #1
 800025c:	d131      	bne.n	80002c2 <FSMLightModification+0x176>
			if(red_time == green_time+yellow_time)
 800025e:	4b1e      	ldr	r3, [pc, #120]	; (80002d8 <FSMLightModification+0x18c>)
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	4b1c      	ldr	r3, [pc, #112]	; (80002d4 <FSMLightModification+0x188>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	441a      	add	r2, r3
 8000268:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <FSMLightModification+0x184>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	429a      	cmp	r2, r3
 800026e:	d103      	bne.n	8000278 <FSMLightModification+0x12c>
				status = NORMAL_MODE;
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <FSMLightModification+0x17c>)
 8000272:	2215      	movs	r2, #21
 8000274:	601a      	str	r2, [r3, #0]
		break;
 8000276:	e024      	b.n	80002c2 <FSMLightModification+0x176>
				if(red_time > green_time+yellow_time)
 8000278:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <FSMLightModification+0x18c>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <FSMLightModification+0x188>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	441a      	add	r2, r3
 8000282:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <FSMLightModification+0x184>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	429a      	cmp	r2, r3
 8000288:	da0a      	bge.n	80002a0 <FSMLightModification+0x154>
					green_time = red_time - yellow_time;
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <FSMLightModification+0x184>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <FSMLightModification+0x188>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	1ad3      	subs	r3, r2, r3
 8000294:	4a10      	ldr	r2, [pc, #64]	; (80002d8 <FSMLightModification+0x18c>)
 8000296:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 8000298:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <FSMLightModification+0x17c>)
 800029a:	2215      	movs	r2, #21
 800029c:	601a      	str	r2, [r3, #0]
		break;
 800029e:	e010      	b.n	80002c2 <FSMLightModification+0x176>
					red_time = green_time + yellow_time;
 80002a0:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <FSMLightModification+0x18c>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <FSMLightModification+0x188>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4413      	add	r3, r2
 80002aa:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <FSMLightModification+0x184>)
 80002ac:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <FSMLightModification+0x17c>)
 80002b0:	2215      	movs	r2, #21
 80002b2:	601a      	str	r2, [r3, #0]
		break;
 80002b4:	e005      	b.n	80002c2 <FSMLightModification+0x176>
		break;
 80002b6:	bf00      	nop
 80002b8:	e004      	b.n	80002c4 <FSMLightModification+0x178>
		break;
 80002ba:	bf00      	nop
 80002bc:	e002      	b.n	80002c4 <FSMLightModification+0x178>
		break;
 80002be:	bf00      	nop
 80002c0:	e000      	b.n	80002c4 <FSMLightModification+0x178>
		break;
 80002c2:	bf00      	nop
	}
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000100 	.word	0x20000100
 80002cc:	20000120 	.word	0x20000120
 80002d0:	20000054 	.word	0x20000054
 80002d4:	2000005c 	.word	0x2000005c
 80002d8:	20000058 	.word	0x20000058

080002dc <FSMModificationModeRun>:
 */
#include "FSMModificationMode.h"


void FSMModificationModeRun()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	switch(status)
 80002e0:	4b6c      	ldr	r3, [pc, #432]	; (8000494 <FSMModificationModeRun+0x1b8>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3b1f      	subs	r3, #31
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	f200 80cb 	bhi.w	8000482 <FSMModificationModeRun+0x1a6>
 80002ec:	a201      	add	r2, pc, #4	; (adr r2, 80002f4 <FSMModificationModeRun+0x18>)
 80002ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f2:	bf00      	nop
 80002f4:	08000305 	.word	0x08000305
 80002f8:	0800031f 	.word	0x0800031f
 80002fc:	080003e5 	.word	0x080003e5
 8000300:	08000383 	.word	0x08000383
	{
	case MODIFICATION_MODE:
		resetInitialState();	// reset all all the varialbles thats affect FSMModificationModeRun
 8000304:	f000 fc5e 	bl	8000bc4 <resetInitialState>
		status = MODIFY_RED;	// next mode
 8000308:	4b62      	ldr	r3, [pc, #392]	; (8000494 <FSMModificationModeRun+0x1b8>)
 800030a:	2220      	movs	r2, #32
 800030c:	601a      	str	r2, [r3, #0]
		//led blinky for 2hz
		setTimer4(25);
 800030e:	2019      	movs	r0, #25
 8000310:	f000 ff04 	bl	800111c <setTimer4>
		// initial setting led 7 seg
		setLedBuffer(0, 1);
 8000314:	2101      	movs	r1, #1
 8000316:	2000      	movs	r0, #0
 8000318:	f000 fbec 	bl	8000af4 <setLedBuffer>


		break;
 800031c:	e0b8      	b.n	8000490 <FSMModificationModeRun+0x1b4>

	case MODIFY_RED:

		if(timer4_flag == 1)
 800031e:	4b5e      	ldr	r3, [pc, #376]	; (8000498 <FSMModificationModeRun+0x1bc>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d104      	bne.n	8000330 <FSMModificationModeRun+0x54>
		{
			setTimer4(25);
 8000326:	2019      	movs	r0, #25
 8000328:	f000 fef8 	bl	800111c <setTimer4>
			toggleTrafficRed();
 800032c:	f000 fba8 	bl	8000a80 <toggleTrafficRed>
		}

		if(isButton1Pressed() == 1)
 8000330:	f000 f9ba 	bl	80006a8 <isButton1Pressed>
 8000334:	4603      	mov	r3, r0
 8000336:	2b01      	cmp	r3, #1
 8000338:	d10b      	bne.n	8000352 <FSMModificationModeRun+0x76>
		{
			resetInitialState();
 800033a:	f000 fc43 	bl	8000bc4 <resetInitialState>

			status = MODIFY_YELLOW;	//next mode
 800033e:	4b55      	ldr	r3, [pc, #340]	; (8000494 <FSMModificationModeRun+0x1b8>)
 8000340:	2222      	movs	r2, #34	; 0x22
 8000342:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 8000344:	2019      	movs	r0, #25
 8000346:	f000 fee9 	bl	800111c <setTimer4>

			// initial setting led 7 seg
			setLedBuffer(0, 2);
 800034a:	2102      	movs	r1, #2
 800034c:	2000      	movs	r0, #0
 800034e:	f000 fbd1 	bl	8000af4 <setLedBuffer>
		}

		if(isButton2Pressed() == 1)
 8000352:	f000 f9c7 	bl	80006e4 <isButton2Pressed>
 8000356:	4603      	mov	r3, r0
 8000358:	2b01      	cmp	r3, #1
 800035a:	f040 8094 	bne.w	8000486 <FSMModificationModeRun+0x1aa>
		{
			resetInitialState();
 800035e:	f000 fc31 	bl	8000bc4 <resetInitialState>

			status = MODIFY_TIME_RED; //next mode
 8000362:	4b4c      	ldr	r3, [pc, #304]	; (8000494 <FSMModificationModeRun+0x1b8>)
 8000364:	222a      	movs	r2, #42	; 0x2a
 8000366:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 8000368:	2019      	movs	r0, #25
 800036a:	f000 fed7 	bl	800111c <setTimer4>

			red_time = 1;
 800036e:	4b4b      	ldr	r3, [pc, #300]	; (800049c <FSMModificationModeRun+0x1c0>)
 8000370:	2201      	movs	r2, #1
 8000372:	601a      	str	r2, [r3, #0]
			setLedBuffer(red_time, 1);
 8000374:	4b49      	ldr	r3, [pc, #292]	; (800049c <FSMModificationModeRun+0x1c0>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2101      	movs	r1, #1
 800037a:	4618      	mov	r0, r3
 800037c:	f000 fbba 	bl	8000af4 <setLedBuffer>
		}
		break;
 8000380:	e081      	b.n	8000486 <FSMModificationModeRun+0x1aa>

	case MODIFY_YELLOW:

		if(timer4_flag == 1)
 8000382:	4b45      	ldr	r3, [pc, #276]	; (8000498 <FSMModificationModeRun+0x1bc>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d104      	bne.n	8000394 <FSMModificationModeRun+0xb8>
		{
			setTimer4(25);
 800038a:	2019      	movs	r0, #25
 800038c:	f000 fec6 	bl	800111c <setTimer4>

			toggleTrafficYellow();
 8000390:	f000 fb88 	bl	8000aa4 <toggleTrafficYellow>
		}

		if(isButton1Pressed() == 1)
 8000394:	f000 f988 	bl	80006a8 <isButton1Pressed>
 8000398:	4603      	mov	r3, r0
 800039a:	2b01      	cmp	r3, #1
 800039c:	d10b      	bne.n	80003b6 <FSMModificationModeRun+0xda>
		{
			resetInitialState();
 800039e:	f000 fc11 	bl	8000bc4 <resetInitialState>

			status = MODIFY_GREEN;
 80003a2:	4b3c      	ldr	r3, [pc, #240]	; (8000494 <FSMModificationModeRun+0x1b8>)
 80003a4:	2221      	movs	r2, #33	; 0x21
 80003a6:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 80003a8:	2019      	movs	r0, #25
 80003aa:	f000 feb7 	bl	800111c <setTimer4>

			setLedBuffer(0, 3);
 80003ae:	2103      	movs	r1, #3
 80003b0:	2000      	movs	r0, #0
 80003b2:	f000 fb9f 	bl	8000af4 <setLedBuffer>
//			SCH_Add_Task(toggleTrafficGreen, 0, TOGGLE_TIME);
		}

		if(isButton2Pressed() == 1)
 80003b6:	f000 f995 	bl	80006e4 <isButton2Pressed>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d164      	bne.n	800048a <FSMModificationModeRun+0x1ae>
		{
			resetInitialState();
 80003c0:	f000 fc00 	bl	8000bc4 <resetInitialState>

			status = MODIFY_TIME_YELLOW;
 80003c4:	4b33      	ldr	r3, [pc, #204]	; (8000494 <FSMModificationModeRun+0x1b8>)
 80003c6:	222c      	movs	r2, #44	; 0x2c
 80003c8:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 80003ca:	2019      	movs	r0, #25
 80003cc:	f000 fea6 	bl	800111c <setTimer4>

			yellow_time = 1;
 80003d0:	4b33      	ldr	r3, [pc, #204]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	601a      	str	r2, [r3, #0]
			setLedBuffer(yellow_time, 2);
 80003d6:	4b32      	ldr	r3, [pc, #200]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2102      	movs	r1, #2
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fb89 	bl	8000af4 <setLedBuffer>

		}
		break;
 80003e2:	e052      	b.n	800048a <FSMModificationModeRun+0x1ae>

	case MODIFY_GREEN:

		if(timer4_flag == 1)
 80003e4:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <FSMModificationModeRun+0x1bc>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d104      	bne.n	80003f6 <FSMModificationModeRun+0x11a>
		{
			setTimer4(25);
 80003ec:	2019      	movs	r0, #25
 80003ee:	f000 fe95 	bl	800111c <setTimer4>

			toggleTrafficGreen();
 80003f2:	f000 fb71 	bl	8000ad8 <toggleTrafficGreen>
		}

		if(isButton1Pressed() == 1)
 80003f6:	f000 f957 	bl	80006a8 <isButton1Pressed>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d12c      	bne.n	800045a <FSMModificationModeRun+0x17e>
		{
			resetInitialState();
 8000400:	f000 fbe0 	bl	8000bc4 <resetInitialState>
			if(red_time == green_time+yellow_time)
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	4b25      	ldr	r3, [pc, #148]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	441a      	add	r2, r3
 800040e:	4b23      	ldr	r3, [pc, #140]	; (800049c <FSMModificationModeRun+0x1c0>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	429a      	cmp	r2, r3
 8000414:	d103      	bne.n	800041e <FSMModificationModeRun+0x142>
			{
				status = NORMAL_MODE;
 8000416:	4b1f      	ldr	r3, [pc, #124]	; (8000494 <FSMModificationModeRun+0x1b8>)
 8000418:	2215      	movs	r2, #21
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	e01d      	b.n	800045a <FSMModificationModeRun+0x17e>
			}
			else
			{
				if(red_time > green_time+yellow_time)
 800041e:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	441a      	add	r2, r3
 8000428:	4b1c      	ldr	r3, [pc, #112]	; (800049c <FSMModificationModeRun+0x1c0>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	429a      	cmp	r2, r3
 800042e:	da0a      	bge.n	8000446 <FSMModificationModeRun+0x16a>
				{
					green_time = red_time - yellow_time;
 8000430:	4b1a      	ldr	r3, [pc, #104]	; (800049c <FSMModificationModeRun+0x1c0>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	4a1a      	ldr	r2, [pc, #104]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 800043c:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <FSMModificationModeRun+0x1b8>)
 8000440:	2215      	movs	r2, #21
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	e009      	b.n	800045a <FSMModificationModeRun+0x17e>
				}
				else
				{
					red_time = green_time + yellow_time;
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4413      	add	r3, r2
 8000450:	4a12      	ldr	r2, [pc, #72]	; (800049c <FSMModificationModeRun+0x1c0>)
 8000452:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <FSMModificationModeRun+0x1b8>)
 8000456:	2215      	movs	r2, #21
 8000458:	601a      	str	r2, [r3, #0]
				}
			}
		}

		if(isButton2Pressed() == 1)
 800045a:	f000 f943 	bl	80006e4 <isButton2Pressed>
 800045e:	4603      	mov	r3, r0
 8000460:	2b01      	cmp	r3, #1
 8000462:	d114      	bne.n	800048e <FSMModificationModeRun+0x1b2>
		{
			resetInitialState();
 8000464:	f000 fbae 	bl	8000bc4 <resetInitialState>

			status = MODIFY_TIME_GREEN;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <FSMModificationModeRun+0x1b8>)
 800046a:	222b      	movs	r2, #43	; 0x2b
 800046c:	601a      	str	r2, [r3, #0]
			green_time = 1;
 800046e:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 8000470:	2201      	movs	r2, #1
 8000472:	601a      	str	r2, [r3, #0]
			setLedBuffer(green_time, 3);
 8000474:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2103      	movs	r1, #3
 800047a:	4618      	mov	r0, r3
 800047c:	f000 fb3a 	bl	8000af4 <setLedBuffer>
		}
		break;
 8000480:	e005      	b.n	800048e <FSMModificationModeRun+0x1b2>

	default:
		break;
 8000482:	bf00      	nop
 8000484:	e004      	b.n	8000490 <FSMModificationModeRun+0x1b4>
		break;
 8000486:	bf00      	nop
 8000488:	e002      	b.n	8000490 <FSMModificationModeRun+0x1b4>
		break;
 800048a:	bf00      	nop
 800048c:	e000      	b.n	8000490 <FSMModificationModeRun+0x1b4>
		break;
 800048e:	bf00      	nop
	}
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000100 	.word	0x20000100
 8000498:	20000120 	.word	0x20000120
 800049c:	20000054 	.word	0x20000054
 80004a0:	2000005c 	.word	0x2000005c
 80004a4:	20000058 	.word	0x20000058

080004a8 <FSMNormalModeRun>:

#include "FSMNormalMode.h"


void FSMNormalModeRun()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	switch(status)
 80004ac:	4b77      	ldr	r3, [pc, #476]	; (800068c <FSMNormalModeRun+0x1e4>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	3b15      	subs	r3, #21
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	f200 80de 	bhi.w	8000674 <FSMNormalModeRun+0x1cc>
 80004b8:	a201      	add	r2, pc, #4	; (adr r2, 80004c0 <FSMNormalModeRun+0x18>)
 80004ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004be:	bf00      	nop
 80004c0:	080004d5 	.word	0x080004d5
 80004c4:	080004fb 	.word	0x080004fb
 80004c8:	0800055b 	.word	0x0800055b
 80004cc:	080005b9 	.word	0x080005b9
 80004d0:	08000617 	.word	0x08000617
	{
	case NORMAL_MODE:
		resetInitialState(); 	// reset all all the varialbles thats affect FSMNormalModeRun
 80004d4:	f000 fb76 	bl	8000bc4 <resetInitialState>

		status = RED0_GREEN1; 	//next mode
 80004d8:	4b6c      	ldr	r3, [pc, #432]	; (800068c <FSMNormalModeRun+0x1e4>)
 80004da:	2216      	movs	r2, #22
 80004dc:	601a      	str	r2, [r3, #0]
		setTimer1(green_time);	//set timer for next state
 80004de:	4b6c      	ldr	r3, [pc, #432]	; (8000690 <FSMNormalModeRun+0x1e8>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 fd9a 	bl	800101c <setTimer1>

		setLedBuffer(red_time, green_time);
 80004e8:	4b6a      	ldr	r3, [pc, #424]	; (8000694 <FSMNormalModeRun+0x1ec>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a68      	ldr	r2, [pc, #416]	; (8000690 <FSMNormalModeRun+0x1e8>)
 80004ee:	6812      	ldr	r2, [r2, #0]
 80004f0:	4611      	mov	r1, r2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 fafe 	bl	8000af4 <setLedBuffer>
		break;
 80004f8:	e0c5      	b.n	8000686 <FSMNormalModeRun+0x1de>
	case RED0_GREEN1:
		setTrafficRed();
 80004fa:	f000 fa55 	bl	80009a8 <setTrafficRed>
		setTrafficGreen1();
 80004fe:	f000 fa9f 	bl	8000a40 <setTrafficGreen1>

		if(timer3_flag == 1)	//update buffer every second
 8000502:	4b65      	ldr	r3, [pc, #404]	; (8000698 <FSMNormalModeRun+0x1f0>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d104      	bne.n	8000514 <FSMNormalModeRun+0x6c>
		{
			updateLedBuffer();
 800050a:	f000 fb2f 	bl	8000b6c <updateLedBuffer>
			setTimer3(100);
 800050e:	2064      	movs	r0, #100	; 0x64
 8000510:	f000 fdf0 	bl	80010f4 <setTimer3>
		}

		if(timer1_flag == 1)
 8000514:	4b61      	ldr	r3, [pc, #388]	; (800069c <FSMNormalModeRun+0x1f4>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d10f      	bne.n	800053c <FSMNormalModeRun+0x94>
		{
			status = RED0_YELLOW1;	//next mode
 800051c:	4b5b      	ldr	r3, [pc, #364]	; (800068c <FSMNormalModeRun+0x1e4>)
 800051e:	2217      	movs	r2, #23
 8000520:	601a      	str	r2, [r3, #0]
			setTimer1(yellow_time);
 8000522:	4b5f      	ldr	r3, [pc, #380]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f000 fd78 	bl	800101c <setTimer1>

			setLedBuffer(yellow_time, yellow_time); // set buffer for led 7 seg
 800052c:	4b5c      	ldr	r3, [pc, #368]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a5b      	ldr	r2, [pc, #364]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 8000532:	6812      	ldr	r2, [r2, #0]
 8000534:	4611      	mov	r1, r2
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fadc 	bl	8000af4 <setLedBuffer>

		}

		if(isButton1Pressed() == 1)
 800053c:	f000 f8b4 	bl	80006a8 <isButton1Pressed>
 8000540:	4603      	mov	r3, r0
 8000542:	2b01      	cmp	r3, #1
 8000544:	f040 8098 	bne.w	8000678 <FSMNormalModeRun+0x1d0>
		{
			status = MODIFICATION_MODE;
 8000548:	4b50      	ldr	r3, [pc, #320]	; (800068c <FSMNormalModeRun+0x1e4>)
 800054a:	221f      	movs	r2, #31
 800054c:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(FSMModificationModeRun, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	4854      	ldr	r0, [pc, #336]	; (80006a4 <FSMNormalModeRun+0x1fc>)
 8000554:	f000 fc9c 	bl	8000e90 <SCH_Add_Task>
		}
		break;
 8000558:	e08e      	b.n	8000678 <FSMNormalModeRun+0x1d0>

	case RED0_YELLOW1:
		setTrafficRed();
 800055a:	f000 fa25 	bl	80009a8 <setTrafficRed>
		setTrafficYellow1();
 800055e:	f000 fa7f 	bl	8000a60 <setTrafficYellow1>

		if(timer3_flag == 1)	//update buffer every second
 8000562:	4b4d      	ldr	r3, [pc, #308]	; (8000698 <FSMNormalModeRun+0x1f0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d104      	bne.n	8000574 <FSMNormalModeRun+0xcc>
		{
			updateLedBuffer();
 800056a:	f000 faff 	bl	8000b6c <updateLedBuffer>
			setTimer3(100);
 800056e:	2064      	movs	r0, #100	; 0x64
 8000570:	f000 fdc0 	bl	80010f4 <setTimer3>
		}

		if(timer1_flag == 1)
 8000574:	4b49      	ldr	r3, [pc, #292]	; (800069c <FSMNormalModeRun+0x1f4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d10f      	bne.n	800059c <FSMNormalModeRun+0xf4>
		{
			status = GREEN0_RED1;	//next mode
 800057c:	4b43      	ldr	r3, [pc, #268]	; (800068c <FSMNormalModeRun+0x1e4>)
 800057e:	2218      	movs	r2, #24
 8000580:	601a      	str	r2, [r3, #0]
			setTimer1(green_time);	//set_timer for next mode
 8000582:	4b43      	ldr	r3, [pc, #268]	; (8000690 <FSMNormalModeRun+0x1e8>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fd48 	bl	800101c <setTimer1>

			setLedBuffer(green_time, red_time); // set buffer for led 7 seg
 800058c:	4b40      	ldr	r3, [pc, #256]	; (8000690 <FSMNormalModeRun+0x1e8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a40      	ldr	r2, [pc, #256]	; (8000694 <FSMNormalModeRun+0x1ec>)
 8000592:	6812      	ldr	r2, [r2, #0]
 8000594:	4611      	mov	r1, r2
 8000596:	4618      	mov	r0, r3
 8000598:	f000 faac 	bl	8000af4 <setLedBuffer>
		}

		if(isButton1Pressed() == 1)
 800059c:	f000 f884 	bl	80006a8 <isButton1Pressed>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d16a      	bne.n	800067c <FSMNormalModeRun+0x1d4>
		{
			status = MODIFICATION_MODE;
 80005a6:	4b39      	ldr	r3, [pc, #228]	; (800068c <FSMNormalModeRun+0x1e4>)
 80005a8:	221f      	movs	r2, #31
 80005aa:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(FSMModificationModeRun, 0, 0);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	483c      	ldr	r0, [pc, #240]	; (80006a4 <FSMNormalModeRun+0x1fc>)
 80005b2:	f000 fc6d 	bl	8000e90 <SCH_Add_Task>
		}
		break;
 80005b6:	e061      	b.n	800067c <FSMNormalModeRun+0x1d4>

	case GREEN0_RED1:
		setTrafficGreen();
 80005b8:	f000 fa0a 	bl	80009d0 <setTrafficGreen>
		setTrafficRed1();
 80005bc:	f000 fa30 	bl	8000a20 <setTrafficRed1>

		if(timer3_flag == 1)
 80005c0:	4b35      	ldr	r3, [pc, #212]	; (8000698 <FSMNormalModeRun+0x1f0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d104      	bne.n	80005d2 <FSMNormalModeRun+0x12a>
		{
			updateLedBuffer();
 80005c8:	f000 fad0 	bl	8000b6c <updateLedBuffer>
			setTimer3(100);
 80005cc:	2064      	movs	r0, #100	; 0x64
 80005ce:	f000 fd91 	bl	80010f4 <setTimer3>

		}

		if(timer1_flag==1)
 80005d2:	4b32      	ldr	r3, [pc, #200]	; (800069c <FSMNormalModeRun+0x1f4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d10f      	bne.n	80005fa <FSMNormalModeRun+0x152>
		{
			status = YELLOW0_RED1;
 80005da:	4b2c      	ldr	r3, [pc, #176]	; (800068c <FSMNormalModeRun+0x1e4>)
 80005dc:	2219      	movs	r2, #25
 80005de:	601a      	str	r2, [r3, #0]
			setTimer1(yellow_time);
 80005e0:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fd19 	bl	800101c <setTimer1>

			setLedBuffer(yellow_time, yellow_time);	// set buffer for led 7 seg
 80005ea:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a2c      	ldr	r2, [pc, #176]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 80005f0:	6812      	ldr	r2, [r2, #0]
 80005f2:	4611      	mov	r1, r2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fa7d 	bl	8000af4 <setLedBuffer>
		}

		if(isButton1Pressed() == 1)
 80005fa:	f000 f855 	bl	80006a8 <isButton1Pressed>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b01      	cmp	r3, #1
 8000602:	d13d      	bne.n	8000680 <FSMNormalModeRun+0x1d8>
		{
			status = MODIFICATION_MODE;
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <FSMNormalModeRun+0x1e4>)
 8000606:	221f      	movs	r2, #31
 8000608:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(FSMModificationModeRun, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	4825      	ldr	r0, [pc, #148]	; (80006a4 <FSMNormalModeRun+0x1fc>)
 8000610:	f000 fc3e 	bl	8000e90 <SCH_Add_Task>
		}
		break;
 8000614:	e034      	b.n	8000680 <FSMNormalModeRun+0x1d8>

	case YELLOW0_RED1:
		setTrafficYellow();
 8000616:	f000 f9ef 	bl	80009f8 <setTrafficYellow>
		setTrafficRed1();
 800061a:	f000 fa01 	bl	8000a20 <setTrafficRed1>

		if(timer3_flag == 1)
 800061e:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <FSMNormalModeRun+0x1f0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d104      	bne.n	8000630 <FSMNormalModeRun+0x188>
		{
			updateLedBuffer();
 8000626:	f000 faa1 	bl	8000b6c <updateLedBuffer>
			setTimer3(100);
 800062a:	2064      	movs	r0, #100	; 0x64
 800062c:	f000 fd62 	bl	80010f4 <setTimer3>
		}

		if(timer1_flag == 1)
 8000630:	4b1a      	ldr	r3, [pc, #104]	; (800069c <FSMNormalModeRun+0x1f4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d10f      	bne.n	8000658 <FSMNormalModeRun+0x1b0>
		{
			status = RED0_GREEN1;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <FSMNormalModeRun+0x1e4>)
 800063a:	2216      	movs	r2, #22
 800063c:	601a      	str	r2, [r3, #0]
			setTimer1(green_time);
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <FSMNormalModeRun+0x1e8>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fcea 	bl	800101c <setTimer1>

			setLedBuffer(red_time, green_time); // set buffer for led 7 seg
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <FSMNormalModeRun+0x1ec>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a10      	ldr	r2, [pc, #64]	; (8000690 <FSMNormalModeRun+0x1e8>)
 800064e:	6812      	ldr	r2, [r2, #0]
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fa4e 	bl	8000af4 <setLedBuffer>
		}
		if(isButton1Pressed() == 1)
 8000658:	f000 f826 	bl	80006a8 <isButton1Pressed>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d110      	bne.n	8000684 <FSMNormalModeRun+0x1dc>
		{
			status = MODIFICATION_MODE;
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <FSMNormalModeRun+0x1e4>)
 8000664:	221f      	movs	r2, #31
 8000666:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(FSMModificationModeRun, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <FSMNormalModeRun+0x1fc>)
 800066e:	f000 fc0f 	bl	8000e90 <SCH_Add_Task>
		}
		break;
 8000672:	e007      	b.n	8000684 <FSMNormalModeRun+0x1dc>

	default:
		break;
 8000674:	bf00      	nop
 8000676:	e006      	b.n	8000686 <FSMNormalModeRun+0x1de>
		break;
 8000678:	bf00      	nop
 800067a:	e004      	b.n	8000686 <FSMNormalModeRun+0x1de>
		break;
 800067c:	bf00      	nop
 800067e:	e002      	b.n	8000686 <FSMNormalModeRun+0x1de>
		break;
 8000680:	bf00      	nop
 8000682:	e000      	b.n	8000686 <FSMNormalModeRun+0x1de>
		break;
 8000684:	bf00      	nop
	}
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000100 	.word	0x20000100
 8000690:	20000058 	.word	0x20000058
 8000694:	20000054 	.word	0x20000054
 8000698:	2000011c 	.word	0x2000011c
 800069c:	20000114 	.word	0x20000114
 80006a0:	2000005c 	.word	0x2000005c
 80006a4:	080002dd 	.word	0x080002dd

080006a8 <isButton1Pressed>:
int button2_flag = 0;
int button3_flag = 0;
int button4_flag = 0;
// PROCESS BUTTON 1 FUNCTION
int isButton1Pressed() // nếu nút được nhấn thì hàm trả về 1
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <isButton1Pressed+0x20>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d104      	bne.n	80006be <isButton1Pressed+0x16>
		button1_flag = 0;
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <isButton1Pressed+0x20>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
		return 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e000      	b.n	80006c0 <isButton1Pressed+0x18>
	}
	else return 0;
 80006be:	2300      	movs	r3, #0
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	200000ec 	.word	0x200000ec

080006cc <flag1Process>:
void flag1Process() // hàm này chỉ đề set cờ khi mà nút được nhấn
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	button1_flag = 1; // set flag để xử lý trên while(1)
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <flag1Process+0x14>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	200000ec 	.word	0x200000ec

080006e4 <isButton2Pressed>:

// PROCESS BUTTON 2 FUNCTION
int isButton2Pressed()
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <isButton2Pressed+0x20>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d104      	bne.n	80006fa <isButton2Pressed+0x16>
	{
		button2_flag = 0;
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <isButton2Pressed+0x20>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
		return 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e000      	b.n	80006fc <isButton2Pressed+0x18>
	}
	else return 0;
 80006fa:	2300      	movs	r3, #0
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	200000f0 	.word	0x200000f0

08000708 <flag2Process>:
void flag2Process()
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
	button2_flag = 1;
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <flag2Process+0x14>)
 800070e:	2201      	movs	r2, #1
 8000710:	601a      	str	r2, [r3, #0]
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	200000f0 	.word	0x200000f0

08000720 <isButton3Pressed>:

//PROCESS BUTTON 3 FUNCTION
int isButton3Pressed()
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <isButton3Pressed+0x20>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d104      	bne.n	8000736 <isButton3Pressed+0x16>
	{
		button3_flag = 0;
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <isButton3Pressed+0x20>)
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
		return 1;
 8000732:	2301      	movs	r3, #1
 8000734:	e000      	b.n	8000738 <isButton3Pressed+0x18>
	}
	else return 0;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	200000f4 	.word	0x200000f4

08000744 <flag3Process>:
void flag3Process()
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <flag3Process+0x14>)
 800074a:	2201      	movs	r2, #1
 800074c:	601a      	str	r2, [r3, #0]
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	200000f4 	.word	0x200000f4

0800075c <flag4Process>:
		return 1;
	}
	else return 0;
}
void flag4Process()
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
	button4_flag = 1;
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <flag4Process+0x14>)
 8000762:	2201      	movs	r2, #1
 8000764:	601a      	str	r2, [r3, #0]
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	200000f8 	.word	0x200000f8

08000774 <getKeyInput>:


void getKeyInput()  //goi = timer moi 10ms 1 lan
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	//BUTTON1
	key1_reg0 = key1_reg1;
 8000778:	4b78      	ldr	r3, [pc, #480]	; (800095c <getKeyInput+0x1e8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a78      	ldr	r2, [pc, #480]	; (8000960 <getKeyInput+0x1ec>)
 800077e:	6013      	str	r3, [r2, #0]
	key1_reg1 = key1_reg2;
 8000780:	4b78      	ldr	r3, [pc, #480]	; (8000964 <getKeyInput+0x1f0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a75      	ldr	r2, [pc, #468]	; (800095c <getKeyInput+0x1e8>)
 8000786:	6013      	str	r3, [r2, #0]
	key1_reg2 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin); // key1_reg2 đọc giá trị của nút nhấn
 8000788:	2102      	movs	r1, #2
 800078a:	4877      	ldr	r0, [pc, #476]	; (8000968 <getKeyInput+0x1f4>)
 800078c:	f001 f8ae 	bl	80018ec <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	4b73      	ldr	r3, [pc, #460]	; (8000964 <getKeyInput+0x1f0>)
 8000796:	601a      	str	r2, [r3, #0]
	if((key1_reg0 == key1_reg1) && (key1_reg1 == key1_reg2)) // chống rung
 8000798:	4b71      	ldr	r3, [pc, #452]	; (8000960 <getKeyInput+0x1ec>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b6f      	ldr	r3, [pc, #444]	; (800095c <getKeyInput+0x1e8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d125      	bne.n	80007f0 <getKeyInput+0x7c>
 80007a4:	4b6d      	ldr	r3, [pc, #436]	; (800095c <getKeyInput+0x1e8>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b6e      	ldr	r3, [pc, #440]	; (8000964 <getKeyInput+0x1f0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d11f      	bne.n	80007f0 <getKeyInput+0x7c>
	{
		if(key1_reg3 != key1_reg2) // xử lý khi nhấn
 80007b0:	4b6e      	ldr	r3, [pc, #440]	; (800096c <getKeyInput+0x1f8>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b6b      	ldr	r3, [pc, #428]	; (8000964 <getKeyInput+0x1f0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d00d      	beq.n	80007d8 <getKeyInput+0x64>
		{
			key1_reg3 = key1_reg2;
 80007bc:	4b69      	ldr	r3, [pc, #420]	; (8000964 <getKeyInput+0x1f0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a6a      	ldr	r2, [pc, #424]	; (800096c <getKeyInput+0x1f8>)
 80007c2:	6013      	str	r3, [r2, #0]
			if(key1_reg2 == PRESSED_STATE)
 80007c4:	4b67      	ldr	r3, [pc, #412]	; (8000964 <getKeyInput+0x1f0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d111      	bne.n	80007f0 <getKeyInput+0x7c>
			{
				flag1Process();
 80007cc:	f7ff ff7e 	bl	80006cc <flag1Process>
				timer_for_key_press = 200; // gán lại lên 2s
 80007d0:	4b67      	ldr	r3, [pc, #412]	; (8000970 <getKeyInput+0x1fc>)
 80007d2:	22c8      	movs	r2, #200	; 0xc8
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	e00b      	b.n	80007f0 <getKeyInput+0x7c>
			}
		}
		else // xử lý nhấn đè (key1_reg3 == key1_reg2)
		{
			timer_for_key_press--;
 80007d8:	4b65      	ldr	r3, [pc, #404]	; (8000970 <getKeyInput+0x1fc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3b01      	subs	r3, #1
 80007de:	4a64      	ldr	r2, [pc, #400]	; (8000970 <getKeyInput+0x1fc>)
 80007e0:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 80007e2:	4b63      	ldr	r3, [pc, #396]	; (8000970 <getKeyInput+0x1fc>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d102      	bne.n	80007f0 <getKeyInput+0x7c>
			{
				key1_reg3 = NORMAL_STATE; // gán key1_reg3 thành NORMAL_STATE sẽ reset trường hợp nhấn đè lên lại trường hợp nhấn
 80007ea:	4b60      	ldr	r3, [pc, #384]	; (800096c <getKeyInput+0x1f8>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
			}
		}
	}
	//BUTTON2
	key2_reg0 = key2_reg1;
 80007f0:	4b60      	ldr	r3, [pc, #384]	; (8000974 <getKeyInput+0x200>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a60      	ldr	r2, [pc, #384]	; (8000978 <getKeyInput+0x204>)
 80007f6:	6013      	str	r3, [r2, #0]
	key2_reg1 = key2_reg2;
 80007f8:	4b60      	ldr	r3, [pc, #384]	; (800097c <getKeyInput+0x208>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a5d      	ldr	r2, [pc, #372]	; (8000974 <getKeyInput+0x200>)
 80007fe:	6013      	str	r3, [r2, #0]
	key2_reg2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000800:	2110      	movs	r1, #16
 8000802:	4859      	ldr	r0, [pc, #356]	; (8000968 <getKeyInput+0x1f4>)
 8000804:	f001 f872 	bl	80018ec <HAL_GPIO_ReadPin>
 8000808:	4603      	mov	r3, r0
 800080a:	461a      	mov	r2, r3
 800080c:	4b5b      	ldr	r3, [pc, #364]	; (800097c <getKeyInput+0x208>)
 800080e:	601a      	str	r2, [r3, #0]
	if(key2_reg0 == key2_reg1 && key2_reg1 == key2_reg2)
 8000810:	4b59      	ldr	r3, [pc, #356]	; (8000978 <getKeyInput+0x204>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b57      	ldr	r3, [pc, #348]	; (8000974 <getKeyInput+0x200>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	d125      	bne.n	8000868 <getKeyInput+0xf4>
 800081c:	4b55      	ldr	r3, [pc, #340]	; (8000974 <getKeyInput+0x200>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b56      	ldr	r3, [pc, #344]	; (800097c <getKeyInput+0x208>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	429a      	cmp	r2, r3
 8000826:	d11f      	bne.n	8000868 <getKeyInput+0xf4>
	{
		if(key2_reg3 != key2_reg2)
 8000828:	4b55      	ldr	r3, [pc, #340]	; (8000980 <getKeyInput+0x20c>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4b53      	ldr	r3, [pc, #332]	; (800097c <getKeyInput+0x208>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	429a      	cmp	r2, r3
 8000832:	d00d      	beq.n	8000850 <getKeyInput+0xdc>
		{
			key2_reg3 = key2_reg2;
 8000834:	4b51      	ldr	r3, [pc, #324]	; (800097c <getKeyInput+0x208>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a51      	ldr	r2, [pc, #324]	; (8000980 <getKeyInput+0x20c>)
 800083a:	6013      	str	r3, [r2, #0]
			if(key2_reg2 == PRESSED_STATE)
 800083c:	4b4f      	ldr	r3, [pc, #316]	; (800097c <getKeyInput+0x208>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d111      	bne.n	8000868 <getKeyInput+0xf4>
			{
				flag2Process();
 8000844:	f7ff ff60 	bl	8000708 <flag2Process>
				timer_for_key_press = 200;
 8000848:	4b49      	ldr	r3, [pc, #292]	; (8000970 <getKeyInput+0x1fc>)
 800084a:	22c8      	movs	r2, #200	; 0xc8
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	e00b      	b.n	8000868 <getKeyInput+0xf4>
			}
		}
		else
		{
			timer_for_key_press--;
 8000850:	4b47      	ldr	r3, [pc, #284]	; (8000970 <getKeyInput+0x1fc>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	3b01      	subs	r3, #1
 8000856:	4a46      	ldr	r2, [pc, #280]	; (8000970 <getKeyInput+0x1fc>)
 8000858:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 800085a:	4b45      	ldr	r3, [pc, #276]	; (8000970 <getKeyInput+0x1fc>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d102      	bne.n	8000868 <getKeyInput+0xf4>
			{
				key2_reg3 = NORMAL_STATE;
 8000862:	4b47      	ldr	r3, [pc, #284]	; (8000980 <getKeyInput+0x20c>)
 8000864:	2201      	movs	r2, #1
 8000866:	601a      	str	r2, [r3, #0]
			}
		}
	}
	//BUTTON3
	key3_reg0 = key3_reg1;
 8000868:	4b46      	ldr	r3, [pc, #280]	; (8000984 <getKeyInput+0x210>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a46      	ldr	r2, [pc, #280]	; (8000988 <getKeyInput+0x214>)
 800086e:	6013      	str	r3, [r2, #0]
	key3_reg1 = key3_reg2;
 8000870:	4b46      	ldr	r3, [pc, #280]	; (800098c <getKeyInput+0x218>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a43      	ldr	r2, [pc, #268]	; (8000984 <getKeyInput+0x210>)
 8000876:	6013      	str	r3, [r2, #0]
	key3_reg2 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000878:	2101      	movs	r1, #1
 800087a:	4845      	ldr	r0, [pc, #276]	; (8000990 <getKeyInput+0x21c>)
 800087c:	f001 f836 	bl	80018ec <HAL_GPIO_ReadPin>
 8000880:	4603      	mov	r3, r0
 8000882:	461a      	mov	r2, r3
 8000884:	4b41      	ldr	r3, [pc, #260]	; (800098c <getKeyInput+0x218>)
 8000886:	601a      	str	r2, [r3, #0]
	if(key3_reg0 == key3_reg1 && key3_reg1 == key3_reg2)
 8000888:	4b3f      	ldr	r3, [pc, #252]	; (8000988 <getKeyInput+0x214>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b3d      	ldr	r3, [pc, #244]	; (8000984 <getKeyInput+0x210>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	429a      	cmp	r2, r3
 8000892:	d125      	bne.n	80008e0 <getKeyInput+0x16c>
 8000894:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <getKeyInput+0x210>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b3c      	ldr	r3, [pc, #240]	; (800098c <getKeyInput+0x218>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	429a      	cmp	r2, r3
 800089e:	d11f      	bne.n	80008e0 <getKeyInput+0x16c>
	{
		if(key3_reg2 != key3_reg3)
 80008a0:	4b3a      	ldr	r3, [pc, #232]	; (800098c <getKeyInput+0x218>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b3b      	ldr	r3, [pc, #236]	; (8000994 <getKeyInput+0x220>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d00d      	beq.n	80008c8 <getKeyInput+0x154>
		{
			key3_reg3 = key3_reg2;
 80008ac:	4b37      	ldr	r3, [pc, #220]	; (800098c <getKeyInput+0x218>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a38      	ldr	r2, [pc, #224]	; (8000994 <getKeyInput+0x220>)
 80008b2:	6013      	str	r3, [r2, #0]
			if(key3_reg2 == PRESSED_STATE)
 80008b4:	4b35      	ldr	r3, [pc, #212]	; (800098c <getKeyInput+0x218>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d111      	bne.n	80008e0 <getKeyInput+0x16c>
			{
				flag3Process();
 80008bc:	f7ff ff42 	bl	8000744 <flag3Process>
				timer_for_key_press = 200;
 80008c0:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <getKeyInput+0x1fc>)
 80008c2:	22c8      	movs	r2, #200	; 0xc8
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	e00b      	b.n	80008e0 <getKeyInput+0x16c>
			}
		}

		else
		{
			timer_for_key_press--;
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <getKeyInput+0x1fc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4a28      	ldr	r2, [pc, #160]	; (8000970 <getKeyInput+0x1fc>)
 80008d0:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 80008d2:	4b27      	ldr	r3, [pc, #156]	; (8000970 <getKeyInput+0x1fc>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d102      	bne.n	80008e0 <getKeyInput+0x16c>
			{
				key3_reg3 = NORMAL_STATE;
 80008da:	4b2e      	ldr	r3, [pc, #184]	; (8000994 <getKeyInput+0x220>)
 80008dc:	2201      	movs	r2, #1
 80008de:	601a      	str	r2, [r3, #0]
			}
		}
	}
	//PED_BUTTON
	key4_reg0 = key4_reg1;
 80008e0:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <getKeyInput+0x224>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a2d      	ldr	r2, [pc, #180]	; (800099c <getKeyInput+0x228>)
 80008e6:	6013      	str	r3, [r2, #0]
	key4_reg1 = key4_reg2;
 80008e8:	4b2d      	ldr	r3, [pc, #180]	; (80009a0 <getKeyInput+0x22c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a2a      	ldr	r2, [pc, #168]	; (8000998 <getKeyInput+0x224>)
 80008ee:	6013      	str	r3, [r2, #0]
	key4_reg2 = HAL_GPIO_ReadPin(PED_BUTTON_GPIO_Port, PED_BUTTON_Pin);
 80008f0:	2101      	movs	r1, #1
 80008f2:	481d      	ldr	r0, [pc, #116]	; (8000968 <getKeyInput+0x1f4>)
 80008f4:	f000 fffa 	bl	80018ec <HAL_GPIO_ReadPin>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <getKeyInput+0x22c>)
 80008fe:	601a      	str	r2, [r3, #0]
	if(key4_reg0 == key4_reg1 && key4_reg1 == key4_reg2)
 8000900:	4b26      	ldr	r3, [pc, #152]	; (800099c <getKeyInput+0x228>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <getKeyInput+0x224>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	429a      	cmp	r2, r3
 800090a:	d125      	bne.n	8000958 <getKeyInput+0x1e4>
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <getKeyInput+0x224>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <getKeyInput+0x22c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	429a      	cmp	r2, r3
 8000916:	d11f      	bne.n	8000958 <getKeyInput+0x1e4>
	{
		if(key4_reg2 != key4_reg3)
 8000918:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <getKeyInput+0x22c>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <getKeyInput+0x230>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d00d      	beq.n	8000940 <getKeyInput+0x1cc>
		{
			key4_reg3 = key4_reg2;
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <getKeyInput+0x22c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a1e      	ldr	r2, [pc, #120]	; (80009a4 <getKeyInput+0x230>)
 800092a:	6013      	str	r3, [r2, #0]
			if(key4_reg2 == PRESSED_STATE)
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <getKeyInput+0x22c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d111      	bne.n	8000958 <getKeyInput+0x1e4>
			{
				flag4Process();
 8000934:	f7ff ff12 	bl	800075c <flag4Process>
				timer_for_key_press = 200;
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <getKeyInput+0x1fc>)
 800093a:	22c8      	movs	r2, #200	; 0xc8
 800093c:	601a      	str	r2, [r3, #0]
			{
				key4_reg3 = NORMAL_STATE;
			}
		}
	}
}
 800093e:	e00b      	b.n	8000958 <getKeyInput+0x1e4>
			timer_for_key_press--;
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <getKeyInput+0x1fc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3b01      	subs	r3, #1
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <getKeyInput+0x1fc>)
 8000948:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <getKeyInput+0x1fc>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d102      	bne.n	8000958 <getKeyInput+0x1e4>
				key4_reg3 = NORMAL_STATE;
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <getKeyInput+0x230>)
 8000954:	2201      	movs	r2, #1
 8000956:	601a      	str	r2, [r3, #0]
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000004 	.word	0x20000004
 8000960:	20000000 	.word	0x20000000
 8000964:	20000008 	.word	0x20000008
 8000968:	40010800 	.word	0x40010800
 800096c:	2000000c 	.word	0x2000000c
 8000970:	20000040 	.word	0x20000040
 8000974:	20000014 	.word	0x20000014
 8000978:	20000010 	.word	0x20000010
 800097c:	20000018 	.word	0x20000018
 8000980:	2000001c 	.word	0x2000001c
 8000984:	20000024 	.word	0x20000024
 8000988:	20000020 	.word	0x20000020
 800098c:	20000028 	.word	0x20000028
 8000990:	40010c00 	.word	0x40010c00
 8000994:	2000002c 	.word	0x2000002c
 8000998:	20000034 	.word	0x20000034
 800099c:	20000030 	.word	0x20000030
 80009a0:	20000038 	.word	0x20000038
 80009a4:	2000003c 	.word	0x2000003c

080009a8 <setTrafficRed>:
int green_time = 3;
int yellow_time = 2;

//SET TRAFFIC LIGHT FUNCTION
void setTrafficRed()
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_GPIO_Port, LIGHT2_Pin, RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <setTrafficRed+0x20>)
 80009b4:	f000 ffb1 	bl	800191a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT3_GPIO_Port, LIGHT3_Pin, SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2108      	movs	r1, #8
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <setTrafficRed+0x24>)
 80009be:	f000 ffac 	bl	800191a <HAL_GPIO_WritePin>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40010800 	.word	0x40010800
 80009cc:	40010c00 	.word	0x40010c00

080009d0 <setTrafficGreen>:
void setTrafficGreen()
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_GPIO_Port, LIGHT2_Pin, SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <setTrafficGreen+0x20>)
 80009dc:	f000 ff9d 	bl	800191a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT3_GPIO_Port, LIGHT3_Pin, RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2108      	movs	r1, #8
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <setTrafficGreen+0x24>)
 80009e6:	f000 ff98 	bl	800191a <HAL_GPIO_WritePin>
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40010800 	.word	0x40010800
 80009f4:	40010c00 	.word	0x40010c00

080009f8 <setTrafficYellow>:
void setTrafficYellow()
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_GPIO_Port, LIGHT2_Pin, RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <setTrafficYellow+0x20>)
 8000a04:	f000 ff89 	bl	800191a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT3_GPIO_Port, LIGHT3_Pin, RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <setTrafficYellow+0x24>)
 8000a0e:	f000 ff84 	bl	800191a <HAL_GPIO_WritePin>
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40010800 	.word	0x40010800
 8000a1c:	40010c00 	.word	0x40010c00

08000a20 <setTrafficRed1>:

void setTrafficRed1()
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT4_GPIO_Port, LIGHT4_Pin, RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2110      	movs	r1, #16
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <setTrafficRed1+0x1c>)
 8000a2a:	f000 ff76 	bl	800191a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT5_GPIO_Port, LIGHT5_Pin, SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2120      	movs	r1, #32
 8000a32:	4802      	ldr	r0, [pc, #8]	; (8000a3c <setTrafficRed1+0x1c>)
 8000a34:	f000 ff71 	bl	800191a <HAL_GPIO_WritePin>

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40010c00 	.word	0x40010c00

08000a40 <setTrafficGreen1>:
void setTrafficGreen1()
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT4_GPIO_Port, LIGHT4_Pin, SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2110      	movs	r1, #16
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <setTrafficGreen1+0x1c>)
 8000a4a:	f000 ff66 	bl	800191a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT5_GPIO_Port, LIGHT5_Pin, RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2120      	movs	r1, #32
 8000a52:	4802      	ldr	r0, [pc, #8]	; (8000a5c <setTrafficGreen1+0x1c>)
 8000a54:	f000 ff61 	bl	800191a <HAL_GPIO_WritePin>
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40010c00 	.word	0x40010c00

08000a60 <setTrafficYellow1>:
void setTrafficYellow1()
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT4_GPIO_Port, LIGHT4_Pin, RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2110      	movs	r1, #16
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <setTrafficYellow1+0x1c>)
 8000a6a:	f000 ff56 	bl	800191a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT5_GPIO_Port, LIGHT5_Pin, RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2120      	movs	r1, #32
 8000a72:	4802      	ldr	r0, [pc, #8]	; (8000a7c <setTrafficYellow1+0x1c>)
 8000a74:	f000 ff51 	bl	800191a <HAL_GPIO_WritePin>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40010c00 	.word	0x40010c00

08000a80 <toggleTrafficRed>:

void toggleTrafficRed()
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LIGHT2_GPIO_Port, LIGHT2_Pin);
 8000a84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <toggleTrafficRed+0x1c>)
 8000a8a:	f000 ff5e 	bl	800194a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT4_GPIO_Port, LIGHT4_Pin);
 8000a8e:	2110      	movs	r1, #16
 8000a90:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <toggleTrafficRed+0x20>)
 8000a92:	f000 ff5a 	bl	800194a <HAL_GPIO_TogglePin>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40010800 	.word	0x40010800
 8000aa0:	40010c00 	.word	0x40010c00

08000aa4 <toggleTrafficYellow>:
void toggleTrafficYellow()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LIGHT2_GPIO_Port, LIGHT2_Pin);
 8000aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aac:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <toggleTrafficYellow+0x2c>)
 8000aae:	f000 ff4c 	bl	800194a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT3_GPIO_Port, LIGHT3_Pin);
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	4807      	ldr	r0, [pc, #28]	; (8000ad4 <toggleTrafficYellow+0x30>)
 8000ab6:	f000 ff48 	bl	800194a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT4_GPIO_Port, LIGHT4_Pin);
 8000aba:	2110      	movs	r1, #16
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <toggleTrafficYellow+0x30>)
 8000abe:	f000 ff44 	bl	800194a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT5_GPIO_Port, LIGHT5_Pin);
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <toggleTrafficYellow+0x30>)
 8000ac6:	f000 ff40 	bl	800194a <HAL_GPIO_TogglePin>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40010800 	.word	0x40010800
 8000ad4:	40010c00 	.word	0x40010c00

08000ad8 <toggleTrafficGreen>:
void toggleTrafficGreen()
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LIGHT3_GPIO_Port, LIGHT3_Pin);
 8000adc:	2108      	movs	r1, #8
 8000ade:	4804      	ldr	r0, [pc, #16]	; (8000af0 <toggleTrafficGreen+0x18>)
 8000ae0:	f000 ff33 	bl	800194a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT5_GPIO_Port, LIGHT5_Pin);
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	4802      	ldr	r0, [pc, #8]	; (8000af0 <toggleTrafficGreen+0x18>)
 8000ae8:	f000 ff2f 	bl	800194a <HAL_GPIO_TogglePin>
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40010c00 	.word	0x40010c00

08000af4 <setLedBuffer>:

int led_buffer[4] = {1, 2, 3, 4};
void setLedBuffer(int first_led_time, int second_led_time)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
	led_buffer[0] = first_led_time / 10;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a18      	ldr	r2, [pc, #96]	; (8000b64 <setLedBuffer+0x70>)
 8000b02:	fb82 1203 	smull	r1, r2, r2, r3
 8000b06:	1092      	asrs	r2, r2, #2
 8000b08:	17db      	asrs	r3, r3, #31
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	4a16      	ldr	r2, [pc, #88]	; (8000b68 <setLedBuffer+0x74>)
 8000b0e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = first_led_time % 10;
 8000b10:	6879      	ldr	r1, [r7, #4]
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <setLedBuffer+0x70>)
 8000b14:	fb83 2301 	smull	r2, r3, r3, r1
 8000b18:	109a      	asrs	r2, r3, #2
 8000b1a:	17cb      	asrs	r3, r1, #31
 8000b1c:	1ad2      	subs	r2, r2, r3
 8000b1e:	4613      	mov	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	1aca      	subs	r2, r1, r3
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <setLedBuffer+0x74>)
 8000b2a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = second_led_time / 10;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <setLedBuffer+0x70>)
 8000b30:	fb82 1203 	smull	r1, r2, r2, r3
 8000b34:	1092      	asrs	r2, r2, #2
 8000b36:	17db      	asrs	r3, r3, #31
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <setLedBuffer+0x74>)
 8000b3c:	6093      	str	r3, [r2, #8]
	led_buffer[3] = second_led_time % 10;
 8000b3e:	6839      	ldr	r1, [r7, #0]
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <setLedBuffer+0x70>)
 8000b42:	fb83 2301 	smull	r2, r3, r3, r1
 8000b46:	109a      	asrs	r2, r3, #2
 8000b48:	17cb      	asrs	r3, r1, #31
 8000b4a:	1ad2      	subs	r2, r2, r3
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	1aca      	subs	r2, r1, r3
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <setLedBuffer+0x74>)
 8000b58:	60da      	str	r2, [r3, #12]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	66666667 	.word	0x66666667
 8000b68:	20000044 	.word	0x20000044

08000b6c <updateLedBuffer>:

void updateLedBuffer()
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	//TODO
	if(led_buffer[1] <= 0)
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <updateLedBuffer+0x54>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	dc08      	bgt.n	8000b8a <updateLedBuffer+0x1e>
	{
		led_buffer[0]--;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <updateLedBuffer+0x54>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <updateLedBuffer+0x54>)
 8000b80:	6013      	str	r3, [r2, #0]
		led_buffer[1] = 9;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <updateLedBuffer+0x54>)
 8000b84:	2209      	movs	r2, #9
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	e004      	b.n	8000b94 <updateLedBuffer+0x28>
	}
	else
	{
		led_buffer[1]--;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <updateLedBuffer+0x54>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <updateLedBuffer+0x54>)
 8000b92:	6053      	str	r3, [r2, #4]
	}
	if(led_buffer[3] <= 0)
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <updateLedBuffer+0x54>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	dc08      	bgt.n	8000bae <updateLedBuffer+0x42>
	{
		led_buffer[2]--;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <updateLedBuffer+0x54>)
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <updateLedBuffer+0x54>)
 8000ba4:	6093      	str	r3, [r2, #8]
		led_buffer[3] = 9;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <updateLedBuffer+0x54>)
 8000ba8:	2209      	movs	r2, #9
 8000baa:	60da      	str	r2, [r3, #12]
	}
	else
	{
		led_buffer[3]--;
	}
}
 8000bac:	e004      	b.n	8000bb8 <updateLedBuffer+0x4c>
		led_buffer[3]--;
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <updateLedBuffer+0x54>)
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	4a02      	ldr	r2, [pc, #8]	; (8000bc0 <updateLedBuffer+0x54>)
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	20000044 	.word	0x20000044

08000bc4 <resetInitialState>:

void resetInitialState()
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	count = 0;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <resetInitialState+0x4c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, PED_LIGHT1_Pin|LIGHT3_Pin|LIGHT4_Pin|LIGHT5_Pin, SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000bd4:	480f      	ldr	r0, [pc, #60]	; (8000c14 <resetInitialState+0x50>)
 8000bd6:	f000 fea0 	bl	800191a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, PED_LIGHT2_Pin|LIGHT2_Pin, SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <resetInitialState+0x54>)
 8000be2:	f000 fe9a 	bl	800191a <HAL_GPIO_WritePin>

	timer1_flag = 0;
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <resetInitialState+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <resetInitialState+0x5c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
	timer3_flag = 0;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <resetInitialState+0x60>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
	timer4_flag = 0;
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <resetInitialState+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]

	isButton1Pressed(); // delete all button_flag
 8000bfe:	f7ff fd53 	bl	80006a8 <isButton1Pressed>
	isButton2Pressed();
 8000c02:	f7ff fd6f 	bl	80006e4 <isButton2Pressed>
	isButton3Pressed();
 8000c06:	f7ff fd8b 	bl	8000720 <isButton3Pressed>

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000fc 	.word	0x200000fc
 8000c14:	40010c00 	.word	0x40010c00
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	20000114 	.word	0x20000114
 8000c20:	20000118 	.word	0x20000118
 8000c24:	2000011c 	.word	0x2000011c
 8000c28:	20000120 	.word	0x20000120

08000c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c30:	f000 fb72 	bl	8001318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c34:	f000 f826 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c38:	f000 f8ac 	bl	8000d94 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c3c:	f000 f85e 	bl	8000cfc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c40:	480c      	ldr	r0, [pc, #48]	; (8000c74 <main+0x48>)
 8000c42:	f001 fac7 	bl	80021d4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  status = NORMAL_MODE;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <main+0x4c>)
 8000c48:	2215      	movs	r2, #21
 8000c4a:	601a      	str	r2, [r3, #0]
  SCH_Add_Task(timerRun, 0, 10); 	// setflag function
 8000c4c:	220a      	movs	r2, #10
 8000c4e:	2100      	movs	r1, #0
 8000c50:	480a      	ldr	r0, [pc, #40]	; (8000c7c <main+0x50>)
 8000c52:	f000 f91d 	bl	8000e90 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 10);	// read button flag function every 10 ms
 8000c56:	220a      	movs	r2, #10
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4809      	ldr	r0, [pc, #36]	; (8000c80 <main+0x54>)
 8000c5c:	f000 f918 	bl	8000e90 <SCH_Add_Task>
  while (1)
  {
	  FSMNormalModeRun();
 8000c60:	f7ff fc22 	bl	80004a8 <FSMNormalModeRun>
	  FSMModificationModeRun();
 8000c64:	f7ff fb3a 	bl	80002dc <FSMModificationModeRun>
	  FSMLightModification();
 8000c68:	f7ff fa70 	bl	800014c <FSMLightModification>
	  SCH_Dispatch_Tasks();
 8000c6c:	f000 f9a2 	bl	8000fb4 <SCH_Dispatch_Tasks>
	  FSMNormalModeRun();
 8000c70:	e7f6      	b.n	8000c60 <main+0x34>
 8000c72:	bf00      	nop
 8000c74:	20000130 	.word	0x20000130
 8000c78:	20000100 	.word	0x20000100
 8000c7c:	08001049 	.word	0x08001049
 8000c80:	08000775 	.word	0x08000775

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b090      	sub	sp, #64	; 0x40
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	2228      	movs	r2, #40	; 0x28
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 fe70 	bl	8002978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000caa:	2301      	movs	r3, #1
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cae:	2310      	movs	r3, #16
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb6:	f107 0318 	add.w	r3, r7, #24
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 fe5e 	bl	800197c <HAL_RCC_OscConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cc6:	f000 f8dd 	bl	8000e84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cca:	230f      	movs	r3, #15
 8000ccc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 f8ca 	bl	8001e7c <HAL_RCC_ClockConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cee:	f000 f8c9 	bl	8000e84 <Error_Handler>
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3740      	adds	r7, #64	; 0x40
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d22:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d30:	2209      	movs	r2, #9
 8000d32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d40:	4813      	ldr	r0, [pc, #76]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d42:	f001 f9f7 	bl	8002134 <HAL_TIM_Base_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d4c:	f000 f89a 	bl	8000e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d5e:	f001 fb8d 	bl	800247c <HAL_TIM_ConfigClockSource>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d68:	f000 f88c 	bl	8000e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d7a:	f001 fd59 	bl	8002830 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d84:	f000 f87e 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000130 	.word	0x20000130

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 0308 	add.w	r3, r7, #8
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <MX_GPIO_Init+0xd0>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a2d      	ldr	r2, [pc, #180]	; (8000e64 <MX_GPIO_Init+0xd0>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <MX_GPIO_Init+0xd0>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc0:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <MX_GPIO_Init+0xd0>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a27      	ldr	r2, [pc, #156]	; (8000e64 <MX_GPIO_Init+0xd0>)
 8000dc6:	f043 0308 	orr.w	r3, r3, #8
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <MX_GPIO_Init+0xd0>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PED_LIGHT1_Pin|LIGHT3_Pin|LIGHT4_Pin|LIGHT5_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000dde:	4822      	ldr	r0, [pc, #136]	; (8000e68 <MX_GPIO_Init+0xd4>)
 8000de0:	f000 fd9b 	bl	800191a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PED_LIGHT2_Pin|LIGHT2_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000dea:	4820      	ldr	r0, [pc, #128]	; (8000e6c <MX_GPIO_Init+0xd8>)
 8000dec:	f000 fd95 	bl	800191a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PED_BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = PED_BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000df0:	2313      	movs	r3, #19
 8000df2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	4619      	mov	r1, r3
 8000e02:	481a      	ldr	r0, [pc, #104]	; (8000e6c <MX_GPIO_Init+0xd8>)
 8000e04:	f000 fbf8 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4813      	ldr	r0, [pc, #76]	; (8000e68 <MX_GPIO_Init+0xd4>)
 8000e1c:	f000 fbec 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_LIGHT1_Pin LIGHT3_Pin LIGHT4_Pin LIGHT5_Pin */
  GPIO_InitStruct.Pin = PED_LIGHT1_Pin|LIGHT3_Pin|LIGHT4_Pin|LIGHT5_Pin;
 8000e20:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000e24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f107 0308 	add.w	r3, r7, #8
 8000e36:	4619      	mov	r1, r3
 8000e38:	480b      	ldr	r0, [pc, #44]	; (8000e68 <MX_GPIO_Init+0xd4>)
 8000e3a:	f000 fbdd 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_LIGHT2_Pin LIGHT2_Pin */
  GPIO_InitStruct.Pin = PED_LIGHT2_Pin|LIGHT2_Pin;
 8000e3e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	4619      	mov	r1, r3
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_GPIO_Init+0xd8>)
 8000e58:	f000 fbce 	bl	80015f8 <HAL_GPIO_Init>

}
 8000e5c:	bf00      	nop
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010c00 	.word	0x40010c00
 8000e6c:	40010800 	.word	0x40010800

08000e70 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000e78:	f000 f874 	bl	8000f64 <SCH_Update>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <Error_Handler+0x8>
	...

08000e90 <SCH_Add_Task>:
{
    struct task *top;
} stack_task;

void SCH_Add_Task(void (*pTask)(), uint16_t delay, uint16_t period)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	803b      	strh	r3, [r7, #0]
    struct task *my_task = (struct task *)malloc(sizeof(struct task));
 8000ea0:	200c      	movs	r0, #12
 8000ea2:	f001 fd59 	bl	8002958 <malloc>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	60fb      	str	r3, [r7, #12]
    my_task->pTask = pTask;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	601a      	str	r2, [r3, #0]
    my_task->counter = delay *FREQ_OF_TIM/1000;
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	4a2a      	ldr	r2, [pc, #168]	; (8000f5c <SCH_Add_Task+0xcc>)
 8000eb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb8:	1092      	asrs	r2, r2, #2
 8000eba:	17db      	asrs	r3, r3, #31
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	809a      	strh	r2, [r3, #4]
    my_task->period = period;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	883a      	ldrh	r2, [r7, #0]
 8000ec8:	80da      	strh	r2, [r3, #6]
    my_task->next_task = 0;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
    if (stack_task.top == 0)
 8000ed0:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <SCH_Add_Task+0xd0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d103      	bne.n	8000ee0 <SCH_Add_Task+0x50>
    {
        stack_task.top = my_task;
 8000ed8:	4a21      	ldr	r2, [pc, #132]	; (8000f60 <SCH_Add_Task+0xd0>)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	6013      	str	r3, [r2, #0]
        return;
 8000ede:	e039      	b.n	8000f54 <SCH_Add_Task+0xc4>
    }
    struct task *pre = stack_task.top;
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <SCH_Add_Task+0xd0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	617b      	str	r3, [r7, #20]
    struct task *cur = stack_task.top;
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <SCH_Add_Task+0xd0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	613b      	str	r3, [r7, #16]
    while (cur && my_task->counter >= cur->counter)
 8000eec:	e00c      	b.n	8000f08 <SCH_Add_Task+0x78>
    {
        my_task->counter = my_task->counter - cur->counter;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	889a      	ldrh	r2, [r3, #4]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	889b      	ldrh	r3, [r3, #4]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	809a      	strh	r2, [r3, #4]
        pre = cur;
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	617b      	str	r3, [r7, #20]
        cur = cur->next_task;
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	613b      	str	r3, [r7, #16]
    while (cur && my_task->counter >= cur->counter)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d005      	beq.n	8000f1a <SCH_Add_Task+0x8a>
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	889a      	ldrh	r2, [r3, #4]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	889b      	ldrh	r3, [r3, #4]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d2e9      	bcs.n	8000eee <SCH_Add_Task+0x5e>
    }
    if (pre != cur)
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d006      	beq.n	8000f30 <SCH_Add_Task+0xa0>
    {
        pre->next_task = my_task;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	609a      	str	r2, [r3, #8]
        my_task->next_task = cur;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	e005      	b.n	8000f3c <SCH_Add_Task+0xac>
    }
    else
    {
        my_task->next_task = cur;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	609a      	str	r2, [r3, #8]
        stack_task.top = my_task;
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <SCH_Add_Task+0xd0>)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6013      	str	r3, [r2, #0]
    }
    if (cur)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d007      	beq.n	8000f52 <SCH_Add_Task+0xc2>
        cur->counter -= my_task->counter;
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	889a      	ldrh	r2, [r3, #4]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	889b      	ldrh	r3, [r3, #4]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	809a      	strh	r2, [r3, #4]
    return;
 8000f52:	bf00      	nop
}
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	66666667 	.word	0x66666667
 8000f60:	20000178 	.word	0x20000178

08000f64 <SCH_Update>:

void SCH_Update(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
    if (stack_task.top == 0)
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <SCH_Update+0x2c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00b      	beq.n	8000f88 <SCH_Update+0x24>
        return;
    if (stack_task.top->counter > 0)
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <SCH_Update+0x2c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	889b      	ldrh	r3, [r3, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d007      	beq.n	8000f8a <SCH_Update+0x26>
    {
        stack_task.top->counter--;
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SCH_Update+0x2c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	889a      	ldrh	r2, [r3, #4]
 8000f80:	3a01      	subs	r2, #1
 8000f82:	b292      	uxth	r2, r2
 8000f84:	809a      	strh	r2, [r3, #4]
 8000f86:	e000      	b.n	8000f8a <SCH_Update+0x26>
        return;
 8000f88:	bf00      	nop
    }
}
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	20000178 	.word	0x20000178

08000f94 <SCH_Delete_Task>:

void SCH_Delete_Task(struct task *del_task)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
    if (del_task == 0)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <SCH_Delete_Task+0x16>
    {
        return;
    }
    free(del_task);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f001 fce0 	bl	8002968 <free>
 8000fa8:	e000      	b.n	8000fac <SCH_Delete_Task+0x18>
        return;
 8000faa:	bf00      	nop
}
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
    if (stack_task.top == 0)
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <SCH_Dispatch_Tasks+0x64>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d024      	beq.n	800100c <SCH_Dispatch_Tasks+0x58>
        return;
    if (stack_task.top->counter == 0)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <SCH_Dispatch_Tasks+0x64>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	889b      	ldrh	r3, [r3, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d121      	bne.n	8001010 <SCH_Dispatch_Tasks+0x5c>
    {
        (*stack_task.top->pTask)();
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <SCH_Dispatch_Tasks+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4798      	blx	r3
        struct task *temp = stack_task.top;
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <SCH_Dispatch_Tasks+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	607b      	str	r3, [r7, #4]
        stack_task.top = stack_task.top->next_task;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <SCH_Dispatch_Tasks+0x64>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <SCH_Dispatch_Tasks+0x64>)
 8000fe2:	6013      	str	r3, [r2, #0]
        temp->next_task = 0;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
        if (temp->period != 0)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	88db      	ldrh	r3, [r3, #6]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d008      	beq.n	8001004 <SCH_Dispatch_Tasks+0x50>
        {
            SCH_Add_Task(temp->pTask, temp->period, temp->period);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	88d9      	ldrh	r1, [r3, #6]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	88db      	ldrh	r3, [r3, #6]
 8000ffe:	461a      	mov	r2, r3
 8001000:	f7ff ff46 	bl	8000e90 <SCH_Add_Task>
        }
        SCH_Delete_Task(temp);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ffc5 	bl	8000f94 <SCH_Delete_Task>
        return;
 800100a:	e002      	b.n	8001012 <SCH_Dispatch_Tasks+0x5e>
        return;
 800100c:	bf00      	nop
 800100e:	e000      	b.n	8001012 <SCH_Dispatch_Tasks+0x5e>
    }
    return;
 8001010:	bf00      	nop
}
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000178 	.word	0x20000178

0800101c <setTimer1>:

int timer1_counter = 0;
int timer1_flag = 0;
// counter for trafic light (already multiple for 100)
void setTimer1(int duration)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	timer1_counter = duration*100;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2264      	movs	r2, #100	; 0x64
 8001028:	fb02 f303 	mul.w	r3, r2, r3
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <setTimer1+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <setTimer1+0x28>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	20000104 	.word	0x20000104
 8001044:	20000114 	.word	0x20000114

08001048 <timerRun>:

void timerRun()
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <timerRun+0x8c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	dd0b      	ble.n	800106c <timerRun+0x24>
	{
		timer1_counter--;
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <timerRun+0x8c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3b01      	subs	r3, #1
 800105a:	4a1e      	ldr	r2, [pc, #120]	; (80010d4 <timerRun+0x8c>)
 800105c:	6013      	str	r3, [r2, #0]

		if(timer1_counter <= 0)
 800105e:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <timerRun+0x8c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	dc02      	bgt.n	800106c <timerRun+0x24>
		{
			timer1_flag = 1;
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <timerRun+0x90>)
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0)
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <timerRun+0x94>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	dd0b      	ble.n	800108c <timerRun+0x44>
	{
		timer2_counter--;//counter led 7 segment
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <timerRun+0x94>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3b01      	subs	r3, #1
 800107a:	4a18      	ldr	r2, [pc, #96]	; (80010dc <timerRun+0x94>)
 800107c:	6013      	str	r3, [r2, #0]

		if(timer2_counter <= 0) // counter led 7 segment
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <timerRun+0x94>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	dc02      	bgt.n	800108c <timerRun+0x44>
		{
			timer2_flag = 1;
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <timerRun+0x98>)
 8001088:	2201      	movs	r2, #1
 800108a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0)
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <timerRun+0x9c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	dd0b      	ble.n	80010ac <timerRun+0x64>
	{
		timer3_counter--;
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <timerRun+0x9c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	3b01      	subs	r3, #1
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <timerRun+0x9c>)
 800109c:	6013      	str	r3, [r2, #0]

		if(timer3_counter <= 0)
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <timerRun+0x9c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	dc02      	bgt.n	80010ac <timerRun+0x64>
		{
			timer3_flag = 1;
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <timerRun+0xa0>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0)
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <timerRun+0xa4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	dd0b      	ble.n	80010cc <timerRun+0x84>
	{
		timer4_counter--;
 80010b4:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <timerRun+0xa4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	4a0c      	ldr	r2, [pc, #48]	; (80010ec <timerRun+0xa4>)
 80010bc:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0)
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <timerRun+0xa4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	dc02      	bgt.n	80010cc <timerRun+0x84>
		{
			timer4_flag = 1;
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <timerRun+0xa8>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]
		}
	}

}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	20000104 	.word	0x20000104
 80010d8:	20000114 	.word	0x20000114
 80010dc:	20000108 	.word	0x20000108
 80010e0:	20000118 	.word	0x20000118
 80010e4:	2000010c 	.word	0x2000010c
 80010e8:	2000011c 	.word	0x2000011c
 80010ec:	20000110 	.word	0x20000110
 80010f0:	20000120 	.word	0x20000120

080010f4 <setTimer3>:

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer3(int duration3)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	timer3_counter = duration3;
 80010fc:	4a05      	ldr	r2, [pc, #20]	; (8001114 <setTimer3+0x20>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <setTimer3+0x24>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	2000010c 	.word	0x2000010c
 8001118:	2000011c 	.word	0x2000011c

0800111c <setTimer4>:

int timer4_counter = 0;
int timer4_flag = 0;

void setTimer4(int duration4)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	timer4_counter = duration4;
 8001124:	4a05      	ldr	r2, [pc, #20]	; (800113c <setTimer4+0x20>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <setTimer4+0x24>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000110 	.word	0x20000110
 8001140:	20000120 	.word	0x20000120

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_MspInit+0x5c>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <HAL_MspInit+0x5c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6193      	str	r3, [r2, #24]
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_MspInit+0x5c>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_MspInit+0x5c>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_MspInit+0x5c>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	61d3      	str	r3, [r2, #28]
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_MspInit+0x5c>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_MspInit+0x60>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_MspInit+0x60>)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40010000 	.word	0x40010000

080011a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011b8:	d113      	bne.n	80011e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_TIM_Base_MspInit+0x44>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <HAL_TIM_Base_MspInit+0x44>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_TIM_Base_MspInit+0x44>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	201c      	movs	r0, #28
 80011d8:	f000 f9d7 	bl	800158a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011dc:	201c      	movs	r0, #28
 80011de:	f000 f9f0 	bl	80015c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr

08001226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001236:	f000 f8b5 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <TIM2_IRQHandler+0x10>)
 8001246:	f001 f811 	bl	800226c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000130 	.word	0x20000130

08001254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <_sbrk+0x5c>)
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <_sbrk+0x60>)
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d102      	bne.n	8001276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <_sbrk+0x64>)
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <_sbrk+0x68>)
 8001274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <_sbrk+0x64>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	429a      	cmp	r2, r3
 8001282:	d207      	bcs.n	8001294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001284:	f001 fb3e 	bl	8002904 <__errno>
 8001288:	4603      	mov	r3, r0
 800128a:	220c      	movs	r2, #12
 800128c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	e009      	b.n	80012a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <_sbrk+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <_sbrk+0x64>)
 80012a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a6:	68fb      	ldr	r3, [r7, #12]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20002800 	.word	0x20002800
 80012b4:	00000400 	.word	0x00000400
 80012b8:	20000124 	.word	0x20000124
 80012bc:	20000190 	.word	0x20000190

080012c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <Reset_Handler>:
 80012cc:	f7ff fff8 	bl	80012c0 <SystemInit>
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <LoopFillZerobss+0xe>)
 80012d2:	490c      	ldr	r1, [pc, #48]	; (8001304 <LoopFillZerobss+0x12>)
 80012d4:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <LoopFillZerobss+0x16>)
 80012d6:	2300      	movs	r3, #0
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:
 80012da:	58d4      	ldr	r4, [r2, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:
 80012e0:	18c4      	adds	r4, r0, r3
 80012e2:	428c      	cmp	r4, r1
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
 80012e6:	4a09      	ldr	r2, [pc, #36]	; (800130c <LoopFillZerobss+0x1a>)
 80012e8:	4c09      	ldr	r4, [pc, #36]	; (8001310 <LoopFillZerobss+0x1e>)
 80012ea:	2300      	movs	r3, #0
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:
 80012f2:	42a2      	cmp	r2, r4
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>
 80012f6:	f001 fb0b 	bl	8002910 <__libc_init_array>
 80012fa:	f7ff fc97 	bl	8000c2c <main>
 80012fe:	4770      	bx	lr
 8001300:	20000000 	.word	0x20000000
 8001304:	200000d0 	.word	0x200000d0
 8001308:	08002b54 	.word	0x08002b54
 800130c:	200000d0 	.word	0x200000d0
 8001310:	20000190 	.word	0x20000190

08001314 <ADC1_2_IRQHandler>:
 8001314:	e7fe      	b.n	8001314 <ADC1_2_IRQHandler>
	...

08001318 <HAL_Init>:
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_Init+0x28>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_Init+0x28>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	2003      	movs	r0, #3
 800132a:	f000 f923 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>
 800132e:	200f      	movs	r0, #15
 8001330:	f000 f808 	bl	8001344 <HAL_InitTick>
 8001334:	f7ff ff06 	bl	8001144 <HAL_MspInit>
 8001338:	2300      	movs	r3, #0
 800133a:	4618      	mov	r0, r3
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40022000 	.word	0x40022000

08001344 <HAL_InitTick>:
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_InitTick+0x54>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0x58>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f93b 	bl	80015de <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_InitTick+0x2e>
 800136e:	2301      	movs	r3, #1
 8001370:	e00e      	b.n	8001390 <HAL_InitTick+0x4c>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <HAL_InitTick+0x4a>
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f000 f903 	bl	800158a <HAL_NVIC_SetPriority>
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_InitTick+0x5c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_InitTick+0x4c>
 800138e:	2301      	movs	r3, #1
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000060 	.word	0x20000060
 800139c:	20000068 	.word	0x20000068
 80013a0:	20000064 	.word	0x20000064

080013a4 <HAL_IncTick>:
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_IncTick+0x1c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <HAL_IncTick+0x20>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a03      	ldr	r2, [pc, #12]	; (80013c4 <HAL_IncTick+0x20>)
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	20000068 	.word	0x20000068
 80013c4:	2000017c 	.word	0x2000017c

080013c8 <HAL_GetTick>:
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <HAL_GetTick+0x10>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	2000017c 	.word	0x2000017c

080013dc <__NVIC_SetPriorityGrouping>:
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	021a      	lsls	r2, r3, #8
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4313      	orrs	r3, r2
 8001404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_GetPriorityGrouping>:
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <__NVIC_GetPriorityGrouping+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_EnableIRQ>:
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	db0b      	blt.n	800146a <__NVIC_EnableIRQ+0x2a>
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	f003 021f 	and.w	r2, r3, #31
 8001458:	4906      	ldr	r1, [pc, #24]	; (8001474 <__NVIC_EnableIRQ+0x34>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	2001      	movs	r0, #1
 8001462:	fa00 f202 	lsl.w	r2, r0, r2
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100

08001478 <__NVIC_SetPriority>:
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	2b00      	cmp	r3, #0
 800148a:	db0a      	blt.n	80014a2 <__NVIC_SetPriority+0x2a>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	490c      	ldr	r1, [pc, #48]	; (80014c4 <__NVIC_SetPriority+0x4c>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	0112      	lsls	r2, r2, #4
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	440b      	add	r3, r1
 800149c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80014a0:	e00a      	b.n	80014b8 <__NVIC_SetPriority+0x40>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4908      	ldr	r1, [pc, #32]	; (80014c8 <__NVIC_SetPriority+0x50>)
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	3b04      	subs	r3, #4
 80014b0:	0112      	lsls	r2, r2, #4
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	440b      	add	r3, r1
 80014b6:	761a      	strb	r2, [r3, #24]
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e100 	.word	0xe000e100
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <NVIC_EncodePriority>:
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f1c3 0307 	rsb	r3, r3, #7
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	bf28      	it	cs
 80014ea:	2304      	movcs	r3, #4
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3304      	adds	r3, #4
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d902      	bls.n	80014fc <NVIC_EncodePriority+0x30>
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3b03      	subs	r3, #3
 80014fa:	e000      	b.n	80014fe <NVIC_EncodePriority+0x32>
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	f04f 32ff 	mov.w	r2, #4294967295
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	401a      	ands	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	409a      	lsls	r2, r3
 8001514:	f04f 31ff 	mov.w	r1, #4294967295
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	43d9      	mvns	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	400b      	ands	r3, r1
 8001524:	4313      	orrs	r3, r2
 8001526:	4618      	mov	r0, r3
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <SysTick_Config>:
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001540:	d301      	bcc.n	8001546 <SysTick_Config+0x16>
 8001542:	2301      	movs	r3, #1
 8001544:	e00f      	b.n	8001566 <SysTick_Config+0x36>
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <SysTick_Config+0x40>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	6053      	str	r3, [r2, #4]
 800154e:	210f      	movs	r1, #15
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f7ff ff90 	bl	8001478 <__NVIC_SetPriority>
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <SysTick_Config+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <SysTick_Config+0x40>)
 8001560:	2207      	movs	r2, #7
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	2300      	movs	r3, #0
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	e000e010 	.word	0xe000e010

08001574 <HAL_NVIC_SetPriorityGrouping>:
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff2d 	bl	80013dc <__NVIC_SetPriorityGrouping>
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_SetPriority>:
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	f7ff ff42 	bl	8001424 <__NVIC_GetPriorityGrouping>
 80015a0:	6178      	str	r0, [r7, #20]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	6978      	ldr	r0, [r7, #20]
 80015a8:	f7ff ff90 	bl	80014cc <NVIC_EncodePriority>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff5f 	bl	8001478 <__NVIC_SetPriority>
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_EnableIRQ>:
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	71fb      	strb	r3, [r7, #7]
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff35 	bl	8001440 <__NVIC_EnableIRQ>
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_SYSTICK_Config>:
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffa2 	bl	8001530 <SysTick_Config>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_GPIO_Init>:
 80015f8:	b480      	push	{r7}
 80015fa:	b08b      	sub	sp, #44	; 0x2c
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
 800160a:	e148      	b.n	800189e <HAL_GPIO_Init+0x2a6>
 800160c:	2201      	movs	r2, #1
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	429a      	cmp	r2, r3
 8001626:	f040 8137 	bne.w	8001898 <HAL_GPIO_Init+0x2a0>
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4aa3      	ldr	r2, [pc, #652]	; (80018bc <HAL_GPIO_Init+0x2c4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d05e      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001634:	4aa1      	ldr	r2, [pc, #644]	; (80018bc <HAL_GPIO_Init+0x2c4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d875      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800163a:	4aa1      	ldr	r2, [pc, #644]	; (80018c0 <HAL_GPIO_Init+0x2c8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d058      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001640:	4a9f      	ldr	r2, [pc, #636]	; (80018c0 <HAL_GPIO_Init+0x2c8>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d86f      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001646:	4a9f      	ldr	r2, [pc, #636]	; (80018c4 <HAL_GPIO_Init+0x2cc>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d052      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 800164c:	4a9d      	ldr	r2, [pc, #628]	; (80018c4 <HAL_GPIO_Init+0x2cc>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d869      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001652:	4a9d      	ldr	r2, [pc, #628]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d04c      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001658:	4a9b      	ldr	r2, [pc, #620]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d863      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800165e:	4a9b      	ldr	r2, [pc, #620]	; (80018cc <HAL_GPIO_Init+0x2d4>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d046      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001664:	4a99      	ldr	r2, [pc, #612]	; (80018cc <HAL_GPIO_Init+0x2d4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d85d      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800166a:	2b12      	cmp	r3, #18
 800166c:	d82a      	bhi.n	80016c4 <HAL_GPIO_Init+0xcc>
 800166e:	2b12      	cmp	r3, #18
 8001670:	d859      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001672:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <HAL_GPIO_Init+0x80>)
 8001674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001678:	080016f3 	.word	0x080016f3
 800167c:	080016cd 	.word	0x080016cd
 8001680:	080016df 	.word	0x080016df
 8001684:	08001721 	.word	0x08001721
 8001688:	08001727 	.word	0x08001727
 800168c:	08001727 	.word	0x08001727
 8001690:	08001727 	.word	0x08001727
 8001694:	08001727 	.word	0x08001727
 8001698:	08001727 	.word	0x08001727
 800169c:	08001727 	.word	0x08001727
 80016a0:	08001727 	.word	0x08001727
 80016a4:	08001727 	.word	0x08001727
 80016a8:	08001727 	.word	0x08001727
 80016ac:	08001727 	.word	0x08001727
 80016b0:	08001727 	.word	0x08001727
 80016b4:	08001727 	.word	0x08001727
 80016b8:	08001727 	.word	0x08001727
 80016bc:	080016d5 	.word	0x080016d5
 80016c0:	080016e9 	.word	0x080016e9
 80016c4:	4a82      	ldr	r2, [pc, #520]	; (80018d0 <HAL_GPIO_Init+0x2d8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d013      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 80016ca:	e02c      	b.n	8001726 <HAL_GPIO_Init+0x12e>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	623b      	str	r3, [r7, #32]
 80016d2:	e029      	b.n	8001728 <HAL_GPIO_Init+0x130>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	3304      	adds	r3, #4
 80016da:	623b      	str	r3, [r7, #32]
 80016dc:	e024      	b.n	8001728 <HAL_GPIO_Init+0x130>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	3308      	adds	r3, #8
 80016e4:	623b      	str	r3, [r7, #32]
 80016e6:	e01f      	b.n	8001728 <HAL_GPIO_Init+0x130>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	330c      	adds	r3, #12
 80016ee:	623b      	str	r3, [r7, #32]
 80016f0:	e01a      	b.n	8001728 <HAL_GPIO_Init+0x130>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <HAL_GPIO_Init+0x108>
 80016fa:	2304      	movs	r3, #4
 80016fc:	623b      	str	r3, [r7, #32]
 80016fe:	e013      	b.n	8001728 <HAL_GPIO_Init+0x130>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_GPIO_Init+0x11c>
 8001708:	2308      	movs	r3, #8
 800170a:	623b      	str	r3, [r7, #32]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	e009      	b.n	8001728 <HAL_GPIO_Init+0x130>
 8001714:	2308      	movs	r3, #8
 8001716:	623b      	str	r3, [r7, #32]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	615a      	str	r2, [r3, #20]
 800171e:	e003      	b.n	8001728 <HAL_GPIO_Init+0x130>
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
 8001724:	e000      	b.n	8001728 <HAL_GPIO_Init+0x130>
 8001726:	bf00      	nop
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2bff      	cmp	r3, #255	; 0xff
 800172c:	d801      	bhi.n	8001732 <HAL_GPIO_Init+0x13a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	e001      	b.n	8001736 <HAL_GPIO_Init+0x13e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3304      	adds	r3, #4
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2bff      	cmp	r3, #255	; 0xff
 800173c:	d802      	bhi.n	8001744 <HAL_GPIO_Init+0x14c>
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	e002      	b.n	800174a <HAL_GPIO_Init+0x152>
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	3b08      	subs	r3, #8
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	210f      	movs	r1, #15
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	401a      	ands	r2, r3
 800175c:	6a39      	ldr	r1, [r7, #32]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	fa01 f303 	lsl.w	r3, r1, r3
 8001764:	431a      	orrs	r2, r3
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8090 	beq.w	8001898 <HAL_GPIO_Init+0x2a0>
 8001778:	4b56      	ldr	r3, [pc, #344]	; (80018d4 <HAL_GPIO_Init+0x2dc>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a55      	ldr	r2, [pc, #340]	; (80018d4 <HAL_GPIO_Init+0x2dc>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <HAL_GPIO_Init+0x2dc>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	4a51      	ldr	r2, [pc, #324]	; (80018d8 <HAL_GPIO_Init+0x2e0>)
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	220f      	movs	r2, #15
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4013      	ands	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a49      	ldr	r2, [pc, #292]	; (80018dc <HAL_GPIO_Init+0x2e4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d00d      	beq.n	80017d8 <HAL_GPIO_Init+0x1e0>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a48      	ldr	r2, [pc, #288]	; (80018e0 <HAL_GPIO_Init+0x2e8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d007      	beq.n	80017d4 <HAL_GPIO_Init+0x1dc>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a47      	ldr	r2, [pc, #284]	; (80018e4 <HAL_GPIO_Init+0x2ec>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d101      	bne.n	80017d0 <HAL_GPIO_Init+0x1d8>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e004      	b.n	80017da <HAL_GPIO_Init+0x1e2>
 80017d0:	2303      	movs	r3, #3
 80017d2:	e002      	b.n	80017da <HAL_GPIO_Init+0x1e2>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <HAL_GPIO_Init+0x1e2>
 80017d8:	2300      	movs	r3, #0
 80017da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017dc:	f002 0203 	and.w	r2, r2, #3
 80017e0:	0092      	lsls	r2, r2, #2
 80017e2:	4093      	lsls	r3, r2
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	493b      	ldr	r1, [pc, #236]	; (80018d8 <HAL_GPIO_Init+0x2e0>)
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3302      	adds	r3, #2
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <HAL_GPIO_Init+0x21a>
 8001804:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	4937      	ldr	r1, [pc, #220]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x228>
 8001812:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	43db      	mvns	r3, r3
 800181a:	4933      	ldr	r1, [pc, #204]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800181c:	4013      	ands	r3, r2
 800181e:	608b      	str	r3, [r1, #8]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d006      	beq.n	800183a <HAL_GPIO_Init+0x242>
 800182c:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	492d      	ldr	r1, [pc, #180]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	60cb      	str	r3, [r1, #12]
 8001838:	e006      	b.n	8001848 <HAL_GPIO_Init+0x250>
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	43db      	mvns	r3, r3
 8001842:	4929      	ldr	r1, [pc, #164]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001844:	4013      	ands	r3, r2
 8001846:	60cb      	str	r3, [r1, #12]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <HAL_GPIO_Init+0x26a>
 8001854:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4923      	ldr	r1, [pc, #140]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x278>
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	43db      	mvns	r3, r3
 800186a:	491f      	ldr	r1, [pc, #124]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800186c:	4013      	ands	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <HAL_GPIO_Init+0x292>
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4919      	ldr	r1, [pc, #100]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x2a0>
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	43db      	mvns	r3, r3
 8001892:	4915      	ldr	r1, [pc, #84]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001894:	4013      	ands	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	3301      	adds	r3, #1
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f47f aeaf 	bne.w	800160c <HAL_GPIO_Init+0x14>
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
 80018b2:	372c      	adds	r7, #44	; 0x2c
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	10320000 	.word	0x10320000
 80018c0:	10310000 	.word	0x10310000
 80018c4:	10220000 	.word	0x10220000
 80018c8:	10210000 	.word	0x10210000
 80018cc:	10120000 	.word	0x10120000
 80018d0:	10110000 	.word	0x10110000
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010000 	.word	0x40010000
 80018dc:	40010800 	.word	0x40010800
 80018e0:	40010c00 	.word	0x40010c00
 80018e4:	40011000 	.word	0x40011000
 80018e8:	40010400 	.word	0x40010400

080018ec <HAL_GPIO_ReadPin>:
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	887b      	ldrh	r3, [r7, #2]
 80018fe:	4013      	ands	r3, r2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <HAL_GPIO_ReadPin+0x1e>
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
 8001908:	e001      	b.n	800190e <HAL_GPIO_ReadPin+0x22>
 800190a:	2300      	movs	r3, #0
 800190c:	73fb      	strb	r3, [r7, #15]
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <HAL_GPIO_WritePin>:
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	460b      	mov	r3, r1
 8001924:	807b      	strh	r3, [r7, #2]
 8001926:	4613      	mov	r3, r2
 8001928:	707b      	strb	r3, [r7, #1]
 800192a:	787b      	ldrb	r3, [r7, #1]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_WritePin+0x1e>
 8001930:	887a      	ldrh	r2, [r7, #2]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	611a      	str	r2, [r3, #16]
 8001936:	e003      	b.n	8001940 <HAL_GPIO_WritePin+0x26>
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	041a      	lsls	r2, r3, #16
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	611a      	str	r2, [r3, #16]
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <HAL_GPIO_TogglePin>:
 800194a:	b480      	push	{r7}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	807b      	strh	r3, [r7, #2]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	887a      	ldrh	r2, [r7, #2]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4013      	ands	r3, r2
 8001962:	041a      	lsls	r2, r3, #16
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	43d9      	mvns	r1, r3
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	400b      	ands	r3, r1
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	611a      	str	r2, [r3, #16]
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <HAL_RCC_OscConfig>:
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_OscConfig+0x12>
 800198a:	2301      	movs	r3, #1
 800198c:	e26c      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8087 	beq.w	8001aaa <HAL_RCC_OscConfig+0x12e>
 800199c:	4b92      	ldr	r3, [pc, #584]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d00c      	beq.n	80019c2 <HAL_RCC_OscConfig+0x46>
 80019a8:	4b8f      	ldr	r3, [pc, #572]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d112      	bne.n	80019da <HAL_RCC_OscConfig+0x5e>
 80019b4:	4b8c      	ldr	r3, [pc, #560]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c0:	d10b      	bne.n	80019da <HAL_RCC_OscConfig+0x5e>
 80019c2:	4b89      	ldr	r3, [pc, #548]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d06c      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x12c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d168      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x12c>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e246      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e2:	d106      	bne.n	80019f2 <HAL_RCC_OscConfig+0x76>
 80019e4:	4b80      	ldr	r3, [pc, #512]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a7f      	ldr	r2, [pc, #508]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	e02e      	b.n	8001a50 <HAL_RCC_OscConfig+0xd4>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x98>
 80019fa:	4b7b      	ldr	r3, [pc, #492]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a7a      	ldr	r2, [pc, #488]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	4b78      	ldr	r3, [pc, #480]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a77      	ldr	r2, [pc, #476]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e01d      	b.n	8001a50 <HAL_RCC_OscConfig+0xd4>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0xbc>
 8001a1e:	4b72      	ldr	r3, [pc, #456]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a71      	ldr	r2, [pc, #452]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b6f      	ldr	r3, [pc, #444]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a6e      	ldr	r2, [pc, #440]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e00b      	b.n	8001a50 <HAL_RCC_OscConfig+0xd4>
 8001a38:	4b6b      	ldr	r3, [pc, #428]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a6a      	ldr	r2, [pc, #424]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	4b68      	ldr	r3, [pc, #416]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a67      	ldr	r2, [pc, #412]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d013      	beq.n	8001a80 <HAL_RCC_OscConfig+0x104>
 8001a58:	f7ff fcb6 	bl	80013c8 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0xf6>
 8001a60:	f7ff fcb2 	bl	80013c8 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	; 0x64
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0xf6>
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e1fa      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 8001a72:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0xe4>
 8001a7e:	e014      	b.n	8001aaa <HAL_RCC_OscConfig+0x12e>
 8001a80:	f7ff fca2 	bl	80013c8 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x11e>
 8001a88:	f7ff fc9e 	bl	80013c8 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x11e>
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1e6      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 8001a9a:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x10c>
 8001aa6:	e000      	b.n	8001aaa <HAL_RCC_OscConfig+0x12e>
 8001aa8:	bf00      	nop
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d063      	beq.n	8001b7e <HAL_RCC_OscConfig+0x202>
 8001ab6:	4b4c      	ldr	r3, [pc, #304]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00b      	beq.n	8001ada <HAL_RCC_OscConfig+0x15e>
 8001ac2:	4b49      	ldr	r3, [pc, #292]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d11c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x18c>
 8001ace:	4b46      	ldr	r3, [pc, #280]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d116      	bne.n	8001b08 <HAL_RCC_OscConfig+0x18c>
 8001ada:	4b43      	ldr	r3, [pc, #268]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <HAL_RCC_OscConfig+0x176>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x176>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e1ba      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4939      	ldr	r1, [pc, #228]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]
 8001b06:	e03a      	b.n	8001b7e <HAL_RCC_OscConfig+0x202>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1d6>
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	f7ff fc57 	bl	80013c8 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x1b4>
 8001b1e:	f7ff fc53 	bl	80013c8 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x1b4>
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e19b      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 8001b30:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1a2>
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4927      	ldr	r1, [pc, #156]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
 8001b50:	e015      	b.n	8001b7e <HAL_RCC_OscConfig+0x202>
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	f7ff fc36 	bl	80013c8 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x1f6>
 8001b60:	f7ff fc32 	bl	80013c8 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x1f6>
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e17a      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 8001b72:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x1e4>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d03a      	beq.n	8001c00 <HAL_RCC_OscConfig+0x284>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d019      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x24a>
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <HAL_RCC_OscConfig+0x274>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	f7ff fc16 	bl	80013c8 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x236>
 8001ba0:	f7ff fc12 	bl	80013c8 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x236>
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e15a      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x224>
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f000 fa9a 	bl	80020f8 <RCC_Delay>
 8001bc4:	e01c      	b.n	8001c00 <HAL_RCC_OscConfig+0x284>
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	f7ff fbfc 	bl	80013c8 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]
 8001bd2:	e00f      	b.n	8001bf4 <HAL_RCC_OscConfig+0x278>
 8001bd4:	f7ff fbf8 	bl	80013c8 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d908      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x278>
 8001be2:	2303      	movs	r3, #3
 8001be4:	e140      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	42420000 	.word	0x42420000
 8001bf0:	42420480 	.word	0x42420480
 8001bf4:	4b9e      	ldr	r3, [pc, #632]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1e9      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x258>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80a6 	beq.w	8001d5a <HAL_RCC_OscConfig+0x3de>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	75fb      	strb	r3, [r7, #23]
 8001c12:	4b97      	ldr	r3, [pc, #604]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10d      	bne.n	8001c3a <HAL_RCC_OscConfig+0x2be>
 8001c1e:	4b94      	ldr	r3, [pc, #592]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4a93      	ldr	r2, [pc, #588]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c28:	61d3      	str	r3, [r2, #28]
 8001c2a:	4b91      	ldr	r3, [pc, #580]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2301      	movs	r3, #1
 8001c38:	75fb      	strb	r3, [r7, #23]
 8001c3a:	4b8e      	ldr	r3, [pc, #568]	; (8001e74 <HAL_RCC_OscConfig+0x4f8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d118      	bne.n	8001c78 <HAL_RCC_OscConfig+0x2fc>
 8001c46:	4b8b      	ldr	r3, [pc, #556]	; (8001e74 <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a8a      	ldr	r2, [pc, #552]	; (8001e74 <HAL_RCC_OscConfig+0x4f8>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	f7ff fbb9 	bl	80013c8 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x2f0>
 8001c5a:	f7ff fbb5 	bl	80013c8 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b64      	cmp	r3, #100	; 0x64
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x2f0>
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e0fd      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 8001c6c:	4b81      	ldr	r3, [pc, #516]	; (8001e74 <HAL_RCC_OscConfig+0x4f8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x2de>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_OscConfig+0x312>
 8001c80:	4b7b      	ldr	r3, [pc, #492]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4a7a      	ldr	r2, [pc, #488]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6213      	str	r3, [r2, #32]
 8001c8c:	e02d      	b.n	8001cea <HAL_RCC_OscConfig+0x36e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x334>
 8001c96:	4b76      	ldr	r3, [pc, #472]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	4a75      	ldr	r2, [pc, #468]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	6213      	str	r3, [r2, #32]
 8001ca2:	4b73      	ldr	r3, [pc, #460]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4a72      	ldr	r2, [pc, #456]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	f023 0304 	bic.w	r3, r3, #4
 8001cac:	6213      	str	r3, [r2, #32]
 8001cae:	e01c      	b.n	8001cea <HAL_RCC_OscConfig+0x36e>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	2b05      	cmp	r3, #5
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x356>
 8001cb8:	4b6d      	ldr	r3, [pc, #436]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	4a6c      	ldr	r2, [pc, #432]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6213      	str	r3, [r2, #32]
 8001cc4:	4b6a      	ldr	r3, [pc, #424]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4a69      	ldr	r2, [pc, #420]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6213      	str	r3, [r2, #32]
 8001cd0:	e00b      	b.n	8001cea <HAL_RCC_OscConfig+0x36e>
 8001cd2:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4a66      	ldr	r2, [pc, #408]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	6213      	str	r3, [r2, #32]
 8001cde:	4b64      	ldr	r3, [pc, #400]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a63      	ldr	r2, [pc, #396]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	f023 0304 	bic.w	r3, r3, #4
 8001ce8:	6213      	str	r3, [r2, #32]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d015      	beq.n	8001d1e <HAL_RCC_OscConfig+0x3a2>
 8001cf2:	f7ff fb69 	bl	80013c8 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x394>
 8001cfa:	f7ff fb65 	bl	80013c8 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x394>
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e0ab      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 8001d10:	4b57      	ldr	r3, [pc, #348]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ee      	beq.n	8001cfa <HAL_RCC_OscConfig+0x37e>
 8001d1c:	e014      	b.n	8001d48 <HAL_RCC_OscConfig+0x3cc>
 8001d1e:	f7ff fb53 	bl	80013c8 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_OscConfig+0x3c0>
 8001d26:	f7ff fb4f 	bl	80013c8 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x3c0>
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e095      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 8001d3c:	4b4c      	ldr	r3, [pc, #304]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1ee      	bne.n	8001d26 <HAL_RCC_OscConfig+0x3aa>
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d105      	bne.n	8001d5a <HAL_RCC_OscConfig+0x3de>
 8001d4e:	4b48      	ldr	r3, [pc, #288]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	4a47      	ldr	r2, [pc, #284]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d58:	61d3      	str	r3, [r2, #28]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8081 	beq.w	8001e66 <HAL_RCC_OscConfig+0x4ea>
 8001d64:	4b42      	ldr	r3, [pc, #264]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d061      	beq.n	8001e34 <HAL_RCC_OscConfig+0x4b8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d146      	bne.n	8001e06 <HAL_RCC_OscConfig+0x48a>
 8001d78:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <HAL_RCC_OscConfig+0x4fc>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	f7ff fb23 	bl	80013c8 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x41c>
 8001d86:	f7ff fb1f 	bl	80013c8 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x41c>
 8001d94:	2303      	movs	r3, #3
 8001d96:	e067      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 8001d98:	4b35      	ldr	r3, [pc, #212]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f0      	bne.n	8001d86 <HAL_RCC_OscConfig+0x40a>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dac:	d108      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x444>
 8001dae:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	492d      	ldr	r1, [pc, #180]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a19      	ldr	r1, [r3, #32]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	4927      	ldr	r1, [pc, #156]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
 8001dd8:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_RCC_OscConfig+0x4fc>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	f7ff faf3 	bl	80013c8 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x47c>
 8001de6:	f7ff faef 	bl	80013c8 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x47c>
 8001df4:	2303      	movs	r3, #3
 8001df6:	e037      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 8001df8:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x46a>
 8001e04:	e02f      	b.n	8001e66 <HAL_RCC_OscConfig+0x4ea>
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <HAL_RCC_OscConfig+0x4fc>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	f7ff fadc 	bl	80013c8 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x4aa>
 8001e14:	f7ff fad8 	bl	80013c8 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x4aa>
 8001e22:	2303      	movs	r3, #3
 8001e24:	e020      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 8001e26:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x498>
 8001e32:	e018      	b.n	8001e66 <HAL_RCC_OscConfig+0x4ea>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_OscConfig+0x4c4>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e013      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x4e6>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_OscConfig+0x4ea>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 8001e66:	2300      	movs	r3, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40007000 	.word	0x40007000
 8001e78:	42420060 	.word	0x42420060

08001e7c <HAL_RCC_ClockConfig>:
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x14>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0d0      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
 8001e90:	4b6a      	ldr	r3, [pc, #424]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d910      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x44>
 8001e9e:	4b67      	ldr	r3, [pc, #412]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 0207 	bic.w	r2, r3, #7
 8001ea6:	4965      	ldr	r1, [pc, #404]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
 8001eae:	4b63      	ldr	r3, [pc, #396]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x44>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0b8      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d020      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x92>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x68>
 8001ed8:	4b59      	ldr	r3, [pc, #356]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4a58      	ldr	r2, [pc, #352]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ee2:	6053      	str	r3, [r2, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_ClockConfig+0x80>
 8001ef0:	4b53      	ldr	r3, [pc, #332]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a52      	ldr	r2, [pc, #328]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001efa:	6053      	str	r3, [r2, #4]
 8001efc:	4b50      	ldr	r3, [pc, #320]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	494d      	ldr	r1, [pc, #308]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d040      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x120>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xb6>
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d115      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e07f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xce>
 8001f3a:	4b41      	ldr	r3, [pc, #260]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e073      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e06b      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
 8001f5a:	4b39      	ldr	r3, [pc, #228]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f023 0203 	bic.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4936      	ldr	r1, [pc, #216]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
 8001f6c:	f7ff fa2c 	bl	80013c8 <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
 8001f74:	f7ff fa28 	bl	80013c8 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
 8001f86:	2303      	movs	r3, #3
 8001f88:	e053      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 020c 	and.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1eb      	bne.n	8001f74 <HAL_RCC_ClockConfig+0xf8>
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d210      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x150>
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 0207 	bic.w	r2, r3, #7
 8001fb2:	4922      	ldr	r1, [pc, #136]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x150>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e032      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_RCC_ClockConfig+0x16e>
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4916      	ldr	r1, [pc, #88]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_RCC_ClockConfig+0x18e>
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	490e      	ldr	r1, [pc, #56]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
 800200a:	f000 f821 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 800200e:	4602      	mov	r2, r0
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	490a      	ldr	r1, [pc, #40]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 800201c:	5ccb      	ldrb	r3, [r1, r3]
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <HAL_RCC_ClockConfig+0x1cc>)
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_ClockConfig+0x1d0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff f98a 	bl	8001344 <HAL_InitTick>
 8002030:	2300      	movs	r3, #0
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40022000 	.word	0x40022000
 8002040:	40021000 	.word	0x40021000
 8002044:	08002b28 	.word	0x08002b28
 8002048:	20000060 	.word	0x20000060
 800204c:	20000064 	.word	0x20000064

08002050 <HAL_RCC_GetSysClockFreq>:
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b04      	cmp	r3, #4
 8002078:	d002      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x30>
 800207a:	2b08      	cmp	r3, #8
 800207c:	d003      	beq.n	8002086 <HAL_RCC_GetSysClockFreq+0x36>
 800207e:	e027      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x80>
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	e027      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x86>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	0c9b      	lsrs	r3, r3, #18
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	4a17      	ldr	r2, [pc, #92]	; (80020ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002090:	5cd3      	ldrb	r3, [r2, r3]
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d010      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x70>
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	0c5b      	lsrs	r3, r3, #17
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	4a11      	ldr	r2, [pc, #68]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020aa:	5cd3      	ldrb	r3, [r2, r3]
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020b2:	fb02 f203 	mul.w	r2, r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e004      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0x7a>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	e002      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x86>
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	bf00      	nop
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4618      	mov	r0, r3
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	007a1200 	.word	0x007a1200
 80020ec:	08002b38 	.word	0x08002b38
 80020f0:	08002b48 	.word	0x08002b48
 80020f4:	003d0900 	.word	0x003d0900

080020f8 <RCC_Delay>:
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <RCC_Delay+0x34>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <RCC_Delay+0x38>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0a5b      	lsrs	r3, r3, #9
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	bf00      	nop
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1e5a      	subs	r2, r3, #1
 800211a:	60fa      	str	r2, [r7, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f9      	bne.n	8002114 <RCC_Delay+0x1c>
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	20000060 	.word	0x20000060
 8002130:	10624dd3 	.word	0x10624dd3

08002134 <HAL_TIM_Base_Init>:
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_TIM_Base_Init+0x12>
 8002142:	2301      	movs	r3, #1
 8002144:	e041      	b.n	80021ca <HAL_TIM_Base_Init+0x96>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_TIM_Base_Init+0x2c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff f824 	bl	80011a8 <HAL_TIM_Base_MspInit>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3304      	adds	r3, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f000 fa6e 	bl	8002654 <TIM_Base_SetConfig>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80021c8:	2300      	movs	r3, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <HAL_TIM_Base_Start_IT>:
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d001      	beq.n	80021ec <HAL_TIM_Base_Start_IT+0x18>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e035      	b.n	8002258 <HAL_TIM_Base_Start_IT+0x84>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	60da      	str	r2, [r3, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a16      	ldr	r2, [pc, #88]	; (8002264 <HAL_TIM_Base_Start_IT+0x90>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_TIM_Base_Start_IT+0x4e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002216:	d004      	beq.n	8002222 <HAL_TIM_Base_Start_IT+0x4e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a12      	ldr	r2, [pc, #72]	; (8002268 <HAL_TIM_Base_Start_IT+0x94>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d111      	bne.n	8002246 <HAL_TIM_Base_Start_IT+0x72>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b06      	cmp	r3, #6
 8002232:	d010      	beq.n	8002256 <HAL_TIM_Base_Start_IT+0x82>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e007      	b.n	8002256 <HAL_TIM_Base_Start_IT+0x82>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	2300      	movs	r3, #0
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40012c00 	.word	0x40012c00
 8002268:	40000400 	.word	0x40000400

0800226c <HAL_TIM_IRQHandler>:
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b02      	cmp	r3, #2
 8002280:	d122      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x5c>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b02      	cmp	r3, #2
 800228e:	d11b      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x5c>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0202 	mvn.w	r2, #2
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	771a      	strb	r2, [r3, #28]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_TIM_IRQHandler+0x4a>
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f9b4 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 80022b4:	e005      	b.n	80022c2 <HAL_TIM_IRQHandler+0x56>
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f9a7 	bl	800260a <HAL_TIM_OC_DelayElapsedCallback>
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f9b6 	bl	800262e <HAL_TIM_PWM_PulseFinishedCallback>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d122      	bne.n	800231c <HAL_TIM_IRQHandler+0xb0>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d11b      	bne.n	800231c <HAL_TIM_IRQHandler+0xb0>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0204 	mvn.w	r2, #4
 80022ec:	611a      	str	r2, [r3, #16]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2202      	movs	r2, #2
 80022f2:	771a      	strb	r2, [r3, #28]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_TIM_IRQHandler+0x9e>
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f98a 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 8002308:	e005      	b.n	8002316 <HAL_TIM_IRQHandler+0xaa>
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f97d 	bl	800260a <HAL_TIM_OC_DelayElapsedCallback>
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f98c 	bl	800262e <HAL_TIM_PWM_PulseFinishedCallback>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b08      	cmp	r3, #8
 8002328:	d122      	bne.n	8002370 <HAL_TIM_IRQHandler+0x104>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b08      	cmp	r3, #8
 8002336:	d11b      	bne.n	8002370 <HAL_TIM_IRQHandler+0x104>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0208 	mvn.w	r2, #8
 8002340:	611a      	str	r2, [r3, #16]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2204      	movs	r2, #4
 8002346:	771a      	strb	r2, [r3, #28]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_TIM_IRQHandler+0xf2>
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f960 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 800235c:	e005      	b.n	800236a <HAL_TIM_IRQHandler+0xfe>
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f953 	bl	800260a <HAL_TIM_OC_DelayElapsedCallback>
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f962 	bl	800262e <HAL_TIM_PWM_PulseFinishedCallback>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	771a      	strb	r2, [r3, #28]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b10      	cmp	r3, #16
 800237c:	d122      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x158>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b10      	cmp	r3, #16
 800238a:	d11b      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x158>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0210 	mvn.w	r2, #16
 8002394:	611a      	str	r2, [r3, #16]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2208      	movs	r2, #8
 800239a:	771a      	strb	r2, [r3, #28]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_TIM_IRQHandler+0x146>
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f936 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 80023b0:	e005      	b.n	80023be <HAL_TIM_IRQHandler+0x152>
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f929 	bl	800260a <HAL_TIM_OC_DelayElapsedCallback>
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f938 	bl	800262e <HAL_TIM_PWM_PulseFinishedCallback>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	771a      	strb	r2, [r3, #28]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d10e      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x184>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d107      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x184>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0201 	mvn.w	r2, #1
 80023e8:	611a      	str	r2, [r3, #16]
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe fd40 	bl	8000e70 <HAL_TIM_PeriodElapsedCallback>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fa:	2b80      	cmp	r3, #128	; 0x80
 80023fc:	d10e      	bne.n	800241c <HAL_TIM_IRQHandler+0x1b0>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002408:	2b80      	cmp	r3, #128	; 0x80
 800240a:	d107      	bne.n	800241c <HAL_TIM_IRQHandler+0x1b0>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002414:	611a      	str	r2, [r3, #16]
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fa6b 	bl	80028f2 <HAL_TIMEx_BreakCallback>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002426:	2b40      	cmp	r3, #64	; 0x40
 8002428:	d10e      	bne.n	8002448 <HAL_TIM_IRQHandler+0x1dc>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002434:	2b40      	cmp	r3, #64	; 0x40
 8002436:	d107      	bne.n	8002448 <HAL_TIM_IRQHandler+0x1dc>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002440:	611a      	str	r2, [r3, #16]
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f8fc 	bl	8002640 <HAL_TIM_TriggerCallback>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b20      	cmp	r3, #32
 8002454:	d10e      	bne.n	8002474 <HAL_TIM_IRQHandler+0x208>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b20      	cmp	r3, #32
 8002462:	d107      	bne.n	8002474 <HAL_TIM_IRQHandler+0x208>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0220 	mvn.w	r2, #32
 800246c:	611a      	str	r2, [r3, #16]
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fa36 	bl	80028e0 <HAL_TIMEx_CommutCallback>
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_TIM_ConfigClockSource>:
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_TIM_ConfigClockSource+0x1c>
 8002494:	2302      	movs	r3, #2
 8002496:	e0b4      	b.n	8002602 <HAL_TIM_ConfigClockSource+0x186>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d0:	d03e      	beq.n	8002550 <HAL_TIM_ConfigClockSource+0xd4>
 80024d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d6:	f200 8087 	bhi.w	80025e8 <HAL_TIM_ConfigClockSource+0x16c>
 80024da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024de:	f000 8086 	beq.w	80025ee <HAL_TIM_ConfigClockSource+0x172>
 80024e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e6:	d87f      	bhi.n	80025e8 <HAL_TIM_ConfigClockSource+0x16c>
 80024e8:	2b70      	cmp	r3, #112	; 0x70
 80024ea:	d01a      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0xa6>
 80024ec:	2b70      	cmp	r3, #112	; 0x70
 80024ee:	d87b      	bhi.n	80025e8 <HAL_TIM_ConfigClockSource+0x16c>
 80024f0:	2b60      	cmp	r3, #96	; 0x60
 80024f2:	d050      	beq.n	8002596 <HAL_TIM_ConfigClockSource+0x11a>
 80024f4:	2b60      	cmp	r3, #96	; 0x60
 80024f6:	d877      	bhi.n	80025e8 <HAL_TIM_ConfigClockSource+0x16c>
 80024f8:	2b50      	cmp	r3, #80	; 0x50
 80024fa:	d03c      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0xfa>
 80024fc:	2b50      	cmp	r3, #80	; 0x50
 80024fe:	d873      	bhi.n	80025e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d058      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002504:	2b40      	cmp	r3, #64	; 0x40
 8002506:	d86f      	bhi.n	80025e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002508:	2b30      	cmp	r3, #48	; 0x30
 800250a:	d064      	beq.n	80025d6 <HAL_TIM_ConfigClockSource+0x15a>
 800250c:	2b30      	cmp	r3, #48	; 0x30
 800250e:	d86b      	bhi.n	80025e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002510:	2b20      	cmp	r3, #32
 8002512:	d060      	beq.n	80025d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002514:	2b20      	cmp	r3, #32
 8002516:	d867      	bhi.n	80025e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002518:	2b00      	cmp	r3, #0
 800251a:	d05c      	beq.n	80025d6 <HAL_TIM_ConfigClockSource+0x15a>
 800251c:	2b10      	cmp	r3, #16
 800251e:	d05a      	beq.n	80025d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002520:	e062      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f000 f95e 	bl	80027f2 <TIM_ETR_SetConfig>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	609a      	str	r2, [r3, #8]
 800254e:	e04f      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x174>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	6899      	ldr	r1, [r3, #8]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f000 f947 	bl	80027f2 <TIM_ETR_SetConfig>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	e03c      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x174>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6859      	ldr	r1, [r3, #4]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	461a      	mov	r2, r3
 8002584:	f000 f8be 	bl	8002704 <TIM_TI1_ConfigInputStage>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2150      	movs	r1, #80	; 0x50
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f915 	bl	80027be <TIM_ITRx_SetConfig>
 8002594:	e02c      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x174>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	6859      	ldr	r1, [r3, #4]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	461a      	mov	r2, r3
 80025a4:	f000 f8dc 	bl	8002760 <TIM_TI2_ConfigInputStage>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2160      	movs	r1, #96	; 0x60
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 f905 	bl	80027be <TIM_ITRx_SetConfig>
 80025b4:	e01c      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x174>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6859      	ldr	r1, [r3, #4]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	461a      	mov	r2, r3
 80025c4:	f000 f89e 	bl	8002704 <TIM_TI1_ConfigInputStage>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2140      	movs	r1, #64	; 0x40
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f8f5 	bl	80027be <TIM_ITRx_SetConfig>
 80025d4:	e00c      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x174>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4619      	mov	r1, r3
 80025e0:	4610      	mov	r0, r2
 80025e2:	f000 f8ec 	bl	80027be <TIM_ITRx_SetConfig>
 80025e6:	e003      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x174>
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	e000      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x174>
 80025ee:	bf00      	nop
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_TIM_OC_DelayElapsedCallback>:
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_TIM_IC_CaptureCallback>:
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <HAL_TIM_PWM_PulseFinishedCallback>:
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <HAL_TIM_TriggerCallback>:
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr
	...

08002654 <TIM_Base_SetConfig>:
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a25      	ldr	r2, [pc, #148]	; (80026fc <TIM_Base_SetConfig+0xa8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d007      	beq.n	800267c <TIM_Base_SetConfig+0x28>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002672:	d003      	beq.n	800267c <TIM_Base_SetConfig+0x28>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a22      	ldr	r2, [pc, #136]	; (8002700 <TIM_Base_SetConfig+0xac>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d108      	bne.n	800268e <TIM_Base_SetConfig+0x3a>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a1a      	ldr	r2, [pc, #104]	; (80026fc <TIM_Base_SetConfig+0xa8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d007      	beq.n	80026a6 <TIM_Base_SetConfig+0x52>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269c:	d003      	beq.n	80026a6 <TIM_Base_SetConfig+0x52>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a17      	ldr	r2, [pc, #92]	; (8002700 <TIM_Base_SetConfig+0xac>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d108      	bne.n	80026b8 <TIM_Base_SetConfig+0x64>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	629a      	str	r2, [r3, #40]	; 0x28
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a07      	ldr	r2, [pc, #28]	; (80026fc <TIM_Base_SetConfig+0xa8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d103      	bne.n	80026ec <TIM_Base_SetConfig+0x98>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	615a      	str	r2, [r3, #20]
 80026f2:	bf00      	nop
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	40012c00 	.word	0x40012c00
 8002700:	40000400 	.word	0x40000400

08002704 <TIM_TI1_ConfigInputStage>:
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	f023 0201 	bic.w	r2, r3, #1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	621a      	str	r2, [r3, #32]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f023 030a 	bic.w	r3, r3, #10
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	619a      	str	r2, [r3, #24]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	621a      	str	r2, [r3, #32]
 8002756:	bf00      	nop
 8002758:	371c      	adds	r7, #28
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <TIM_TI2_ConfigInputStage>:
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	f023 0210 	bic.w	r2, r3, #16
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	621a      	str	r2, [r3, #32]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	031b      	lsls	r3, r3, #12
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	619a      	str	r2, [r3, #24]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	621a      	str	r2, [r3, #32]
 80027b4:	bf00      	nop
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <TIM_ITRx_SetConfig>:
 80027be:	b480      	push	{r7}
 80027c0:	b085      	sub	sp, #20
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	f043 0307 	orr.w	r3, r3, #7
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <TIM_ETR_SetConfig>:
 80027f2:	b480      	push	{r7}
 80027f4:	b087      	sub	sp, #28
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	021a      	lsls	r2, r3, #8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	431a      	orrs	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	4313      	orrs	r3, r2
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	bf00      	nop
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <HAL_TIMEx_MasterConfigSynchronization>:
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002844:	2302      	movs	r3, #2
 8002846:	e041      	b.n	80028cc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d009      	beq.n	80028a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002894:	d004      	beq.n	80028a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a10      	ldr	r2, [pc, #64]	; (80028dc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d10c      	bne.n	80028ba <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028ca:	2300      	movs	r3, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40000400 	.word	0x40000400

080028e0 <HAL_TIMEx_CommutCallback>:
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <HAL_TIMEx_BreakCallback>:
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <__errno>:
 8002904:	4b01      	ldr	r3, [pc, #4]	; (800290c <__errno+0x8>)
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	2000006c 	.word	0x2000006c

08002910 <__libc_init_array>:
 8002910:	b570      	push	{r4, r5, r6, lr}
 8002912:	2600      	movs	r6, #0
 8002914:	4d0c      	ldr	r5, [pc, #48]	; (8002948 <__libc_init_array+0x38>)
 8002916:	4c0d      	ldr	r4, [pc, #52]	; (800294c <__libc_init_array+0x3c>)
 8002918:	1b64      	subs	r4, r4, r5
 800291a:	10a4      	asrs	r4, r4, #2
 800291c:	42a6      	cmp	r6, r4
 800291e:	d109      	bne.n	8002934 <__libc_init_array+0x24>
 8002920:	f000 f8f6 	bl	8002b10 <_init>
 8002924:	2600      	movs	r6, #0
 8002926:	4d0a      	ldr	r5, [pc, #40]	; (8002950 <__libc_init_array+0x40>)
 8002928:	4c0a      	ldr	r4, [pc, #40]	; (8002954 <__libc_init_array+0x44>)
 800292a:	1b64      	subs	r4, r4, r5
 800292c:	10a4      	asrs	r4, r4, #2
 800292e:	42a6      	cmp	r6, r4
 8002930:	d105      	bne.n	800293e <__libc_init_array+0x2e>
 8002932:	bd70      	pop	{r4, r5, r6, pc}
 8002934:	f855 3b04 	ldr.w	r3, [r5], #4
 8002938:	4798      	blx	r3
 800293a:	3601      	adds	r6, #1
 800293c:	e7ee      	b.n	800291c <__libc_init_array+0xc>
 800293e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002942:	4798      	blx	r3
 8002944:	3601      	adds	r6, #1
 8002946:	e7f2      	b.n	800292e <__libc_init_array+0x1e>
 8002948:	08002b4c 	.word	0x08002b4c
 800294c:	08002b4c 	.word	0x08002b4c
 8002950:	08002b4c 	.word	0x08002b4c
 8002954:	08002b50 	.word	0x08002b50

08002958 <malloc>:
 8002958:	4b02      	ldr	r3, [pc, #8]	; (8002964 <malloc+0xc>)
 800295a:	4601      	mov	r1, r0
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	f000 b85f 	b.w	8002a20 <_malloc_r>
 8002962:	bf00      	nop
 8002964:	2000006c 	.word	0x2000006c

08002968 <free>:
 8002968:	4b02      	ldr	r3, [pc, #8]	; (8002974 <free+0xc>)
 800296a:	4601      	mov	r1, r0
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	f000 b80b 	b.w	8002988 <_free_r>
 8002972:	bf00      	nop
 8002974:	2000006c 	.word	0x2000006c

08002978 <memset>:
 8002978:	4603      	mov	r3, r0
 800297a:	4402      	add	r2, r0
 800297c:	4293      	cmp	r3, r2
 800297e:	d100      	bne.n	8002982 <memset+0xa>
 8002980:	4770      	bx	lr
 8002982:	f803 1b01 	strb.w	r1, [r3], #1
 8002986:	e7f9      	b.n	800297c <memset+0x4>

08002988 <_free_r>:
 8002988:	b538      	push	{r3, r4, r5, lr}
 800298a:	4605      	mov	r5, r0
 800298c:	2900      	cmp	r1, #0
 800298e:	d043      	beq.n	8002a18 <_free_r+0x90>
 8002990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002994:	1f0c      	subs	r4, r1, #4
 8002996:	2b00      	cmp	r3, #0
 8002998:	bfb8      	it	lt
 800299a:	18e4      	addlt	r4, r4, r3
 800299c:	f000 f8aa 	bl	8002af4 <__malloc_lock>
 80029a0:	4a1e      	ldr	r2, [pc, #120]	; (8002a1c <_free_r+0x94>)
 80029a2:	6813      	ldr	r3, [r2, #0]
 80029a4:	4610      	mov	r0, r2
 80029a6:	b933      	cbnz	r3, 80029b6 <_free_r+0x2e>
 80029a8:	6063      	str	r3, [r4, #4]
 80029aa:	6014      	str	r4, [r2, #0]
 80029ac:	4628      	mov	r0, r5
 80029ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029b2:	f000 b8a5 	b.w	8002b00 <__malloc_unlock>
 80029b6:	42a3      	cmp	r3, r4
 80029b8:	d90a      	bls.n	80029d0 <_free_r+0x48>
 80029ba:	6821      	ldr	r1, [r4, #0]
 80029bc:	1862      	adds	r2, r4, r1
 80029be:	4293      	cmp	r3, r2
 80029c0:	bf01      	itttt	eq
 80029c2:	681a      	ldreq	r2, [r3, #0]
 80029c4:	685b      	ldreq	r3, [r3, #4]
 80029c6:	1852      	addeq	r2, r2, r1
 80029c8:	6022      	streq	r2, [r4, #0]
 80029ca:	6063      	str	r3, [r4, #4]
 80029cc:	6004      	str	r4, [r0, #0]
 80029ce:	e7ed      	b.n	80029ac <_free_r+0x24>
 80029d0:	461a      	mov	r2, r3
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	b10b      	cbz	r3, 80029da <_free_r+0x52>
 80029d6:	42a3      	cmp	r3, r4
 80029d8:	d9fa      	bls.n	80029d0 <_free_r+0x48>
 80029da:	6811      	ldr	r1, [r2, #0]
 80029dc:	1850      	adds	r0, r2, r1
 80029de:	42a0      	cmp	r0, r4
 80029e0:	d10b      	bne.n	80029fa <_free_r+0x72>
 80029e2:	6820      	ldr	r0, [r4, #0]
 80029e4:	4401      	add	r1, r0
 80029e6:	1850      	adds	r0, r2, r1
 80029e8:	4283      	cmp	r3, r0
 80029ea:	6011      	str	r1, [r2, #0]
 80029ec:	d1de      	bne.n	80029ac <_free_r+0x24>
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4401      	add	r1, r0
 80029f4:	6011      	str	r1, [r2, #0]
 80029f6:	6053      	str	r3, [r2, #4]
 80029f8:	e7d8      	b.n	80029ac <_free_r+0x24>
 80029fa:	d902      	bls.n	8002a02 <_free_r+0x7a>
 80029fc:	230c      	movs	r3, #12
 80029fe:	602b      	str	r3, [r5, #0]
 8002a00:	e7d4      	b.n	80029ac <_free_r+0x24>
 8002a02:	6820      	ldr	r0, [r4, #0]
 8002a04:	1821      	adds	r1, r4, r0
 8002a06:	428b      	cmp	r3, r1
 8002a08:	bf01      	itttt	eq
 8002a0a:	6819      	ldreq	r1, [r3, #0]
 8002a0c:	685b      	ldreq	r3, [r3, #4]
 8002a0e:	1809      	addeq	r1, r1, r0
 8002a10:	6021      	streq	r1, [r4, #0]
 8002a12:	6063      	str	r3, [r4, #4]
 8002a14:	6054      	str	r4, [r2, #4]
 8002a16:	e7c9      	b.n	80029ac <_free_r+0x24>
 8002a18:	bd38      	pop	{r3, r4, r5, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000128 	.word	0x20000128

08002a20 <_malloc_r>:
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a22:	1ccd      	adds	r5, r1, #3
 8002a24:	f025 0503 	bic.w	r5, r5, #3
 8002a28:	3508      	adds	r5, #8
 8002a2a:	2d0c      	cmp	r5, #12
 8002a2c:	bf38      	it	cc
 8002a2e:	250c      	movcc	r5, #12
 8002a30:	2d00      	cmp	r5, #0
 8002a32:	4606      	mov	r6, r0
 8002a34:	db01      	blt.n	8002a3a <_malloc_r+0x1a>
 8002a36:	42a9      	cmp	r1, r5
 8002a38:	d903      	bls.n	8002a42 <_malloc_r+0x22>
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	6033      	str	r3, [r6, #0]
 8002a3e:	2000      	movs	r0, #0
 8002a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a42:	f000 f857 	bl	8002af4 <__malloc_lock>
 8002a46:	4921      	ldr	r1, [pc, #132]	; (8002acc <_malloc_r+0xac>)
 8002a48:	680a      	ldr	r2, [r1, #0]
 8002a4a:	4614      	mov	r4, r2
 8002a4c:	b99c      	cbnz	r4, 8002a76 <_malloc_r+0x56>
 8002a4e:	4f20      	ldr	r7, [pc, #128]	; (8002ad0 <_malloc_r+0xb0>)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	b923      	cbnz	r3, 8002a5e <_malloc_r+0x3e>
 8002a54:	4621      	mov	r1, r4
 8002a56:	4630      	mov	r0, r6
 8002a58:	f000 f83c 	bl	8002ad4 <_sbrk_r>
 8002a5c:	6038      	str	r0, [r7, #0]
 8002a5e:	4629      	mov	r1, r5
 8002a60:	4630      	mov	r0, r6
 8002a62:	f000 f837 	bl	8002ad4 <_sbrk_r>
 8002a66:	1c43      	adds	r3, r0, #1
 8002a68:	d123      	bne.n	8002ab2 <_malloc_r+0x92>
 8002a6a:	230c      	movs	r3, #12
 8002a6c:	4630      	mov	r0, r6
 8002a6e:	6033      	str	r3, [r6, #0]
 8002a70:	f000 f846 	bl	8002b00 <__malloc_unlock>
 8002a74:	e7e3      	b.n	8002a3e <_malloc_r+0x1e>
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	1b5b      	subs	r3, r3, r5
 8002a7a:	d417      	bmi.n	8002aac <_malloc_r+0x8c>
 8002a7c:	2b0b      	cmp	r3, #11
 8002a7e:	d903      	bls.n	8002a88 <_malloc_r+0x68>
 8002a80:	6023      	str	r3, [r4, #0]
 8002a82:	441c      	add	r4, r3
 8002a84:	6025      	str	r5, [r4, #0]
 8002a86:	e004      	b.n	8002a92 <_malloc_r+0x72>
 8002a88:	6863      	ldr	r3, [r4, #4]
 8002a8a:	42a2      	cmp	r2, r4
 8002a8c:	bf0c      	ite	eq
 8002a8e:	600b      	streq	r3, [r1, #0]
 8002a90:	6053      	strne	r3, [r2, #4]
 8002a92:	4630      	mov	r0, r6
 8002a94:	f000 f834 	bl	8002b00 <__malloc_unlock>
 8002a98:	f104 000b 	add.w	r0, r4, #11
 8002a9c:	1d23      	adds	r3, r4, #4
 8002a9e:	f020 0007 	bic.w	r0, r0, #7
 8002aa2:	1ac2      	subs	r2, r0, r3
 8002aa4:	d0cc      	beq.n	8002a40 <_malloc_r+0x20>
 8002aa6:	1a1b      	subs	r3, r3, r0
 8002aa8:	50a3      	str	r3, [r4, r2]
 8002aaa:	e7c9      	b.n	8002a40 <_malloc_r+0x20>
 8002aac:	4622      	mov	r2, r4
 8002aae:	6864      	ldr	r4, [r4, #4]
 8002ab0:	e7cc      	b.n	8002a4c <_malloc_r+0x2c>
 8002ab2:	1cc4      	adds	r4, r0, #3
 8002ab4:	f024 0403 	bic.w	r4, r4, #3
 8002ab8:	42a0      	cmp	r0, r4
 8002aba:	d0e3      	beq.n	8002a84 <_malloc_r+0x64>
 8002abc:	1a21      	subs	r1, r4, r0
 8002abe:	4630      	mov	r0, r6
 8002ac0:	f000 f808 	bl	8002ad4 <_sbrk_r>
 8002ac4:	3001      	adds	r0, #1
 8002ac6:	d1dd      	bne.n	8002a84 <_malloc_r+0x64>
 8002ac8:	e7cf      	b.n	8002a6a <_malloc_r+0x4a>
 8002aca:	bf00      	nop
 8002acc:	20000128 	.word	0x20000128
 8002ad0:	2000012c 	.word	0x2000012c

08002ad4 <_sbrk_r>:
 8002ad4:	b538      	push	{r3, r4, r5, lr}
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	4d05      	ldr	r5, [pc, #20]	; (8002af0 <_sbrk_r+0x1c>)
 8002ada:	4604      	mov	r4, r0
 8002adc:	4608      	mov	r0, r1
 8002ade:	602b      	str	r3, [r5, #0]
 8002ae0:	f7fe fbb8 	bl	8001254 <_sbrk>
 8002ae4:	1c43      	adds	r3, r0, #1
 8002ae6:	d102      	bne.n	8002aee <_sbrk_r+0x1a>
 8002ae8:	682b      	ldr	r3, [r5, #0]
 8002aea:	b103      	cbz	r3, 8002aee <_sbrk_r+0x1a>
 8002aec:	6023      	str	r3, [r4, #0]
 8002aee:	bd38      	pop	{r3, r4, r5, pc}
 8002af0:	20000180 	.word	0x20000180

08002af4 <__malloc_lock>:
 8002af4:	4801      	ldr	r0, [pc, #4]	; (8002afc <__malloc_lock+0x8>)
 8002af6:	f000 b809 	b.w	8002b0c <__retarget_lock_acquire_recursive>
 8002afa:	bf00      	nop
 8002afc:	20000188 	.word	0x20000188

08002b00 <__malloc_unlock>:
 8002b00:	4801      	ldr	r0, [pc, #4]	; (8002b08 <__malloc_unlock+0x8>)
 8002b02:	f000 b804 	b.w	8002b0e <__retarget_lock_release_recursive>
 8002b06:	bf00      	nop
 8002b08:	20000188 	.word	0x20000188

08002b0c <__retarget_lock_acquire_recursive>:
 8002b0c:	4770      	bx	lr

08002b0e <__retarget_lock_release_recursive>:
 8002b0e:	4770      	bx	lr

08002b10 <_init>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr

08002b1c <_fini>:
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1e:	bf00      	nop
 8002b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b22:	bc08      	pop	{r3}
 8002b24:	469e      	mov	lr, r3
 8002b26:	4770      	bx	lr
