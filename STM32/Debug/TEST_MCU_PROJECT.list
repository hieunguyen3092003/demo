
TEST_MCU_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002cdc  08002cdc  00012cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d00  08002d00  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08002d00  08002d00  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d00  08002d00  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d00  08002d00  00012d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d04  08002d04  00012d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08002d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  200000d0  08002dd8  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08002dd8  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec23  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002594  00000000  00000000  0002ed1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  000312b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  00031e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018660  00000000  00000000  00032818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9d6  00000000  00000000  0004ae78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d17  00000000  00000000  0005884e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000de565  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d80  00000000  00000000  000de5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d0 	.word	0x200000d0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cc4 	.word	0x08002cc4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d4 	.word	0x200000d4
 8000148:	08002cc4 	.word	0x08002cc4

0800014c <FSMLightModification>:
 */

#include "FSMLightModification.h"

void FSMLightModification()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status)
 8000150:	4b5d      	ldr	r3, [pc, #372]	; (80002c8 <FSMLightModification+0x17c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b2c      	cmp	r3, #44	; 0x2c
 8000156:	d035      	beq.n	80001c4 <FSMLightModification+0x78>
 8000158:	2b2c      	cmp	r3, #44	; 0x2c
 800015a:	f300 80ac 	bgt.w	80002b6 <FSMLightModification+0x16a>
 800015e:	2b2a      	cmp	r3, #42	; 0x2a
 8000160:	d002      	beq.n	8000168 <FSMLightModification+0x1c>
 8000162:	2b2b      	cmp	r3, #43	; 0x2b
 8000164:	d05b      	beq.n	800021e <FSMLightModification+0xd2>
				}
			}
		}
		break;
	default:
		break;
 8000166:	e0a6      	b.n	80002b6 <FSMLightModification+0x16a>
		if(timer4_flag == 1)
 8000168:	4b58      	ldr	r3, [pc, #352]	; (80002cc <FSMLightModification+0x180>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d104      	bne.n	800017a <FSMLightModification+0x2e>
			setTimer4(25);
 8000170:	2019      	movs	r0, #25
 8000172:	f001 f857 	bl	8001224 <setTimer4>
			toggleTrafficRed();
 8000176:	f000 fd57 	bl	8000c28 <toggleTrafficRed>
		if(isButton2Pressed() == 1)
 800017a:	f000 fb39 	bl	80007f0 <isButton2Pressed>
 800017e:	4603      	mov	r3, r0
 8000180:	2b01      	cmp	r3, #1
 8000182:	d10c      	bne.n	800019e <FSMLightModification+0x52>
			resetInitialState();
 8000184:	f000 fdf2 	bl	8000d6c <resetInitialState>
			red_time++;
 8000188:	4b51      	ldr	r3, [pc, #324]	; (80002d0 <FSMLightModification+0x184>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	3301      	adds	r3, #1
 800018e:	4a50      	ldr	r2, [pc, #320]	; (80002d0 <FSMLightModification+0x184>)
 8000190:	6013      	str	r3, [r2, #0]
			setLedBuffer(red_time, 1);
 8000192:	4b4f      	ldr	r3, [pc, #316]	; (80002d0 <FSMLightModification+0x184>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	2101      	movs	r1, #1
 8000198:	4618      	mov	r0, r3
 800019a:	f000 fd7f 	bl	8000c9c <setLedBuffer>
		if(isButton3Pressed() == 1)
 800019e:	f000 fb45 	bl	800082c <isButton3Pressed>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b01      	cmp	r3, #1
 80001a6:	f040 8088 	bne.w	80002ba <FSMLightModification+0x16e>
			resetInitialState();
 80001aa:	f000 fddf 	bl	8000d6c <resetInitialState>
			status = MODIFY_YELLOW;	//next mode
 80001ae:	4b46      	ldr	r3, [pc, #280]	; (80002c8 <FSMLightModification+0x17c>)
 80001b0:	2222      	movs	r2, #34	; 0x22
 80001b2:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 80001b4:	2019      	movs	r0, #25
 80001b6:	f001 f835 	bl	8001224 <setTimer4>
			setLedBuffer(0, 2);
 80001ba:	2102      	movs	r1, #2
 80001bc:	2000      	movs	r0, #0
 80001be:	f000 fd6d 	bl	8000c9c <setLedBuffer>
		break;
 80001c2:	e07a      	b.n	80002ba <FSMLightModification+0x16e>
		if(timer4_flag == 1)
 80001c4:	4b41      	ldr	r3, [pc, #260]	; (80002cc <FSMLightModification+0x180>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d104      	bne.n	80001d6 <FSMLightModification+0x8a>
			setTimer4(25);
 80001cc:	2019      	movs	r0, #25
 80001ce:	f001 f829 	bl	8001224 <setTimer4>
			toggleTrafficYellow();
 80001d2:	f000 fd3b 	bl	8000c4c <toggleTrafficYellow>
		if(isButton2Pressed() == 1)
 80001d6:	f000 fb0b 	bl	80007f0 <isButton2Pressed>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d10c      	bne.n	80001fa <FSMLightModification+0xae>
			resetInitialState();
 80001e0:	f000 fdc4 	bl	8000d6c <resetInitialState>
			yellow_time++;
 80001e4:	4b3b      	ldr	r3, [pc, #236]	; (80002d4 <FSMLightModification+0x188>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	3301      	adds	r3, #1
 80001ea:	4a3a      	ldr	r2, [pc, #232]	; (80002d4 <FSMLightModification+0x188>)
 80001ec:	6013      	str	r3, [r2, #0]
			setLedBuffer(yellow_time, 2);
 80001ee:	4b39      	ldr	r3, [pc, #228]	; (80002d4 <FSMLightModification+0x188>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2102      	movs	r1, #2
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 fd51 	bl	8000c9c <setLedBuffer>
		if(isButton3Pressed() == 1)
 80001fa:	f000 fb17 	bl	800082c <isButton3Pressed>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b01      	cmp	r3, #1
 8000202:	d15c      	bne.n	80002be <FSMLightModification+0x172>
			resetInitialState();
 8000204:	f000 fdb2 	bl	8000d6c <resetInitialState>
			status = MODIFY_GREEN;	//next mode
 8000208:	4b2f      	ldr	r3, [pc, #188]	; (80002c8 <FSMLightModification+0x17c>)
 800020a:	2221      	movs	r2, #33	; 0x21
 800020c:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 800020e:	2019      	movs	r0, #25
 8000210:	f001 f808 	bl	8001224 <setTimer4>
			setLedBuffer(0, 3);
 8000214:	2103      	movs	r1, #3
 8000216:	2000      	movs	r0, #0
 8000218:	f000 fd40 	bl	8000c9c <setLedBuffer>
		break;
 800021c:	e04f      	b.n	80002be <FSMLightModification+0x172>
		if(timer4_flag == 1)
 800021e:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <FSMLightModification+0x180>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d104      	bne.n	8000230 <FSMLightModification+0xe4>
			setTimer4(25);
 8000226:	2019      	movs	r0, #25
 8000228:	f000 fffc 	bl	8001224 <setTimer4>
			toggleTrafficGreen();
 800022c:	f000 fd28 	bl	8000c80 <toggleTrafficGreen>
		if(isButton2Pressed() == 1)
 8000230:	f000 fade 	bl	80007f0 <isButton2Pressed>
 8000234:	4603      	mov	r3, r0
 8000236:	2b01      	cmp	r3, #1
 8000238:	d10c      	bne.n	8000254 <FSMLightModification+0x108>
			resetInitialState();
 800023a:	f000 fd97 	bl	8000d6c <resetInitialState>
			green_time++;
 800023e:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <FSMLightModification+0x18c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	3301      	adds	r3, #1
 8000244:	4a24      	ldr	r2, [pc, #144]	; (80002d8 <FSMLightModification+0x18c>)
 8000246:	6013      	str	r3, [r2, #0]
			setLedBuffer(green_time, 3);
 8000248:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <FSMLightModification+0x18c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2103      	movs	r1, #3
 800024e:	4618      	mov	r0, r3
 8000250:	f000 fd24 	bl	8000c9c <setLedBuffer>
		if(isButton3Pressed() == 1)
 8000254:	f000 faea 	bl	800082c <isButton3Pressed>
 8000258:	4603      	mov	r3, r0
 800025a:	2b01      	cmp	r3, #1
 800025c:	d131      	bne.n	80002c2 <FSMLightModification+0x176>
			if(red_time == green_time+yellow_time)
 800025e:	4b1e      	ldr	r3, [pc, #120]	; (80002d8 <FSMLightModification+0x18c>)
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	4b1c      	ldr	r3, [pc, #112]	; (80002d4 <FSMLightModification+0x188>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	441a      	add	r2, r3
 8000268:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <FSMLightModification+0x184>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	429a      	cmp	r2, r3
 800026e:	d103      	bne.n	8000278 <FSMLightModification+0x12c>
				status = NORMAL_MODE;
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <FSMLightModification+0x17c>)
 8000272:	2215      	movs	r2, #21
 8000274:	601a      	str	r2, [r3, #0]
		break;
 8000276:	e024      	b.n	80002c2 <FSMLightModification+0x176>
				if(red_time > green_time+yellow_time)
 8000278:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <FSMLightModification+0x18c>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <FSMLightModification+0x188>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	441a      	add	r2, r3
 8000282:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <FSMLightModification+0x184>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	429a      	cmp	r2, r3
 8000288:	da0a      	bge.n	80002a0 <FSMLightModification+0x154>
					green_time = red_time - yellow_time;
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <FSMLightModification+0x184>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <FSMLightModification+0x188>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	1ad3      	subs	r3, r2, r3
 8000294:	4a10      	ldr	r2, [pc, #64]	; (80002d8 <FSMLightModification+0x18c>)
 8000296:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 8000298:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <FSMLightModification+0x17c>)
 800029a:	2215      	movs	r2, #21
 800029c:	601a      	str	r2, [r3, #0]
		break;
 800029e:	e010      	b.n	80002c2 <FSMLightModification+0x176>
					red_time = green_time + yellow_time;
 80002a0:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <FSMLightModification+0x18c>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <FSMLightModification+0x188>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4413      	add	r3, r2
 80002aa:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <FSMLightModification+0x184>)
 80002ac:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <FSMLightModification+0x17c>)
 80002b0:	2215      	movs	r2, #21
 80002b2:	601a      	str	r2, [r3, #0]
		break;
 80002b4:	e005      	b.n	80002c2 <FSMLightModification+0x176>
		break;
 80002b6:	bf00      	nop
 80002b8:	e004      	b.n	80002c4 <FSMLightModification+0x178>
		break;
 80002ba:	bf00      	nop
 80002bc:	e002      	b.n	80002c4 <FSMLightModification+0x178>
		break;
 80002be:	bf00      	nop
 80002c0:	e000      	b.n	80002c4 <FSMLightModification+0x178>
		break;
 80002c2:	bf00      	nop
	}
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000100 	.word	0x20000100
 80002cc:	20000120 	.word	0x20000120
 80002d0:	20000054 	.word	0x20000054
 80002d4:	2000005c 	.word	0x2000005c
 80002d8:	20000058 	.word	0x20000058

080002dc <FSMModificationModeRun>:
 */
#include "FSMModificationMode.h"


void FSMModificationModeRun()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	switch(status)
 80002e0:	4b6c      	ldr	r3, [pc, #432]	; (8000494 <FSMModificationModeRun+0x1b8>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3b1f      	subs	r3, #31
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	f200 80cb 	bhi.w	8000482 <FSMModificationModeRun+0x1a6>
 80002ec:	a201      	add	r2, pc, #4	; (adr r2, 80002f4 <FSMModificationModeRun+0x18>)
 80002ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f2:	bf00      	nop
 80002f4:	08000305 	.word	0x08000305
 80002f8:	0800031f 	.word	0x0800031f
 80002fc:	080003e5 	.word	0x080003e5
 8000300:	08000383 	.word	0x08000383
	{
	case MODIFICATION_MODE:
		resetInitialState();	// reset all all the varialbles thats affect FSMModificationModeRun
 8000304:	f000 fd32 	bl	8000d6c <resetInitialState>
		status = MODIFY_RED;	// next mode
 8000308:	4b62      	ldr	r3, [pc, #392]	; (8000494 <FSMModificationModeRun+0x1b8>)
 800030a:	2220      	movs	r2, #32
 800030c:	601a      	str	r2, [r3, #0]
		//led blinky for 2hz
		setTimer4(25);
 800030e:	2019      	movs	r0, #25
 8000310:	f000 ff88 	bl	8001224 <setTimer4>
		// initial setting led 7 seg
		setLedBuffer(0, 1);
 8000314:	2101      	movs	r1, #1
 8000316:	2000      	movs	r0, #0
 8000318:	f000 fcc0 	bl	8000c9c <setLedBuffer>


		break;
 800031c:	e0b8      	b.n	8000490 <FSMModificationModeRun+0x1b4>

	case MODIFY_RED:

		if(timer4_flag == 1)
 800031e:	4b5e      	ldr	r3, [pc, #376]	; (8000498 <FSMModificationModeRun+0x1bc>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d104      	bne.n	8000330 <FSMModificationModeRun+0x54>
		{
			setTimer4(25);
 8000326:	2019      	movs	r0, #25
 8000328:	f000 ff7c 	bl	8001224 <setTimer4>
			toggleTrafficRed();
 800032c:	f000 fc7c 	bl	8000c28 <toggleTrafficRed>
		}

		if(isButton1Pressed() == 1)
 8000330:	f000 fa40 	bl	80007b4 <isButton1Pressed>
 8000334:	4603      	mov	r3, r0
 8000336:	2b01      	cmp	r3, #1
 8000338:	d10b      	bne.n	8000352 <FSMModificationModeRun+0x76>
		{
			resetInitialState();
 800033a:	f000 fd17 	bl	8000d6c <resetInitialState>

			status = MODIFY_YELLOW;	//next mode
 800033e:	4b55      	ldr	r3, [pc, #340]	; (8000494 <FSMModificationModeRun+0x1b8>)
 8000340:	2222      	movs	r2, #34	; 0x22
 8000342:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 8000344:	2019      	movs	r0, #25
 8000346:	f000 ff6d 	bl	8001224 <setTimer4>

			// initial setting led 7 seg
			setLedBuffer(0, 2);
 800034a:	2102      	movs	r1, #2
 800034c:	2000      	movs	r0, #0
 800034e:	f000 fca5 	bl	8000c9c <setLedBuffer>
		}

		if(isButton2Pressed() == 1)
 8000352:	f000 fa4d 	bl	80007f0 <isButton2Pressed>
 8000356:	4603      	mov	r3, r0
 8000358:	2b01      	cmp	r3, #1
 800035a:	f040 8094 	bne.w	8000486 <FSMModificationModeRun+0x1aa>
		{
			resetInitialState();
 800035e:	f000 fd05 	bl	8000d6c <resetInitialState>

			status = MODIFY_TIME_RED; //next mode
 8000362:	4b4c      	ldr	r3, [pc, #304]	; (8000494 <FSMModificationModeRun+0x1b8>)
 8000364:	222a      	movs	r2, #42	; 0x2a
 8000366:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 8000368:	2019      	movs	r0, #25
 800036a:	f000 ff5b 	bl	8001224 <setTimer4>

			red_time = 1;
 800036e:	4b4b      	ldr	r3, [pc, #300]	; (800049c <FSMModificationModeRun+0x1c0>)
 8000370:	2201      	movs	r2, #1
 8000372:	601a      	str	r2, [r3, #0]
			setLedBuffer(red_time, 1);
 8000374:	4b49      	ldr	r3, [pc, #292]	; (800049c <FSMModificationModeRun+0x1c0>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2101      	movs	r1, #1
 800037a:	4618      	mov	r0, r3
 800037c:	f000 fc8e 	bl	8000c9c <setLedBuffer>
		}
		break;
 8000380:	e081      	b.n	8000486 <FSMModificationModeRun+0x1aa>

	case MODIFY_YELLOW:

		if(timer4_flag == 1)
 8000382:	4b45      	ldr	r3, [pc, #276]	; (8000498 <FSMModificationModeRun+0x1bc>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d104      	bne.n	8000394 <FSMModificationModeRun+0xb8>
		{
			setTimer4(25);
 800038a:	2019      	movs	r0, #25
 800038c:	f000 ff4a 	bl	8001224 <setTimer4>

			toggleTrafficYellow();
 8000390:	f000 fc5c 	bl	8000c4c <toggleTrafficYellow>
		}

		if(isButton1Pressed() == 1)
 8000394:	f000 fa0e 	bl	80007b4 <isButton1Pressed>
 8000398:	4603      	mov	r3, r0
 800039a:	2b01      	cmp	r3, #1
 800039c:	d10b      	bne.n	80003b6 <FSMModificationModeRun+0xda>
		{
			resetInitialState();
 800039e:	f000 fce5 	bl	8000d6c <resetInitialState>

			status = MODIFY_GREEN;
 80003a2:	4b3c      	ldr	r3, [pc, #240]	; (8000494 <FSMModificationModeRun+0x1b8>)
 80003a4:	2221      	movs	r2, #33	; 0x21
 80003a6:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 80003a8:	2019      	movs	r0, #25
 80003aa:	f000 ff3b 	bl	8001224 <setTimer4>

			setLedBuffer(0, 3);
 80003ae:	2103      	movs	r1, #3
 80003b0:	2000      	movs	r0, #0
 80003b2:	f000 fc73 	bl	8000c9c <setLedBuffer>
//			SCH_Add_Task(toggleTrafficGreen, 0, TOGGLE_TIME);
		}

		if(isButton2Pressed() == 1)
 80003b6:	f000 fa1b 	bl	80007f0 <isButton2Pressed>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d164      	bne.n	800048a <FSMModificationModeRun+0x1ae>
		{
			resetInitialState();
 80003c0:	f000 fcd4 	bl	8000d6c <resetInitialState>

			status = MODIFY_TIME_YELLOW;
 80003c4:	4b33      	ldr	r3, [pc, #204]	; (8000494 <FSMModificationModeRun+0x1b8>)
 80003c6:	222c      	movs	r2, #44	; 0x2c
 80003c8:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 80003ca:	2019      	movs	r0, #25
 80003cc:	f000 ff2a 	bl	8001224 <setTimer4>

			yellow_time = 1;
 80003d0:	4b33      	ldr	r3, [pc, #204]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	601a      	str	r2, [r3, #0]
			setLedBuffer(yellow_time, 2);
 80003d6:	4b32      	ldr	r3, [pc, #200]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2102      	movs	r1, #2
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fc5d 	bl	8000c9c <setLedBuffer>

		}
		break;
 80003e2:	e052      	b.n	800048a <FSMModificationModeRun+0x1ae>

	case MODIFY_GREEN:

		if(timer4_flag == 1)
 80003e4:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <FSMModificationModeRun+0x1bc>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d104      	bne.n	80003f6 <FSMModificationModeRun+0x11a>
		{
			setTimer4(25);
 80003ec:	2019      	movs	r0, #25
 80003ee:	f000 ff19 	bl	8001224 <setTimer4>

			toggleTrafficGreen();
 80003f2:	f000 fc45 	bl	8000c80 <toggleTrafficGreen>
		}

		if(isButton1Pressed() == 1)
 80003f6:	f000 f9dd 	bl	80007b4 <isButton1Pressed>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d12c      	bne.n	800045a <FSMModificationModeRun+0x17e>
		{
			resetInitialState();
 8000400:	f000 fcb4 	bl	8000d6c <resetInitialState>
			if(red_time == green_time+yellow_time)
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	4b25      	ldr	r3, [pc, #148]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	441a      	add	r2, r3
 800040e:	4b23      	ldr	r3, [pc, #140]	; (800049c <FSMModificationModeRun+0x1c0>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	429a      	cmp	r2, r3
 8000414:	d103      	bne.n	800041e <FSMModificationModeRun+0x142>
			{
				status = NORMAL_MODE;
 8000416:	4b1f      	ldr	r3, [pc, #124]	; (8000494 <FSMModificationModeRun+0x1b8>)
 8000418:	2215      	movs	r2, #21
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	e01d      	b.n	800045a <FSMModificationModeRun+0x17e>
			}
			else
			{
				if(red_time > green_time+yellow_time)
 800041e:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	441a      	add	r2, r3
 8000428:	4b1c      	ldr	r3, [pc, #112]	; (800049c <FSMModificationModeRun+0x1c0>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	429a      	cmp	r2, r3
 800042e:	da0a      	bge.n	8000446 <FSMModificationModeRun+0x16a>
				{
					green_time = red_time - yellow_time;
 8000430:	4b1a      	ldr	r3, [pc, #104]	; (800049c <FSMModificationModeRun+0x1c0>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	4a1a      	ldr	r2, [pc, #104]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 800043c:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <FSMModificationModeRun+0x1b8>)
 8000440:	2215      	movs	r2, #21
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	e009      	b.n	800045a <FSMModificationModeRun+0x17e>
				}
				else
				{
					red_time = green_time + yellow_time;
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4413      	add	r3, r2
 8000450:	4a12      	ldr	r2, [pc, #72]	; (800049c <FSMModificationModeRun+0x1c0>)
 8000452:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <FSMModificationModeRun+0x1b8>)
 8000456:	2215      	movs	r2, #21
 8000458:	601a      	str	r2, [r3, #0]
				}
			}
		}

		if(isButton2Pressed() == 1)
 800045a:	f000 f9c9 	bl	80007f0 <isButton2Pressed>
 800045e:	4603      	mov	r3, r0
 8000460:	2b01      	cmp	r3, #1
 8000462:	d114      	bne.n	800048e <FSMModificationModeRun+0x1b2>
		{
			resetInitialState();
 8000464:	f000 fc82 	bl	8000d6c <resetInitialState>

			status = MODIFY_TIME_GREEN;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <FSMModificationModeRun+0x1b8>)
 800046a:	222b      	movs	r2, #43	; 0x2b
 800046c:	601a      	str	r2, [r3, #0]
			green_time = 1;
 800046e:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 8000470:	2201      	movs	r2, #1
 8000472:	601a      	str	r2, [r3, #0]
			setLedBuffer(green_time, 3);
 8000474:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2103      	movs	r1, #3
 800047a:	4618      	mov	r0, r3
 800047c:	f000 fc0e 	bl	8000c9c <setLedBuffer>
		}
		break;
 8000480:	e005      	b.n	800048e <FSMModificationModeRun+0x1b2>

	default:
		break;
 8000482:	bf00      	nop
 8000484:	e004      	b.n	8000490 <FSMModificationModeRun+0x1b4>
		break;
 8000486:	bf00      	nop
 8000488:	e002      	b.n	8000490 <FSMModificationModeRun+0x1b4>
		break;
 800048a:	bf00      	nop
 800048c:	e000      	b.n	8000490 <FSMModificationModeRun+0x1b4>
		break;
 800048e:	bf00      	nop
	}
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000100 	.word	0x20000100
 8000498:	20000120 	.word	0x20000120
 800049c:	20000054 	.word	0x20000054
 80004a0:	2000005c 	.word	0x2000005c
 80004a4:	20000058 	.word	0x20000058

080004a8 <FSMNormalModeRun>:

#include "FSMNormalMode.h"


void FSMNormalModeRun()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	switch(status)
 80004ac:	4b77      	ldr	r3, [pc, #476]	; (800068c <FSMNormalModeRun+0x1e4>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	3b15      	subs	r3, #21
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	f200 80de 	bhi.w	8000674 <FSMNormalModeRun+0x1cc>
 80004b8:	a201      	add	r2, pc, #4	; (adr r2, 80004c0 <FSMNormalModeRun+0x18>)
 80004ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004be:	bf00      	nop
 80004c0:	080004d5 	.word	0x080004d5
 80004c4:	080004fb 	.word	0x080004fb
 80004c8:	0800055b 	.word	0x0800055b
 80004cc:	080005b9 	.word	0x080005b9
 80004d0:	08000617 	.word	0x08000617
	{
	case NORMAL_MODE:
		resetInitialState(); 	// reset all all the varialbles thats affect FSMNormalModeRun
 80004d4:	f000 fc4a 	bl	8000d6c <resetInitialState>

		status = RED0_GREEN1; 	//next mode
 80004d8:	4b6c      	ldr	r3, [pc, #432]	; (800068c <FSMNormalModeRun+0x1e4>)
 80004da:	2216      	movs	r2, #22
 80004dc:	601a      	str	r2, [r3, #0]
		setTimer1(green_time);	//set timer for next state
 80004de:	4b6c      	ldr	r3, [pc, #432]	; (8000690 <FSMNormalModeRun+0x1e8>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 fe74 	bl	80011d0 <setTimer1>

		setLedBuffer(red_time, green_time);
 80004e8:	4b6a      	ldr	r3, [pc, #424]	; (8000694 <FSMNormalModeRun+0x1ec>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a68      	ldr	r2, [pc, #416]	; (8000690 <FSMNormalModeRun+0x1e8>)
 80004ee:	6812      	ldr	r2, [r2, #0]
 80004f0:	4611      	mov	r1, r2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 fbd2 	bl	8000c9c <setLedBuffer>
		break;
 80004f8:	e0c5      	b.n	8000686 <FSMNormalModeRun+0x1de>
	case RED0_GREEN1:
		setTrafficRed();
 80004fa:	f000 faed 	bl	8000ad8 <setTrafficRed>
		setTrafficGreen1();
 80004fe:	f000 fb37 	bl	8000b70 <setTrafficGreen1>

		if(timer3_flag == 1)	//update buffer every second
 8000502:	4b65      	ldr	r3, [pc, #404]	; (8000698 <FSMNormalModeRun+0x1f0>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d104      	bne.n	8000514 <FSMNormalModeRun+0x6c>
		{
			updateLedBuffer();
 800050a:	f000 fc03 	bl	8000d14 <updateLedBuffer>
			setTimer3(100);
 800050e:	2064      	movs	r0, #100	; 0x64
 8000510:	f000 fe74 	bl	80011fc <setTimer3>
		}

		if(timer1_flag == 1)
 8000514:	4b61      	ldr	r3, [pc, #388]	; (800069c <FSMNormalModeRun+0x1f4>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d10f      	bne.n	800053c <FSMNormalModeRun+0x94>
		{
			status = RED0_YELLOW1;	//next mode
 800051c:	4b5b      	ldr	r3, [pc, #364]	; (800068c <FSMNormalModeRun+0x1e4>)
 800051e:	2217      	movs	r2, #23
 8000520:	601a      	str	r2, [r3, #0]
			setTimer1(yellow_time);
 8000522:	4b5f      	ldr	r3, [pc, #380]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f000 fe52 	bl	80011d0 <setTimer1>

			setLedBuffer(yellow_time, yellow_time); // set buffer for led 7 seg
 800052c:	4b5c      	ldr	r3, [pc, #368]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a5b      	ldr	r2, [pc, #364]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 8000532:	6812      	ldr	r2, [r2, #0]
 8000534:	4611      	mov	r1, r2
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fbb0 	bl	8000c9c <setLedBuffer>

		}

		if(isButton1Pressed() == 1)
 800053c:	f000 f93a 	bl	80007b4 <isButton1Pressed>
 8000540:	4603      	mov	r3, r0
 8000542:	2b01      	cmp	r3, #1
 8000544:	f040 8098 	bne.w	8000678 <FSMNormalModeRun+0x1d0>
		{
			status = MODIFICATION_MODE;
 8000548:	4b50      	ldr	r3, [pc, #320]	; (800068c <FSMNormalModeRun+0x1e4>)
 800054a:	221f      	movs	r2, #31
 800054c:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(FSMModificationModeRun, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	4854      	ldr	r0, [pc, #336]	; (80006a4 <FSMNormalModeRun+0x1fc>)
 8000554:	f000 fd76 	bl	8001044 <SCH_Add_Task>
		}
		break;
 8000558:	e08e      	b.n	8000678 <FSMNormalModeRun+0x1d0>

	case RED0_YELLOW1:
		setTrafficRed();
 800055a:	f000 fabd 	bl	8000ad8 <setTrafficRed>
		setTrafficYellow1();
 800055e:	f000 fb17 	bl	8000b90 <setTrafficYellow1>

		if(timer3_flag == 1)	//update buffer every second
 8000562:	4b4d      	ldr	r3, [pc, #308]	; (8000698 <FSMNormalModeRun+0x1f0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d104      	bne.n	8000574 <FSMNormalModeRun+0xcc>
		{
			updateLedBuffer();
 800056a:	f000 fbd3 	bl	8000d14 <updateLedBuffer>
			setTimer3(100);
 800056e:	2064      	movs	r0, #100	; 0x64
 8000570:	f000 fe44 	bl	80011fc <setTimer3>
		}

		if(timer1_flag == 1)
 8000574:	4b49      	ldr	r3, [pc, #292]	; (800069c <FSMNormalModeRun+0x1f4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d10f      	bne.n	800059c <FSMNormalModeRun+0xf4>
		{
			status = GREEN0_RED1;	//next mode
 800057c:	4b43      	ldr	r3, [pc, #268]	; (800068c <FSMNormalModeRun+0x1e4>)
 800057e:	2218      	movs	r2, #24
 8000580:	601a      	str	r2, [r3, #0]
			setTimer1(green_time);	//set_timer for next mode
 8000582:	4b43      	ldr	r3, [pc, #268]	; (8000690 <FSMNormalModeRun+0x1e8>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fe22 	bl	80011d0 <setTimer1>

			setLedBuffer(green_time, red_time); // set buffer for led 7 seg
 800058c:	4b40      	ldr	r3, [pc, #256]	; (8000690 <FSMNormalModeRun+0x1e8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a40      	ldr	r2, [pc, #256]	; (8000694 <FSMNormalModeRun+0x1ec>)
 8000592:	6812      	ldr	r2, [r2, #0]
 8000594:	4611      	mov	r1, r2
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fb80 	bl	8000c9c <setLedBuffer>
		}

		if(isButton1Pressed() == 1)
 800059c:	f000 f90a 	bl	80007b4 <isButton1Pressed>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d16a      	bne.n	800067c <FSMNormalModeRun+0x1d4>
		{
			status = MODIFICATION_MODE;
 80005a6:	4b39      	ldr	r3, [pc, #228]	; (800068c <FSMNormalModeRun+0x1e4>)
 80005a8:	221f      	movs	r2, #31
 80005aa:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(FSMModificationModeRun, 0, 0);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	483c      	ldr	r0, [pc, #240]	; (80006a4 <FSMNormalModeRun+0x1fc>)
 80005b2:	f000 fd47 	bl	8001044 <SCH_Add_Task>
		}
		break;
 80005b6:	e061      	b.n	800067c <FSMNormalModeRun+0x1d4>

	case GREEN0_RED1:
		setTrafficGreen();
 80005b8:	f000 faa2 	bl	8000b00 <setTrafficGreen>
		setTrafficRed1();
 80005bc:	f000 fac8 	bl	8000b50 <setTrafficRed1>

		if(timer3_flag == 1)
 80005c0:	4b35      	ldr	r3, [pc, #212]	; (8000698 <FSMNormalModeRun+0x1f0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d104      	bne.n	80005d2 <FSMNormalModeRun+0x12a>
		{
			updateLedBuffer();
 80005c8:	f000 fba4 	bl	8000d14 <updateLedBuffer>
			setTimer3(100);
 80005cc:	2064      	movs	r0, #100	; 0x64
 80005ce:	f000 fe15 	bl	80011fc <setTimer3>

		}

		if(timer1_flag==1)
 80005d2:	4b32      	ldr	r3, [pc, #200]	; (800069c <FSMNormalModeRun+0x1f4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d10f      	bne.n	80005fa <FSMNormalModeRun+0x152>
		{
			status = YELLOW0_RED1;
 80005da:	4b2c      	ldr	r3, [pc, #176]	; (800068c <FSMNormalModeRun+0x1e4>)
 80005dc:	2219      	movs	r2, #25
 80005de:	601a      	str	r2, [r3, #0]
			setTimer1(yellow_time);
 80005e0:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fdf3 	bl	80011d0 <setTimer1>

			setLedBuffer(yellow_time, yellow_time);	// set buffer for led 7 seg
 80005ea:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a2c      	ldr	r2, [pc, #176]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 80005f0:	6812      	ldr	r2, [r2, #0]
 80005f2:	4611      	mov	r1, r2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fb51 	bl	8000c9c <setLedBuffer>
		}

		if(isButton1Pressed() == 1)
 80005fa:	f000 f8db 	bl	80007b4 <isButton1Pressed>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b01      	cmp	r3, #1
 8000602:	d13d      	bne.n	8000680 <FSMNormalModeRun+0x1d8>
		{
			status = MODIFICATION_MODE;
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <FSMNormalModeRun+0x1e4>)
 8000606:	221f      	movs	r2, #31
 8000608:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(FSMModificationModeRun, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	4825      	ldr	r0, [pc, #148]	; (80006a4 <FSMNormalModeRun+0x1fc>)
 8000610:	f000 fd18 	bl	8001044 <SCH_Add_Task>
		}
		break;
 8000614:	e034      	b.n	8000680 <FSMNormalModeRun+0x1d8>

	case YELLOW0_RED1:
		setTrafficYellow();
 8000616:	f000 fa87 	bl	8000b28 <setTrafficYellow>
		setTrafficRed1();
 800061a:	f000 fa99 	bl	8000b50 <setTrafficRed1>

		if(timer3_flag == 1)
 800061e:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <FSMNormalModeRun+0x1f0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d104      	bne.n	8000630 <FSMNormalModeRun+0x188>
		{
			updateLedBuffer();
 8000626:	f000 fb75 	bl	8000d14 <updateLedBuffer>
			setTimer3(100);
 800062a:	2064      	movs	r0, #100	; 0x64
 800062c:	f000 fde6 	bl	80011fc <setTimer3>
		}

		if(timer1_flag == 1)
 8000630:	4b1a      	ldr	r3, [pc, #104]	; (800069c <FSMNormalModeRun+0x1f4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d10f      	bne.n	8000658 <FSMNormalModeRun+0x1b0>
		{
			status = RED0_GREEN1;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <FSMNormalModeRun+0x1e4>)
 800063a:	2216      	movs	r2, #22
 800063c:	601a      	str	r2, [r3, #0]
			setTimer1(green_time);
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <FSMNormalModeRun+0x1e8>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fdc4 	bl	80011d0 <setTimer1>

			setLedBuffer(red_time, green_time); // set buffer for led 7 seg
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <FSMNormalModeRun+0x1ec>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a10      	ldr	r2, [pc, #64]	; (8000690 <FSMNormalModeRun+0x1e8>)
 800064e:	6812      	ldr	r2, [r2, #0]
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fb22 	bl	8000c9c <setLedBuffer>
		}
		if(isButton1Pressed() == 1)
 8000658:	f000 f8ac 	bl	80007b4 <isButton1Pressed>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d110      	bne.n	8000684 <FSMNormalModeRun+0x1dc>
		{
			status = MODIFICATION_MODE;
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <FSMNormalModeRun+0x1e4>)
 8000664:	221f      	movs	r2, #31
 8000666:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(FSMModificationModeRun, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <FSMNormalModeRun+0x1fc>)
 800066e:	f000 fce9 	bl	8001044 <SCH_Add_Task>
		}
		break;
 8000672:	e007      	b.n	8000684 <FSMNormalModeRun+0x1dc>

	default:
		break;
 8000674:	bf00      	nop
 8000676:	e006      	b.n	8000686 <FSMNormalModeRun+0x1de>
		break;
 8000678:	bf00      	nop
 800067a:	e004      	b.n	8000686 <FSMNormalModeRun+0x1de>
		break;
 800067c:	bf00      	nop
 800067e:	e002      	b.n	8000686 <FSMNormalModeRun+0x1de>
		break;
 8000680:	bf00      	nop
 8000682:	e000      	b.n	8000686 <FSMNormalModeRun+0x1de>
		break;
 8000684:	bf00      	nop
	}
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000100 	.word	0x20000100
 8000690:	20000058 	.word	0x20000058
 8000694:	20000054 	.word	0x20000054
 8000698:	2000011c 	.word	0x2000011c
 800069c:	20000114 	.word	0x20000114
 80006a0:	2000005c 	.word	0x2000005c
 80006a4:	080002dd 	.word	0x080002dd

080006a8 <SetPedDuration>:
#include "FSMPedestrianMode.h"

int PED_PRESSED = 0;

void SetPedDuration()
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
	PED_PRESSED = PED_LIGHT_DURATION * (red_time+green_time+yellow_time);
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <SetPedDuration+0x24>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <SetPedDuration+0x28>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	441a      	add	r2, r3
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <SetPedDuration+0x2c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4413      	add	r3, r2
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	4a06      	ldr	r2, [pc, #24]	; (80006d8 <SetPedDuration+0x30>)
 80006c0:	6013      	str	r3, [r2, #0]
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000054 	.word	0x20000054
 80006d0:	20000058 	.word	0x20000058
 80006d4:	2000005c 	.word	0x2000005c
 80006d8:	200000ec 	.word	0x200000ec

080006dc <PedDurationCount>:

void PedDurationCount()
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
	if(PED_PRESSED > 0)
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <PedDurationCount+0x20>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	dd04      	ble.n	80006f2 <PedDurationCount+0x16>
	{
		PED_PRESSED--;
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <PedDurationCount+0x20>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3b01      	subs	r3, #1
 80006ee:	4a03      	ldr	r2, [pc, #12]	; (80006fc <PedDurationCount+0x20>)
 80006f0:	6013      	str	r3, [r2, #0]
	}
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	200000ec 	.word	0x200000ec

08000700 <FSMPedestrianRun>:

void FSMPedestrianRun()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	switch(status)
 8000704:	4b29      	ldr	r3, [pc, #164]	; (80007ac <FSMPedestrianRun+0xac>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3b15      	subs	r3, #21
 800070a:	2b04      	cmp	r3, #4
 800070c:	d84b      	bhi.n	80007a6 <FSMPedestrianRun+0xa6>
 800070e:	a201      	add	r2, pc, #4	; (adr r2, 8000714 <FSMPedestrianRun+0x14>)
 8000710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000714:	08000729 	.word	0x08000729
 8000718:	0800072f 	.word	0x0800072f
 800071c:	0800074d 	.word	0x0800074d
 8000720:	0800076b 	.word	0x0800076b
 8000724:	08000789 	.word	0x08000789
	{
	case NORMAL_MODE:
		resetInitialState();
 8000728:	f000 fb20 	bl	8000d6c <resetInitialState>
		break;
 800072c:	e03c      	b.n	80007a8 <FSMPedestrianRun+0xa8>
	case RED0_GREEN1:
		if(isButton4Pressed() || PED_PRESSED > 0)
 800072e:	f000 f89b 	bl	8000868 <isButton4Pressed>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d103      	bne.n	8000740 <FSMPedestrianRun+0x40>
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <FSMPedestrianRun+0xb0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	dd02      	ble.n	8000746 <FSMPedestrianRun+0x46>
		{
			setPedLightRed();
 8000740:	f000 fa36 	bl	8000bb0 <setPedLightRed>
		}
		else
		{
			setPedLightOff();
		}
		break;
 8000744:	e030      	b.n	80007a8 <FSMPedestrianRun+0xa8>
			setPedLightOff();
 8000746:	f000 fa5b 	bl	8000c00 <setPedLightOff>
		break;
 800074a:	e02d      	b.n	80007a8 <FSMPedestrianRun+0xa8>
	case RED0_YELLOW1:
		if(isButton4Pressed() || PED_PRESSED > 0)
 800074c:	f000 f88c 	bl	8000868 <isButton4Pressed>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d103      	bne.n	800075e <FSMPedestrianRun+0x5e>
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <FSMPedestrianRun+0xb0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	dd02      	ble.n	8000764 <FSMPedestrianRun+0x64>
		{
			setPedLightRed();
 800075e:	f000 fa27 	bl	8000bb0 <setPedLightRed>
		}
		else
		{
			setPedLightOff();
		}
		break;
 8000762:	e021      	b.n	80007a8 <FSMPedestrianRun+0xa8>
			setPedLightOff();
 8000764:	f000 fa4c 	bl	8000c00 <setPedLightOff>
		break;
 8000768:	e01e      	b.n	80007a8 <FSMPedestrianRun+0xa8>
	case GREEN0_RED1:
		if(isButton4Pressed() || PED_PRESSED > 0)
 800076a:	f000 f87d 	bl	8000868 <isButton4Pressed>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d103      	bne.n	800077c <FSMPedestrianRun+0x7c>
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <FSMPedestrianRun+0xb0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	dd02      	ble.n	8000782 <FSMPedestrianRun+0x82>
		{
			setPedLightGreen();
 800077c:	f000 fa2c 	bl	8000bd8 <setPedLightGreen>
		}
		else
		{
			setPedLightOff();
		}
		break;
 8000780:	e012      	b.n	80007a8 <FSMPedestrianRun+0xa8>
			setPedLightOff();
 8000782:	f000 fa3d 	bl	8000c00 <setPedLightOff>
		break;
 8000786:	e00f      	b.n	80007a8 <FSMPedestrianRun+0xa8>
	case YELLOW0_RED1:
		if(isButton4Pressed() || PED_PRESSED > 0)
 8000788:	f000 f86e 	bl	8000868 <isButton4Pressed>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d103      	bne.n	800079a <FSMPedestrianRun+0x9a>
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <FSMPedestrianRun+0xb0>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	dd02      	ble.n	80007a0 <FSMPedestrianRun+0xa0>
		{
			setPedLightGreen();
 800079a:	f000 fa1d 	bl	8000bd8 <setPedLightGreen>
		}
		else
		{
			setPedLightOff();
		}
		break;
 800079e:	e003      	b.n	80007a8 <FSMPedestrianRun+0xa8>
			setPedLightOff();
 80007a0:	f000 fa2e 	bl	8000c00 <setPedLightOff>
		break;
 80007a4:	e000      	b.n	80007a8 <FSMPedestrianRun+0xa8>
	default:
		break;
 80007a6:	bf00      	nop
	}
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000100 	.word	0x20000100
 80007b0:	200000ec 	.word	0x200000ec

080007b4 <isButton1Pressed>:
int button2_flag = 0;
int button3_flag = 0;
int button4_flag = 0;
// PROCESS BUTTON 1 FUNCTION
int isButton1Pressed() // nếu nút được nhấn thì hàm trả về 1
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <isButton1Pressed+0x20>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d104      	bne.n	80007ca <isButton1Pressed+0x16>
		button1_flag = 0;
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <isButton1Pressed+0x20>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
		return 1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e000      	b.n	80007cc <isButton1Pressed+0x18>
	}
	else return 0;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	200000f0 	.word	0x200000f0

080007d8 <flag1Process>:
void flag1Process() // hàm này chỉ đề set cờ khi mà nút được nhấn
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
	button1_flag = 1; // set flag để xử lý trên while(1)
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <flag1Process+0x14>)
 80007de:	2201      	movs	r2, #1
 80007e0:	601a      	str	r2, [r3, #0]
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	200000f0 	.word	0x200000f0

080007f0 <isButton2Pressed>:

// PROCESS BUTTON 2 FUNCTION
int isButton2Pressed()
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <isButton2Pressed+0x20>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d104      	bne.n	8000806 <isButton2Pressed+0x16>
	{
		button2_flag = 0;
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <isButton2Pressed+0x20>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
		return 1;
 8000802:	2301      	movs	r3, #1
 8000804:	e000      	b.n	8000808 <isButton2Pressed+0x18>
	}
	else return 0;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	200000f4 	.word	0x200000f4

08000814 <flag2Process>:
void flag2Process()
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
	button2_flag = 1;
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <flag2Process+0x14>)
 800081a:	2201      	movs	r2, #1
 800081c:	601a      	str	r2, [r3, #0]
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	200000f4 	.word	0x200000f4

0800082c <isButton3Pressed>:

//PROCESS BUTTON 3 FUNCTION
int isButton3Pressed()
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <isButton3Pressed+0x20>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d104      	bne.n	8000842 <isButton3Pressed+0x16>
	{
		button3_flag = 0;
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <isButton3Pressed+0x20>)
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
		return 1;
 800083e:	2301      	movs	r3, #1
 8000840:	e000      	b.n	8000844 <isButton3Pressed+0x18>
	}
	else return 0;
 8000842:	2300      	movs	r3, #0
}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	200000f8 	.word	0x200000f8

08000850 <flag3Process>:
void flag3Process()
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <flag3Process+0x14>)
 8000856:	2201      	movs	r2, #1
 8000858:	601a      	str	r2, [r3, #0]
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	200000f8 	.word	0x200000f8

08000868 <isButton4Pressed>:

//PROCESS BUTTON 4 FUNCTION
int isButton4Pressed()
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	if(button4_flag == 1)
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <isButton4Pressed+0x20>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d106      	bne.n	8000882 <isButton4Pressed+0x1a>
	{
		button4_flag = 0;
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <isButton4Pressed+0x20>)
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
		SetPedDuration(); // turn on PED light
 800087a:	f7ff ff15 	bl	80006a8 <SetPedDuration>
		return 1;
 800087e:	2301      	movs	r3, #1
 8000880:	e000      	b.n	8000884 <isButton4Pressed+0x1c>
	}
	else return 0;
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000fc 	.word	0x200000fc

0800088c <flag4Process>:
void flag4Process()
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
	button4_flag = 1;
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <flag4Process+0x14>)
 8000892:	2201      	movs	r2, #1
 8000894:	601a      	str	r2, [r3, #0]
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	200000fc 	.word	0x200000fc

080008a4 <getKeyInput>:


void getKeyInput()  //goi = timer moi 10ms 1 lan
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	//BUTTON1
	key1_reg0 = key1_reg1;
 80008a8:	4b78      	ldr	r3, [pc, #480]	; (8000a8c <getKeyInput+0x1e8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a78      	ldr	r2, [pc, #480]	; (8000a90 <getKeyInput+0x1ec>)
 80008ae:	6013      	str	r3, [r2, #0]
	key1_reg1 = key1_reg2;
 80008b0:	4b78      	ldr	r3, [pc, #480]	; (8000a94 <getKeyInput+0x1f0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a75      	ldr	r2, [pc, #468]	; (8000a8c <getKeyInput+0x1e8>)
 80008b6:	6013      	str	r3, [r2, #0]
	key1_reg2 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin); // key1_reg2 đọc giá trị của nút nhấn
 80008b8:	2102      	movs	r1, #2
 80008ba:	4877      	ldr	r0, [pc, #476]	; (8000a98 <getKeyInput+0x1f4>)
 80008bc:	f001 f8f0 	bl	8001aa0 <HAL_GPIO_ReadPin>
 80008c0:	4603      	mov	r3, r0
 80008c2:	461a      	mov	r2, r3
 80008c4:	4b73      	ldr	r3, [pc, #460]	; (8000a94 <getKeyInput+0x1f0>)
 80008c6:	601a      	str	r2, [r3, #0]
	if((key1_reg0 == key1_reg1) && (key1_reg1 == key1_reg2)) // chống rung
 80008c8:	4b71      	ldr	r3, [pc, #452]	; (8000a90 <getKeyInput+0x1ec>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b6f      	ldr	r3, [pc, #444]	; (8000a8c <getKeyInput+0x1e8>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d125      	bne.n	8000920 <getKeyInput+0x7c>
 80008d4:	4b6d      	ldr	r3, [pc, #436]	; (8000a8c <getKeyInput+0x1e8>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b6e      	ldr	r3, [pc, #440]	; (8000a94 <getKeyInput+0x1f0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d11f      	bne.n	8000920 <getKeyInput+0x7c>
	{
		if(key1_reg3 != key1_reg2) // xử lý khi nhấn
 80008e0:	4b6e      	ldr	r3, [pc, #440]	; (8000a9c <getKeyInput+0x1f8>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b6b      	ldr	r3, [pc, #428]	; (8000a94 <getKeyInput+0x1f0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d00d      	beq.n	8000908 <getKeyInput+0x64>
		{
			key1_reg3 = key1_reg2;
 80008ec:	4b69      	ldr	r3, [pc, #420]	; (8000a94 <getKeyInput+0x1f0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a6a      	ldr	r2, [pc, #424]	; (8000a9c <getKeyInput+0x1f8>)
 80008f2:	6013      	str	r3, [r2, #0]
			if(key1_reg2 == PRESSED_STATE)
 80008f4:	4b67      	ldr	r3, [pc, #412]	; (8000a94 <getKeyInput+0x1f0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d111      	bne.n	8000920 <getKeyInput+0x7c>
			{
				flag1Process();
 80008fc:	f7ff ff6c 	bl	80007d8 <flag1Process>
				timer_for_key_press = 200; // gán lại lên 2s
 8000900:	4b67      	ldr	r3, [pc, #412]	; (8000aa0 <getKeyInput+0x1fc>)
 8000902:	22c8      	movs	r2, #200	; 0xc8
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	e00b      	b.n	8000920 <getKeyInput+0x7c>
			}
		}
		else // xử lý nhấn đè (key1_reg3 == key1_reg2)
		{
			timer_for_key_press--;
 8000908:	4b65      	ldr	r3, [pc, #404]	; (8000aa0 <getKeyInput+0x1fc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3b01      	subs	r3, #1
 800090e:	4a64      	ldr	r2, [pc, #400]	; (8000aa0 <getKeyInput+0x1fc>)
 8000910:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 8000912:	4b63      	ldr	r3, [pc, #396]	; (8000aa0 <getKeyInput+0x1fc>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d102      	bne.n	8000920 <getKeyInput+0x7c>
			{
				key1_reg3 = NORMAL_STATE; // gán key1_reg3 thành NORMAL_STATE sẽ reset trường hợp nhấn đè lên lại trường hợp nhấn
 800091a:	4b60      	ldr	r3, [pc, #384]	; (8000a9c <getKeyInput+0x1f8>)
 800091c:	2201      	movs	r2, #1
 800091e:	601a      	str	r2, [r3, #0]
			}
		}
	}
	//BUTTON2
	key2_reg0 = key2_reg1;
 8000920:	4b60      	ldr	r3, [pc, #384]	; (8000aa4 <getKeyInput+0x200>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a60      	ldr	r2, [pc, #384]	; (8000aa8 <getKeyInput+0x204>)
 8000926:	6013      	str	r3, [r2, #0]
	key2_reg1 = key2_reg2;
 8000928:	4b60      	ldr	r3, [pc, #384]	; (8000aac <getKeyInput+0x208>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a5d      	ldr	r2, [pc, #372]	; (8000aa4 <getKeyInput+0x200>)
 800092e:	6013      	str	r3, [r2, #0]
	key2_reg2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000930:	2110      	movs	r1, #16
 8000932:	4859      	ldr	r0, [pc, #356]	; (8000a98 <getKeyInput+0x1f4>)
 8000934:	f001 f8b4 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000938:	4603      	mov	r3, r0
 800093a:	461a      	mov	r2, r3
 800093c:	4b5b      	ldr	r3, [pc, #364]	; (8000aac <getKeyInput+0x208>)
 800093e:	601a      	str	r2, [r3, #0]
	if(key2_reg0 == key2_reg1 && key2_reg1 == key2_reg2)
 8000940:	4b59      	ldr	r3, [pc, #356]	; (8000aa8 <getKeyInput+0x204>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b57      	ldr	r3, [pc, #348]	; (8000aa4 <getKeyInput+0x200>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	429a      	cmp	r2, r3
 800094a:	d125      	bne.n	8000998 <getKeyInput+0xf4>
 800094c:	4b55      	ldr	r3, [pc, #340]	; (8000aa4 <getKeyInput+0x200>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b56      	ldr	r3, [pc, #344]	; (8000aac <getKeyInput+0x208>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	429a      	cmp	r2, r3
 8000956:	d11f      	bne.n	8000998 <getKeyInput+0xf4>
	{
		if(key2_reg3 != key2_reg2)
 8000958:	4b55      	ldr	r3, [pc, #340]	; (8000ab0 <getKeyInput+0x20c>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b53      	ldr	r3, [pc, #332]	; (8000aac <getKeyInput+0x208>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	429a      	cmp	r2, r3
 8000962:	d00d      	beq.n	8000980 <getKeyInput+0xdc>
		{
			key2_reg3 = key2_reg2;
 8000964:	4b51      	ldr	r3, [pc, #324]	; (8000aac <getKeyInput+0x208>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a51      	ldr	r2, [pc, #324]	; (8000ab0 <getKeyInput+0x20c>)
 800096a:	6013      	str	r3, [r2, #0]
			if(key2_reg2 == PRESSED_STATE)
 800096c:	4b4f      	ldr	r3, [pc, #316]	; (8000aac <getKeyInput+0x208>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d111      	bne.n	8000998 <getKeyInput+0xf4>
			{
				flag2Process();
 8000974:	f7ff ff4e 	bl	8000814 <flag2Process>
				timer_for_key_press = 200;
 8000978:	4b49      	ldr	r3, [pc, #292]	; (8000aa0 <getKeyInput+0x1fc>)
 800097a:	22c8      	movs	r2, #200	; 0xc8
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	e00b      	b.n	8000998 <getKeyInput+0xf4>
			}
		}
		else
		{
			timer_for_key_press--;
 8000980:	4b47      	ldr	r3, [pc, #284]	; (8000aa0 <getKeyInput+0x1fc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3b01      	subs	r3, #1
 8000986:	4a46      	ldr	r2, [pc, #280]	; (8000aa0 <getKeyInput+0x1fc>)
 8000988:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 800098a:	4b45      	ldr	r3, [pc, #276]	; (8000aa0 <getKeyInput+0x1fc>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d102      	bne.n	8000998 <getKeyInput+0xf4>
			{
				key2_reg3 = NORMAL_STATE;
 8000992:	4b47      	ldr	r3, [pc, #284]	; (8000ab0 <getKeyInput+0x20c>)
 8000994:	2201      	movs	r2, #1
 8000996:	601a      	str	r2, [r3, #0]
			}
		}
	}
	//BUTTON3
	key3_reg0 = key3_reg1;
 8000998:	4b46      	ldr	r3, [pc, #280]	; (8000ab4 <getKeyInput+0x210>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a46      	ldr	r2, [pc, #280]	; (8000ab8 <getKeyInput+0x214>)
 800099e:	6013      	str	r3, [r2, #0]
	key3_reg1 = key3_reg2;
 80009a0:	4b46      	ldr	r3, [pc, #280]	; (8000abc <getKeyInput+0x218>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a43      	ldr	r2, [pc, #268]	; (8000ab4 <getKeyInput+0x210>)
 80009a6:	6013      	str	r3, [r2, #0]
	key3_reg2 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80009a8:	2101      	movs	r1, #1
 80009aa:	4845      	ldr	r0, [pc, #276]	; (8000ac0 <getKeyInput+0x21c>)
 80009ac:	f001 f878 	bl	8001aa0 <HAL_GPIO_ReadPin>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	4b41      	ldr	r3, [pc, #260]	; (8000abc <getKeyInput+0x218>)
 80009b6:	601a      	str	r2, [r3, #0]
	if(key3_reg0 == key3_reg1 && key3_reg1 == key3_reg2)
 80009b8:	4b3f      	ldr	r3, [pc, #252]	; (8000ab8 <getKeyInput+0x214>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b3d      	ldr	r3, [pc, #244]	; (8000ab4 <getKeyInput+0x210>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d125      	bne.n	8000a10 <getKeyInput+0x16c>
 80009c4:	4b3b      	ldr	r3, [pc, #236]	; (8000ab4 <getKeyInput+0x210>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b3c      	ldr	r3, [pc, #240]	; (8000abc <getKeyInput+0x218>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d11f      	bne.n	8000a10 <getKeyInput+0x16c>
	{
		if(key3_reg2 != key3_reg3)
 80009d0:	4b3a      	ldr	r3, [pc, #232]	; (8000abc <getKeyInput+0x218>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <getKeyInput+0x220>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d00d      	beq.n	80009f8 <getKeyInput+0x154>
		{
			key3_reg3 = key3_reg2;
 80009dc:	4b37      	ldr	r3, [pc, #220]	; (8000abc <getKeyInput+0x218>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a38      	ldr	r2, [pc, #224]	; (8000ac4 <getKeyInput+0x220>)
 80009e2:	6013      	str	r3, [r2, #0]
			if(key3_reg2 == PRESSED_STATE)
 80009e4:	4b35      	ldr	r3, [pc, #212]	; (8000abc <getKeyInput+0x218>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d111      	bne.n	8000a10 <getKeyInput+0x16c>
			{
				flag3Process();
 80009ec:	f7ff ff30 	bl	8000850 <flag3Process>
				timer_for_key_press = 200;
 80009f0:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <getKeyInput+0x1fc>)
 80009f2:	22c8      	movs	r2, #200	; 0xc8
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	e00b      	b.n	8000a10 <getKeyInput+0x16c>
			}
		}

		else
		{
			timer_for_key_press--;
 80009f8:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <getKeyInput+0x1fc>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	4a28      	ldr	r2, [pc, #160]	; (8000aa0 <getKeyInput+0x1fc>)
 8000a00:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 8000a02:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <getKeyInput+0x1fc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <getKeyInput+0x16c>
			{
				key3_reg3 = NORMAL_STATE;
 8000a0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ac4 <getKeyInput+0x220>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	601a      	str	r2, [r3, #0]
			}
		}
	}
	//PED_BUTTON
	key4_reg0 = key4_reg1;
 8000a10:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <getKeyInput+0x224>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a2d      	ldr	r2, [pc, #180]	; (8000acc <getKeyInput+0x228>)
 8000a16:	6013      	str	r3, [r2, #0]
	key4_reg1 = key4_reg2;
 8000a18:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <getKeyInput+0x22c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a2a      	ldr	r2, [pc, #168]	; (8000ac8 <getKeyInput+0x224>)
 8000a1e:	6013      	str	r3, [r2, #0]
	key4_reg2 = HAL_GPIO_ReadPin(PED_BUTTON_GPIO_Port, PED_BUTTON_Pin);
 8000a20:	2101      	movs	r1, #1
 8000a22:	481d      	ldr	r0, [pc, #116]	; (8000a98 <getKeyInput+0x1f4>)
 8000a24:	f001 f83c 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <getKeyInput+0x22c>)
 8000a2e:	601a      	str	r2, [r3, #0]
	if(key4_reg0 == key4_reg1 && key4_reg1 == key4_reg2)
 8000a30:	4b26      	ldr	r3, [pc, #152]	; (8000acc <getKeyInput+0x228>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <getKeyInput+0x224>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d125      	bne.n	8000a88 <getKeyInput+0x1e4>
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <getKeyInput+0x224>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <getKeyInput+0x22c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d11f      	bne.n	8000a88 <getKeyInput+0x1e4>
	{
		if(key4_reg2 != key4_reg3)
 8000a48:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <getKeyInput+0x22c>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <getKeyInput+0x230>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d00d      	beq.n	8000a70 <getKeyInput+0x1cc>
		{
			key4_reg3 = key4_reg2;
 8000a54:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <getKeyInput+0x22c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <getKeyInput+0x230>)
 8000a5a:	6013      	str	r3, [r2, #0]
			if(key4_reg2 == PRESSED_STATE)
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <getKeyInput+0x22c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d111      	bne.n	8000a88 <getKeyInput+0x1e4>
			{
				flag4Process();
 8000a64:	f7ff ff12 	bl	800088c <flag4Process>
				timer_for_key_press = 200;
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <getKeyInput+0x1fc>)
 8000a6a:	22c8      	movs	r2, #200	; 0xc8
 8000a6c:	601a      	str	r2, [r3, #0]
			{
				key4_reg3 = NORMAL_STATE;
			}
		}
	}
}
 8000a6e:	e00b      	b.n	8000a88 <getKeyInput+0x1e4>
			timer_for_key_press--;
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <getKeyInput+0x1fc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	3b01      	subs	r3, #1
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <getKeyInput+0x1fc>)
 8000a78:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <getKeyInput+0x1fc>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d102      	bne.n	8000a88 <getKeyInput+0x1e4>
				key4_reg3 = NORMAL_STATE;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <getKeyInput+0x230>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	601a      	str	r2, [r3, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000004 	.word	0x20000004
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20000008 	.word	0x20000008
 8000a98:	40010800 	.word	0x40010800
 8000a9c:	2000000c 	.word	0x2000000c
 8000aa0:	20000040 	.word	0x20000040
 8000aa4:	20000014 	.word	0x20000014
 8000aa8:	20000010 	.word	0x20000010
 8000aac:	20000018 	.word	0x20000018
 8000ab0:	2000001c 	.word	0x2000001c
 8000ab4:	20000024 	.word	0x20000024
 8000ab8:	20000020 	.word	0x20000020
 8000abc:	20000028 	.word	0x20000028
 8000ac0:	40010c00 	.word	0x40010c00
 8000ac4:	2000002c 	.word	0x2000002c
 8000ac8:	20000034 	.word	0x20000034
 8000acc:	20000030 	.word	0x20000030
 8000ad0:	20000038 	.word	0x20000038
 8000ad4:	2000003c 	.word	0x2000003c

08000ad8 <setTrafficRed>:
int green_time = 3;
int yellow_time = 2;

//SET TRAFFIC LIGHT FUNCTION
void setTrafficRed()
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_GPIO_Port, LIGHT2_Pin, RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <setTrafficRed+0x20>)
 8000ae4:	f000 fff3 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT3_GPIO_Port, LIGHT3_Pin, SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2108      	movs	r1, #8
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <setTrafficRed+0x24>)
 8000aee:	f000 ffee 	bl	8001ace <HAL_GPIO_WritePin>
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40010800 	.word	0x40010800
 8000afc:	40010c00 	.word	0x40010c00

08000b00 <setTrafficGreen>:
void setTrafficGreen()
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_GPIO_Port, LIGHT2_Pin, SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <setTrafficGreen+0x20>)
 8000b0c:	f000 ffdf 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT3_GPIO_Port, LIGHT3_Pin, RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2108      	movs	r1, #8
 8000b14:	4803      	ldr	r0, [pc, #12]	; (8000b24 <setTrafficGreen+0x24>)
 8000b16:	f000 ffda 	bl	8001ace <HAL_GPIO_WritePin>
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40010800 	.word	0x40010800
 8000b24:	40010c00 	.word	0x40010c00

08000b28 <setTrafficYellow>:
void setTrafficYellow()
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_GPIO_Port, LIGHT2_Pin, RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <setTrafficYellow+0x20>)
 8000b34:	f000 ffcb 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT3_GPIO_Port, LIGHT3_Pin, RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2108      	movs	r1, #8
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <setTrafficYellow+0x24>)
 8000b3e:	f000 ffc6 	bl	8001ace <HAL_GPIO_WritePin>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40010800 	.word	0x40010800
 8000b4c:	40010c00 	.word	0x40010c00

08000b50 <setTrafficRed1>:

void setTrafficRed1()
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT4_GPIO_Port, LIGHT4_Pin, RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2110      	movs	r1, #16
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <setTrafficRed1+0x1c>)
 8000b5a:	f000 ffb8 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT5_GPIO_Port, LIGHT5_Pin, SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2120      	movs	r1, #32
 8000b62:	4802      	ldr	r0, [pc, #8]	; (8000b6c <setTrafficRed1+0x1c>)
 8000b64:	f000 ffb3 	bl	8001ace <HAL_GPIO_WritePin>

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40010c00 	.word	0x40010c00

08000b70 <setTrafficGreen1>:
void setTrafficGreen1()
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT4_GPIO_Port, LIGHT4_Pin, SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2110      	movs	r1, #16
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <setTrafficGreen1+0x1c>)
 8000b7a:	f000 ffa8 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT5_GPIO_Port, LIGHT5_Pin, RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2120      	movs	r1, #32
 8000b82:	4802      	ldr	r0, [pc, #8]	; (8000b8c <setTrafficGreen1+0x1c>)
 8000b84:	f000 ffa3 	bl	8001ace <HAL_GPIO_WritePin>
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40010c00 	.word	0x40010c00

08000b90 <setTrafficYellow1>:
void setTrafficYellow1()
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT4_GPIO_Port, LIGHT4_Pin, RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2110      	movs	r1, #16
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <setTrafficYellow1+0x1c>)
 8000b9a:	f000 ff98 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT5_GPIO_Port, LIGHT5_Pin, RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	4802      	ldr	r0, [pc, #8]	; (8000bac <setTrafficYellow1+0x1c>)
 8000ba4:	f000 ff93 	bl	8001ace <HAL_GPIO_WritePin>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40010c00 	.word	0x40010c00

08000bb0 <setPedLightRed>:
// PED CONTROL
void setPedLightRed()
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_LIGHT1_GPIO_Port, PED_LIGHT1_Pin, RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <setPedLightRed+0x20>)
 8000bbc:	f000 ff87 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_LIGHT2_GPIO_Port, PED_LIGHT2_Pin, SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc6:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <setPedLightRed+0x24>)
 8000bc8:	f000 ff81 	bl	8001ace <HAL_GPIO_WritePin>
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40010c00 	.word	0x40010c00
 8000bd4:	40010800 	.word	0x40010800

08000bd8 <setPedLightGreen>:
{
	HAL_GPIO_WritePin(PED_LIGHT1_GPIO_Port, PED_LIGHT1_Pin, RESET);
	HAL_GPIO_WritePin(PED_LIGHT2_GPIO_Port, PED_LIGHT2_Pin, RESET);
}
void setPedLightGreen()
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_LIGHT1_GPIO_Port, PED_LIGHT1_Pin, SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <setPedLightGreen+0x20>)
 8000be4:	f000 ff73 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_LIGHT2_GPIO_Port, PED_LIGHT2_Pin, RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <setPedLightGreen+0x24>)
 8000bf0:	f000 ff6d 	bl	8001ace <HAL_GPIO_WritePin>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40010c00 	.word	0x40010c00
 8000bfc:	40010800 	.word	0x40010800

08000c00 <setPedLightOff>:
void setPedLightOff()
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_LIGHT1_GPIO_Port, PED_LIGHT1_Pin, SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <setPedLightOff+0x20>)
 8000c0c:	f000 ff5f 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_LIGHT2_GPIO_Port, PED_LIGHT2_Pin, SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c16:	4803      	ldr	r0, [pc, #12]	; (8000c24 <setPedLightOff+0x24>)
 8000c18:	f000 ff59 	bl	8001ace <HAL_GPIO_WritePin>
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40010c00 	.word	0x40010c00
 8000c24:	40010800 	.word	0x40010800

08000c28 <toggleTrafficRed>:
// toggle control
void toggleTrafficRed()
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LIGHT2_GPIO_Port, LIGHT2_Pin);
 8000c2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <toggleTrafficRed+0x1c>)
 8000c32:	f000 ff64 	bl	8001afe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT4_GPIO_Port, LIGHT4_Pin);
 8000c36:	2110      	movs	r1, #16
 8000c38:	4803      	ldr	r0, [pc, #12]	; (8000c48 <toggleTrafficRed+0x20>)
 8000c3a:	f000 ff60 	bl	8001afe <HAL_GPIO_TogglePin>
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40010800 	.word	0x40010800
 8000c48:	40010c00 	.word	0x40010c00

08000c4c <toggleTrafficYellow>:
void toggleTrafficYellow()
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LIGHT2_GPIO_Port, LIGHT2_Pin);
 8000c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c54:	4808      	ldr	r0, [pc, #32]	; (8000c78 <toggleTrafficYellow+0x2c>)
 8000c56:	f000 ff52 	bl	8001afe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT3_GPIO_Port, LIGHT3_Pin);
 8000c5a:	2108      	movs	r1, #8
 8000c5c:	4807      	ldr	r0, [pc, #28]	; (8000c7c <toggleTrafficYellow+0x30>)
 8000c5e:	f000 ff4e 	bl	8001afe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT4_GPIO_Port, LIGHT4_Pin);
 8000c62:	2110      	movs	r1, #16
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <toggleTrafficYellow+0x30>)
 8000c66:	f000 ff4a 	bl	8001afe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT5_GPIO_Port, LIGHT5_Pin);
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <toggleTrafficYellow+0x30>)
 8000c6e:	f000 ff46 	bl	8001afe <HAL_GPIO_TogglePin>
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	40010c00 	.word	0x40010c00

08000c80 <toggleTrafficGreen>:
void toggleTrafficGreen()
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LIGHT3_GPIO_Port, LIGHT3_Pin);
 8000c84:	2108      	movs	r1, #8
 8000c86:	4804      	ldr	r0, [pc, #16]	; (8000c98 <toggleTrafficGreen+0x18>)
 8000c88:	f000 ff39 	bl	8001afe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT5_GPIO_Port, LIGHT5_Pin);
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	4802      	ldr	r0, [pc, #8]	; (8000c98 <toggleTrafficGreen+0x18>)
 8000c90:	f000 ff35 	bl	8001afe <HAL_GPIO_TogglePin>
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40010c00 	.word	0x40010c00

08000c9c <setLedBuffer>:

int led_buffer[4] = {1, 2, 3, 4};
void setLedBuffer(int first_led_time, int second_led_time)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
	led_buffer[0] = first_led_time / 10;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a18      	ldr	r2, [pc, #96]	; (8000d0c <setLedBuffer+0x70>)
 8000caa:	fb82 1203 	smull	r1, r2, r2, r3
 8000cae:	1092      	asrs	r2, r2, #2
 8000cb0:	17db      	asrs	r3, r3, #31
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <setLedBuffer+0x74>)
 8000cb6:	6013      	str	r3, [r2, #0]
	led_buffer[1] = first_led_time % 10;
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <setLedBuffer+0x70>)
 8000cbc:	fb83 2301 	smull	r2, r3, r3, r1
 8000cc0:	109a      	asrs	r2, r3, #2
 8000cc2:	17cb      	asrs	r3, r1, #31
 8000cc4:	1ad2      	subs	r2, r2, r3
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	1aca      	subs	r2, r1, r3
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <setLedBuffer+0x74>)
 8000cd2:	605a      	str	r2, [r3, #4]
	led_buffer[2] = second_led_time / 10;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <setLedBuffer+0x70>)
 8000cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cdc:	1092      	asrs	r2, r2, #2
 8000cde:	17db      	asrs	r3, r3, #31
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <setLedBuffer+0x74>)
 8000ce4:	6093      	str	r3, [r2, #8]
	led_buffer[3] = second_led_time % 10;
 8000ce6:	6839      	ldr	r1, [r7, #0]
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <setLedBuffer+0x70>)
 8000cea:	fb83 2301 	smull	r2, r3, r3, r1
 8000cee:	109a      	asrs	r2, r3, #2
 8000cf0:	17cb      	asrs	r3, r1, #31
 8000cf2:	1ad2      	subs	r2, r2, r3
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	1aca      	subs	r2, r1, r3
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <setLedBuffer+0x74>)
 8000d00:	60da      	str	r2, [r3, #12]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	66666667 	.word	0x66666667
 8000d10:	20000044 	.word	0x20000044

08000d14 <updateLedBuffer>:

void updateLedBuffer()
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
	//TODO
	if(led_buffer[1] <= 0)
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <updateLedBuffer+0x54>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	dc08      	bgt.n	8000d32 <updateLedBuffer+0x1e>
	{
		led_buffer[0]--;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <updateLedBuffer+0x54>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3b01      	subs	r3, #1
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <updateLedBuffer+0x54>)
 8000d28:	6013      	str	r3, [r2, #0]
		led_buffer[1] = 9;
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <updateLedBuffer+0x54>)
 8000d2c:	2209      	movs	r2, #9
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	e004      	b.n	8000d3c <updateLedBuffer+0x28>
	}
	else
	{
		led_buffer[1]--;
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <updateLedBuffer+0x54>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <updateLedBuffer+0x54>)
 8000d3a:	6053      	str	r3, [r2, #4]
	}
	if(led_buffer[3] <= 0)
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <updateLedBuffer+0x54>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	dc08      	bgt.n	8000d56 <updateLedBuffer+0x42>
	{
		led_buffer[2]--;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <updateLedBuffer+0x54>)
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <updateLedBuffer+0x54>)
 8000d4c:	6093      	str	r3, [r2, #8]
		led_buffer[3] = 9;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <updateLedBuffer+0x54>)
 8000d50:	2209      	movs	r2, #9
 8000d52:	60da      	str	r2, [r3, #12]
	}
	else
	{
		led_buffer[3]--;
	}
}
 8000d54:	e004      	b.n	8000d60 <updateLedBuffer+0x4c>
		led_buffer[3]--;
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <updateLedBuffer+0x54>)
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	4a02      	ldr	r2, [pc, #8]	; (8000d68 <updateLedBuffer+0x54>)
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	20000044 	.word	0x20000044

08000d6c <resetInitialState>:

void resetInitialState()
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, PED_LIGHT1_Pin|LIGHT3_Pin|LIGHT4_Pin|LIGHT5_Pin, SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000d76:	480f      	ldr	r0, [pc, #60]	; (8000db4 <resetInitialState+0x48>)
 8000d78:	f000 fea9 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, PED_LIGHT2_Pin|LIGHT2_Pin, SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000d82:	480d      	ldr	r0, [pc, #52]	; (8000db8 <resetInitialState+0x4c>)
 8000d84:	f000 fea3 	bl	8001ace <HAL_GPIO_WritePin>

	timer1_flag = 0;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <resetInitialState+0x50>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <resetInitialState+0x54>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
	timer3_flag = 0;
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <resetInitialState+0x58>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
	timer4_flag = 0;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <resetInitialState+0x5c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]

	isButton1Pressed(); // delete all button_flag
 8000da0:	f7ff fd08 	bl	80007b4 <isButton1Pressed>
	isButton2Pressed();
 8000da4:	f7ff fd24 	bl	80007f0 <isButton2Pressed>
	isButton3Pressed();
 8000da8:	f7ff fd40 	bl	800082c <isButton3Pressed>
	isButton4Pressed();
 8000dac:	f7ff fd5c 	bl	8000868 <isButton4Pressed>
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40010c00 	.word	0x40010c00
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	20000114 	.word	0x20000114
 8000dc0:	20000118 	.word	0x20000118
 8000dc4:	2000011c 	.word	0x2000011c
 8000dc8:	20000120 	.word	0x20000120

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd0:	f000 fb7c 	bl	80014cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd4:	f000 f830 	bl	8000e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd8:	f000 f8b6 	bl	8000f48 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ddc:	f000 f868 	bl	8000eb0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000de0:	4810      	ldr	r0, [pc, #64]	; (8000e24 <main+0x58>)
 8000de2:	f001 fad1 	bl	8002388 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  status = NORMAL_MODE;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <main+0x5c>)
 8000de8:	2215      	movs	r2, #21
 8000dea:	601a      	str	r2, [r3, #0]
  SCH_Add_Task(timerRun, 0, 10); 	// setflag function
 8000dec:	220a      	movs	r2, #10
 8000dee:	2100      	movs	r1, #0
 8000df0:	480e      	ldr	r0, [pc, #56]	; (8000e2c <main+0x60>)
 8000df2:	f000 f927 	bl	8001044 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 10);	// read button flag function every 10 ms
 8000df6:	220a      	movs	r2, #10
 8000df8:	2100      	movs	r1, #0
 8000dfa:	480d      	ldr	r0, [pc, #52]	; (8000e30 <main+0x64>)
 8000dfc:	f000 f922 	bl	8001044 <SCH_Add_Task>
  SCH_Add_Task(PedDurationCount, 0, 1000); // countdown 2 period to turn off ped light
 8000e00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e04:	2100      	movs	r1, #0
 8000e06:	480b      	ldr	r0, [pc, #44]	; (8000e34 <main+0x68>)
 8000e08:	f000 f91c 	bl	8001044 <SCH_Add_Task>
  while (1)
  {
	  FSMNormalModeRun();
 8000e0c:	f7ff fb4c 	bl	80004a8 <FSMNormalModeRun>
	  FSMModificationModeRun();
 8000e10:	f7ff fa64 	bl	80002dc <FSMModificationModeRun>
	  FSMLightModification();
 8000e14:	f7ff f99a 	bl	800014c <FSMLightModification>
	  FSMPedestrianRun();
 8000e18:	f7ff fc72 	bl	8000700 <FSMPedestrianRun>
	  SCH_Dispatch_Tasks();
 8000e1c:	f000 f9a4 	bl	8001168 <SCH_Dispatch_Tasks>
  {
 8000e20:	e7f4      	b.n	8000e0c <main+0x40>
 8000e22:	bf00      	nop
 8000e24:	20000130 	.word	0x20000130
 8000e28:	20000100 	.word	0x20000100
 8000e2c:	0800124d 	.word	0x0800124d
 8000e30:	080008a5 	.word	0x080008a5
 8000e34:	080006dd 	.word	0x080006dd

08000e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b090      	sub	sp, #64	; 0x40
 8000e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3e:	f107 0318 	add.w	r3, r7, #24
 8000e42:	2228      	movs	r2, #40	; 0x28
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fe70 	bl	8002b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e62:	2310      	movs	r3, #16
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fe5e 	bl	8001b30 <HAL_RCC_OscConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e7a:	f000 f8dd 	bl	8001038 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7e:	230f      	movs	r3, #15
 8000e80:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f001 f8ca 	bl	8002030 <HAL_RCC_ClockConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ea2:	f000 f8c9 	bl	8001038 <Error_Handler>
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3740      	adds	r7, #64	; 0x40
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000ece:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000ed6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000eda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000ee4:	2209      	movs	r2, #9
 8000ee6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ef4:	4813      	ldr	r0, [pc, #76]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000ef6:	f001 f9f7 	bl	80022e8 <HAL_TIM_Base_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f00:	f000 f89a 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000f12:	f001 fb8d 	bl	8002630 <HAL_TIM_ConfigClockSource>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f1c:	f000 f88c 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000f2e:	f001 fd59 	bl	80029e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f38:	f000 f87e 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000130 	.word	0x20000130

08000f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <MX_GPIO_Init+0xd0>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a2d      	ldr	r2, [pc, #180]	; (8001018 <MX_GPIO_Init+0xd0>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <MX_GPIO_Init+0xd0>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f74:	4b28      	ldr	r3, [pc, #160]	; (8001018 <MX_GPIO_Init+0xd0>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a27      	ldr	r2, [pc, #156]	; (8001018 <MX_GPIO_Init+0xd0>)
 8000f7a:	f043 0308 	orr.w	r3, r3, #8
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <MX_GPIO_Init+0xd0>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0308 	and.w	r3, r3, #8
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PED_LIGHT1_Pin|LIGHT3_Pin|LIGHT4_Pin|LIGHT5_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000f92:	4822      	ldr	r0, [pc, #136]	; (800101c <MX_GPIO_Init+0xd4>)
 8000f94:	f000 fd9b 	bl	8001ace <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PED_LIGHT2_Pin|LIGHT2_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000f9e:	4820      	ldr	r0, [pc, #128]	; (8001020 <MX_GPIO_Init+0xd8>)
 8000fa0:	f000 fd95 	bl	8001ace <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PED_BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = PED_BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000fa4:	2313      	movs	r3, #19
 8000fa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	481a      	ldr	r0, [pc, #104]	; (8001020 <MX_GPIO_Init+0xd8>)
 8000fb8:	f000 fbf8 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4813      	ldr	r0, [pc, #76]	; (800101c <MX_GPIO_Init+0xd4>)
 8000fd0:	f000 fbec 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_LIGHT1_Pin LIGHT3_Pin LIGHT4_Pin LIGHT5_Pin */
  GPIO_InitStruct.Pin = PED_LIGHT1_Pin|LIGHT3_Pin|LIGHT4_Pin|LIGHT5_Pin;
 8000fd4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000fd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	4619      	mov	r1, r3
 8000fec:	480b      	ldr	r0, [pc, #44]	; (800101c <MX_GPIO_Init+0xd4>)
 8000fee:	f000 fbdd 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_LIGHT2_Pin LIGHT2_Pin */
  GPIO_InitStruct.Pin = PED_LIGHT2_Pin|LIGHT2_Pin;
 8000ff2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000ff6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2302      	movs	r3, #2
 8001002:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	4619      	mov	r1, r3
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_GPIO_Init+0xd8>)
 800100c:	f000 fbce 	bl	80017ac <HAL_GPIO_Init>

}
 8001010:	bf00      	nop
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40021000 	.word	0x40021000
 800101c:	40010c00 	.word	0x40010c00
 8001020:	40010800 	.word	0x40010800

08001024 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 800102c:	f000 f874 	bl	8001118 <SCH_Update>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	e7fe      	b.n	8001040 <Error_Handler+0x8>
	...

08001044 <SCH_Add_Task>:
{
    struct task *top;
} stack_task;

void SCH_Add_Task(void (*pTask)(), uint16_t delay, uint16_t period)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
 8001050:	4613      	mov	r3, r2
 8001052:	803b      	strh	r3, [r7, #0]
    struct task *my_task = (struct task *)malloc(sizeof(struct task));
 8001054:	200c      	movs	r0, #12
 8001056:	f001 fd59 	bl	8002b0c <malloc>
 800105a:	4603      	mov	r3, r0
 800105c:	60fb      	str	r3, [r7, #12]
    my_task->pTask = pTask;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	601a      	str	r2, [r3, #0]
    my_task->counter = delay *FREQ_OF_TIM/1000;
 8001064:	887b      	ldrh	r3, [r7, #2]
 8001066:	4a2a      	ldr	r2, [pc, #168]	; (8001110 <SCH_Add_Task+0xcc>)
 8001068:	fb82 1203 	smull	r1, r2, r2, r3
 800106c:	1092      	asrs	r2, r2, #2
 800106e:	17db      	asrs	r3, r3, #31
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	b29a      	uxth	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	809a      	strh	r2, [r3, #4]
    my_task->period = period;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	883a      	ldrh	r2, [r7, #0]
 800107c:	80da      	strh	r2, [r3, #6]
    my_task->next_task = 0;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
    if (stack_task.top == 0)
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <SCH_Add_Task+0xd0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d103      	bne.n	8001094 <SCH_Add_Task+0x50>
    {
        stack_task.top = my_task;
 800108c:	4a21      	ldr	r2, [pc, #132]	; (8001114 <SCH_Add_Task+0xd0>)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6013      	str	r3, [r2, #0]
        return;
 8001092:	e039      	b.n	8001108 <SCH_Add_Task+0xc4>
    }
    struct task *pre = stack_task.top;
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <SCH_Add_Task+0xd0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	617b      	str	r3, [r7, #20]
    struct task *cur = stack_task.top;
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <SCH_Add_Task+0xd0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	613b      	str	r3, [r7, #16]
    while (cur && my_task->counter >= cur->counter)
 80010a0:	e00c      	b.n	80010bc <SCH_Add_Task+0x78>
    {
        my_task->counter = my_task->counter - cur->counter;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	889a      	ldrh	r2, [r3, #4]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	889b      	ldrh	r3, [r3, #4]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	809a      	strh	r2, [r3, #4]
        pre = cur;
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	617b      	str	r3, [r7, #20]
        cur = cur->next_task;
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	613b      	str	r3, [r7, #16]
    while (cur && my_task->counter >= cur->counter)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d005      	beq.n	80010ce <SCH_Add_Task+0x8a>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	889a      	ldrh	r2, [r3, #4]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	889b      	ldrh	r3, [r3, #4]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d2e9      	bcs.n	80010a2 <SCH_Add_Task+0x5e>
    }
    if (pre != cur)
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d006      	beq.n	80010e4 <SCH_Add_Task+0xa0>
    {
        pre->next_task = my_task;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	609a      	str	r2, [r3, #8]
        my_task->next_task = cur;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	e005      	b.n	80010f0 <SCH_Add_Task+0xac>
    }
    else
    {
        my_task->next_task = cur;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	609a      	str	r2, [r3, #8]
        stack_task.top = my_task;
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SCH_Add_Task+0xd0>)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6013      	str	r3, [r2, #0]
    }
    if (cur)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d007      	beq.n	8001106 <SCH_Add_Task+0xc2>
        cur->counter -= my_task->counter;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	889a      	ldrh	r2, [r3, #4]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	889b      	ldrh	r3, [r3, #4]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b29a      	uxth	r2, r3
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	809a      	strh	r2, [r3, #4]
    return;
 8001106:	bf00      	nop
}
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	66666667 	.word	0x66666667
 8001114:	20000178 	.word	0x20000178

08001118 <SCH_Update>:

void SCH_Update(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
    if (stack_task.top == 0)
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <SCH_Update+0x2c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00b      	beq.n	800113c <SCH_Update+0x24>
        return;
    if (stack_task.top->counter > 0)
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <SCH_Update+0x2c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	889b      	ldrh	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d007      	beq.n	800113e <SCH_Update+0x26>
    {
        stack_task.top->counter--;
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <SCH_Update+0x2c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	889a      	ldrh	r2, [r3, #4]
 8001134:	3a01      	subs	r2, #1
 8001136:	b292      	uxth	r2, r2
 8001138:	809a      	strh	r2, [r3, #4]
 800113a:	e000      	b.n	800113e <SCH_Update+0x26>
        return;
 800113c:	bf00      	nop
    }
}
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	20000178 	.word	0x20000178

08001148 <SCH_Delete_Task>:

void SCH_Delete_Task(struct task *del_task)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    if (del_task == 0)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <SCH_Delete_Task+0x16>
    {
        return;
    }
    free(del_task);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f001 fce0 	bl	8002b1c <free>
 800115c:	e000      	b.n	8001160 <SCH_Delete_Task+0x18>
        return;
 800115e:	bf00      	nop
}
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
    if (stack_task.top == 0)
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <SCH_Dispatch_Tasks+0x64>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d024      	beq.n	80011c0 <SCH_Dispatch_Tasks+0x58>
        return;
    if (stack_task.top->counter == 0)
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <SCH_Dispatch_Tasks+0x64>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	889b      	ldrh	r3, [r3, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d121      	bne.n	80011c4 <SCH_Dispatch_Tasks+0x5c>
    {
        (*stack_task.top->pTask)();
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <SCH_Dispatch_Tasks+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4798      	blx	r3
        struct task *temp = stack_task.top;
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <SCH_Dispatch_Tasks+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	607b      	str	r3, [r7, #4]
        stack_task.top = stack_task.top->next_task;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <SCH_Dispatch_Tasks+0x64>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <SCH_Dispatch_Tasks+0x64>)
 8001196:	6013      	str	r3, [r2, #0]
        temp->next_task = 0;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
        if (temp->period != 0)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	88db      	ldrh	r3, [r3, #6]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d008      	beq.n	80011b8 <SCH_Dispatch_Tasks+0x50>
        {
            SCH_Add_Task(temp->pTask, temp->period, temp->period);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	88d9      	ldrh	r1, [r3, #6]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	88db      	ldrh	r3, [r3, #6]
 80011b2:	461a      	mov	r2, r3
 80011b4:	f7ff ff46 	bl	8001044 <SCH_Add_Task>
        }
        SCH_Delete_Task(temp);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ffc5 	bl	8001148 <SCH_Delete_Task>
        return;
 80011be:	e002      	b.n	80011c6 <SCH_Dispatch_Tasks+0x5e>
        return;
 80011c0:	bf00      	nop
 80011c2:	e000      	b.n	80011c6 <SCH_Dispatch_Tasks+0x5e>
    }
    return;
 80011c4:	bf00      	nop
}
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000178 	.word	0x20000178

080011d0 <setTimer1>:


int timer1_counter = 0;
int timer1_flag = 0;
void setTimer1(int duration) // THIS TIMER ONLY USE FOR SET FLAG TRAFFICLIGHT (already multiple for 100)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration*100;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2264      	movs	r2, #100	; 0x64
 80011dc:	fb02 f303 	mul.w	r3, r2, r3
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <setTimer1+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <setTimer1+0x28>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	20000104 	.word	0x20000104
 80011f8:	20000114 	.word	0x20000114

080011fc <setTimer3>:
}

int timer3_counter = 0;
int timer3_flag = 0;
void setTimer3(int duration3) // THIS TIMER ONLY USE FOR SET FLAG TRAFFICLIGHT
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	timer3_counter = duration3;
 8001204:	4a05      	ldr	r2, [pc, #20]	; (800121c <setTimer3+0x20>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800120a:	4b05      	ldr	r3, [pc, #20]	; (8001220 <setTimer3+0x24>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	2000010c 	.word	0x2000010c
 8001220:	2000011c 	.word	0x2000011c

08001224 <setTimer4>:

int timer4_counter = 0;
int timer4_flag = 0;
void setTimer4(int duration4)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	timer4_counter = duration4;
 800122c:	4a05      	ldr	r2, [pc, #20]	; (8001244 <setTimer4+0x20>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <setTimer4+0x24>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000110 	.word	0x20000110
 8001248:	20000120 	.word	0x20000120

0800124c <timerRun>:


void timerRun()
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <timerRun+0x8c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	dd0b      	ble.n	8001270 <timerRun+0x24>
	{
		timer1_counter--;
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <timerRun+0x8c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3b01      	subs	r3, #1
 800125e:	4a1e      	ldr	r2, [pc, #120]	; (80012d8 <timerRun+0x8c>)
 8001260:	6013      	str	r3, [r2, #0]

		if(timer1_counter <= 0)
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <timerRun+0x8c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	dc02      	bgt.n	8001270 <timerRun+0x24>
		{
			timer1_flag = 1;
 800126a:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <timerRun+0x90>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0)
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <timerRun+0x94>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	dd0b      	ble.n	8001290 <timerRun+0x44>
	{
		timer2_counter--;//counter led 7 segment
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <timerRun+0x94>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3b01      	subs	r3, #1
 800127e:	4a18      	ldr	r2, [pc, #96]	; (80012e0 <timerRun+0x94>)
 8001280:	6013      	str	r3, [r2, #0]

		if(timer2_counter <= 0) // counter led 7 segment
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <timerRun+0x94>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	dc02      	bgt.n	8001290 <timerRun+0x44>
		{
			timer2_flag = 1;
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <timerRun+0x98>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0)
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <timerRun+0x9c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	dd0b      	ble.n	80012b0 <timerRun+0x64>
	{
		timer3_counter--;
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <timerRun+0x9c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3b01      	subs	r3, #1
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <timerRun+0x9c>)
 80012a0:	6013      	str	r3, [r2, #0]

		if(timer3_counter <= 0)
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <timerRun+0x9c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	dc02      	bgt.n	80012b0 <timerRun+0x64>
		{
			timer3_flag = 1;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <timerRun+0xa0>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0)
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <timerRun+0xa4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	dd0b      	ble.n	80012d0 <timerRun+0x84>
	{
		timer4_counter--;
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <timerRun+0xa4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3b01      	subs	r3, #1
 80012be:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <timerRun+0xa4>)
 80012c0:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0)
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <timerRun+0xa4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	dc02      	bgt.n	80012d0 <timerRun+0x84>
		{
			timer4_flag = 1;
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <timerRun+0xa8>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
		}
	}

}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	20000104 	.word	0x20000104
 80012dc:	20000114 	.word	0x20000114
 80012e0:	20000108 	.word	0x20000108
 80012e4:	20000118 	.word	0x20000118
 80012e8:	2000010c 	.word	0x2000010c
 80012ec:	2000011c 	.word	0x2000011c
 80012f0:	20000110 	.word	0x20000110
 80012f4:	20000120 	.word	0x20000120

080012f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_MspInit+0x5c>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	4a14      	ldr	r2, [pc, #80]	; (8001354 <HAL_MspInit+0x5c>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6193      	str	r3, [r2, #24]
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_MspInit+0x5c>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_MspInit+0x5c>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <HAL_MspInit+0x5c>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	61d3      	str	r3, [r2, #28]
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_MspInit+0x5c>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_MspInit+0x60>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <HAL_MspInit+0x60>)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	bf00      	nop
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	40021000 	.word	0x40021000
 8001358:	40010000 	.word	0x40010000

0800135c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800136c:	d113      	bne.n	8001396 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_TIM_Base_MspInit+0x44>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <HAL_TIM_Base_MspInit+0x44>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_TIM_Base_MspInit+0x44>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	201c      	movs	r0, #28
 800138c:	f000 f9d7 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001390:	201c      	movs	r0, #28
 8001392:	f000 f9f0 	bl	8001776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <NMI_Handler+0x4>

080013aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ea:	f000 f8b5 	bl	8001558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <TIM2_IRQHandler+0x10>)
 80013fa:	f001 f811 	bl	8002420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000130 	.word	0x20000130

08001408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <_sbrk+0x5c>)
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <_sbrk+0x60>)
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <_sbrk+0x64>)
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <_sbrk+0x68>)
 8001428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	429a      	cmp	r2, r3
 8001436:	d207      	bcs.n	8001448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001438:	f001 fb3e 	bl	8002ab8 <__errno>
 800143c:	4603      	mov	r3, r0
 800143e:	220c      	movs	r2, #12
 8001440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	e009      	b.n	800145c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <_sbrk+0x64>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <_sbrk+0x64>)
 8001458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145a:	68fb      	ldr	r3, [r7, #12]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20002800 	.word	0x20002800
 8001468:	00000400 	.word	0x00000400
 800146c:	20000124 	.word	0x20000124
 8001470:	20000190 	.word	0x20000190

08001474 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <Reset_Handler>:
 8001480:	f7ff fff8 	bl	8001474 <SystemInit>
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <LoopFillZerobss+0xe>)
 8001486:	490c      	ldr	r1, [pc, #48]	; (80014b8 <LoopFillZerobss+0x12>)
 8001488:	4a0c      	ldr	r2, [pc, #48]	; (80014bc <LoopFillZerobss+0x16>)
 800148a:	2300      	movs	r3, #0
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:
 800148e:	58d4      	ldr	r4, [r2, r3]
 8001490:	50c4      	str	r4, [r0, r3]
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:
 8001494:	18c4      	adds	r4, r0, r3
 8001496:	428c      	cmp	r4, r1
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
 800149a:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <LoopFillZerobss+0x1a>)
 800149c:	4c09      	ldr	r4, [pc, #36]	; (80014c4 <LoopFillZerobss+0x1e>)
 800149e:	2300      	movs	r3, #0
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:
 80014a6:	42a2      	cmp	r2, r4
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>
 80014aa:	f001 fb0b 	bl	8002ac4 <__libc_init_array>
 80014ae:	f7ff fc8d 	bl	8000dcc <main>
 80014b2:	4770      	bx	lr
 80014b4:	20000000 	.word	0x20000000
 80014b8:	200000d0 	.word	0x200000d0
 80014bc:	08002d08 	.word	0x08002d08
 80014c0:	200000d0 	.word	0x200000d0
 80014c4:	20000190 	.word	0x20000190

080014c8 <ADC1_2_IRQHandler>:
 80014c8:	e7fe      	b.n	80014c8 <ADC1_2_IRQHandler>
	...

080014cc <HAL_Init>:
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <HAL_Init+0x28>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <HAL_Init+0x28>)
 80014d6:	f043 0310 	orr.w	r3, r3, #16
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 f923 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>
 80014e2:	200f      	movs	r0, #15
 80014e4:	f000 f808 	bl	80014f8 <HAL_InitTick>
 80014e8:	f7ff ff06 	bl	80012f8 <HAL_MspInit>
 80014ec:	2300      	movs	r3, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40022000 	.word	0x40022000

080014f8 <HAL_InitTick>:
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_InitTick+0x54>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_InitTick+0x58>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001512:	fbb2 f3f3 	udiv	r3, r2, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f93b 	bl	8001792 <HAL_SYSTICK_Config>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_InitTick+0x2e>
 8001522:	2301      	movs	r3, #1
 8001524:	e00e      	b.n	8001544 <HAL_InitTick+0x4c>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b0f      	cmp	r3, #15
 800152a:	d80a      	bhi.n	8001542 <HAL_InitTick+0x4a>
 800152c:	2200      	movs	r2, #0
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f000 f903 	bl	800173e <HAL_NVIC_SetPriority>
 8001538:	4a06      	ldr	r2, [pc, #24]	; (8001554 <HAL_InitTick+0x5c>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	2300      	movs	r3, #0
 8001540:	e000      	b.n	8001544 <HAL_InitTick+0x4c>
 8001542:	2301      	movs	r3, #1
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000060 	.word	0x20000060
 8001550:	20000068 	.word	0x20000068
 8001554:	20000064 	.word	0x20000064

08001558 <HAL_IncTick>:
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_IncTick+0x1c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_IncTick+0x20>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a03      	ldr	r2, [pc, #12]	; (8001578 <HAL_IncTick+0x20>)
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	20000068 	.word	0x20000068
 8001578:	2000017c 	.word	0x2000017c

0800157c <HAL_GetTick>:
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
 8001580:	4b02      	ldr	r3, [pc, #8]	; (800158c <HAL_GetTick+0x10>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	2000017c 	.word	0x2000017c

08001590 <__NVIC_SetPriorityGrouping>:
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60d3      	str	r3, [r2, #12]
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_GetPriorityGrouping>:
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_EnableIRQ>:
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db0b      	blt.n	800161e <__NVIC_EnableIRQ+0x2a>
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	4906      	ldr	r1, [pc, #24]	; (8001628 <__NVIC_EnableIRQ+0x34>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	2001      	movs	r0, #1
 8001616:	fa00 f202 	lsl.w	r2, r0, r2
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100

0800162c <__NVIC_SetPriority>:
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db0a      	blt.n	8001656 <__NVIC_SetPriority+0x2a>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	490c      	ldr	r1, [pc, #48]	; (8001678 <__NVIC_SetPriority+0x4c>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	440b      	add	r3, r1
 8001650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001654:	e00a      	b.n	800166c <__NVIC_SetPriority+0x40>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <__NVIC_SetPriority+0x50>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	3b04      	subs	r3, #4
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	440b      	add	r3, r1
 800166a:	761a      	strb	r2, [r3, #24]
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <NVIC_EncodePriority>:
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f1c3 0307 	rsb	r3, r3, #7
 800169a:	2b04      	cmp	r3, #4
 800169c:	bf28      	it	cs
 800169e:	2304      	movcs	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3304      	adds	r3, #4
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d902      	bls.n	80016b0 <NVIC_EncodePriority+0x30>
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3b03      	subs	r3, #3
 80016ae:	e000      	b.n	80016b2 <NVIC_EncodePriority+0x32>
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	401a      	ands	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	400b      	ands	r3, r1
 80016d8:	4313      	orrs	r3, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <SysTick_Config>:
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f7ff ff90 	bl	800162c <__NVIC_SetPriority>
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	2300      	movs	r3, #0
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff2d 	bl	8001590 <__NVIC_SetPriorityGrouping>
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	f7ff ff42 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff90 	bl	8001680 <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5f 	bl	800162c <__NVIC_SetPriority>
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_EnableIRQ>:
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	71fb      	strb	r3, [r7, #7]
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff35 	bl	80015f4 <__NVIC_EnableIRQ>
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffa2 	bl	80016e4 <SysTick_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_GPIO_Init>:
 80017ac:	b480      	push	{r7}
 80017ae:	b08b      	sub	sp, #44	; 0x2c
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
 80017be:	e148      	b.n	8001a52 <HAL_GPIO_Init+0x2a6>
 80017c0:	2201      	movs	r2, #1
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	429a      	cmp	r2, r3
 80017da:	f040 8137 	bne.w	8001a4c <HAL_GPIO_Init+0x2a0>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4aa3      	ldr	r2, [pc, #652]	; (8001a70 <HAL_GPIO_Init+0x2c4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d05e      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 80017e8:	4aa1      	ldr	r2, [pc, #644]	; (8001a70 <HAL_GPIO_Init+0x2c4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d875      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 80017ee:	4aa1      	ldr	r2, [pc, #644]	; (8001a74 <HAL_GPIO_Init+0x2c8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d058      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 80017f4:	4a9f      	ldr	r2, [pc, #636]	; (8001a74 <HAL_GPIO_Init+0x2c8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d86f      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 80017fa:	4a9f      	ldr	r2, [pc, #636]	; (8001a78 <HAL_GPIO_Init+0x2cc>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d052      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 8001800:	4a9d      	ldr	r2, [pc, #628]	; (8001a78 <HAL_GPIO_Init+0x2cc>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d869      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001806:	4a9d      	ldr	r2, [pc, #628]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d04c      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 800180c:	4a9b      	ldr	r2, [pc, #620]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d863      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001812:	4a9b      	ldr	r2, [pc, #620]	; (8001a80 <HAL_GPIO_Init+0x2d4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d046      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 8001818:	4a99      	ldr	r2, [pc, #612]	; (8001a80 <HAL_GPIO_Init+0x2d4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d85d      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 800181e:	2b12      	cmp	r3, #18
 8001820:	d82a      	bhi.n	8001878 <HAL_GPIO_Init+0xcc>
 8001822:	2b12      	cmp	r3, #18
 8001824:	d859      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001826:	a201      	add	r2, pc, #4	; (adr r2, 800182c <HAL_GPIO_Init+0x80>)
 8001828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182c:	080018a7 	.word	0x080018a7
 8001830:	08001881 	.word	0x08001881
 8001834:	08001893 	.word	0x08001893
 8001838:	080018d5 	.word	0x080018d5
 800183c:	080018db 	.word	0x080018db
 8001840:	080018db 	.word	0x080018db
 8001844:	080018db 	.word	0x080018db
 8001848:	080018db 	.word	0x080018db
 800184c:	080018db 	.word	0x080018db
 8001850:	080018db 	.word	0x080018db
 8001854:	080018db 	.word	0x080018db
 8001858:	080018db 	.word	0x080018db
 800185c:	080018db 	.word	0x080018db
 8001860:	080018db 	.word	0x080018db
 8001864:	080018db 	.word	0x080018db
 8001868:	080018db 	.word	0x080018db
 800186c:	080018db 	.word	0x080018db
 8001870:	08001889 	.word	0x08001889
 8001874:	0800189d 	.word	0x0800189d
 8001878:	4a82      	ldr	r2, [pc, #520]	; (8001a84 <HAL_GPIO_Init+0x2d8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d013      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 800187e:	e02c      	b.n	80018da <HAL_GPIO_Init+0x12e>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	623b      	str	r3, [r7, #32]
 8001886:	e029      	b.n	80018dc <HAL_GPIO_Init+0x130>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	3304      	adds	r3, #4
 800188e:	623b      	str	r3, [r7, #32]
 8001890:	e024      	b.n	80018dc <HAL_GPIO_Init+0x130>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	3308      	adds	r3, #8
 8001898:	623b      	str	r3, [r7, #32]
 800189a:	e01f      	b.n	80018dc <HAL_GPIO_Init+0x130>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	330c      	adds	r3, #12
 80018a2:	623b      	str	r3, [r7, #32]
 80018a4:	e01a      	b.n	80018dc <HAL_GPIO_Init+0x130>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <HAL_GPIO_Init+0x108>
 80018ae:	2304      	movs	r3, #4
 80018b0:	623b      	str	r3, [r7, #32]
 80018b2:	e013      	b.n	80018dc <HAL_GPIO_Init+0x130>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_GPIO_Init+0x11c>
 80018bc:	2308      	movs	r3, #8
 80018be:	623b      	str	r3, [r7, #32]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	e009      	b.n	80018dc <HAL_GPIO_Init+0x130>
 80018c8:	2308      	movs	r3, #8
 80018ca:	623b      	str	r3, [r7, #32]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	615a      	str	r2, [r3, #20]
 80018d2:	e003      	b.n	80018dc <HAL_GPIO_Init+0x130>
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
 80018d8:	e000      	b.n	80018dc <HAL_GPIO_Init+0x130>
 80018da:	bf00      	nop
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2bff      	cmp	r3, #255	; 0xff
 80018e0:	d801      	bhi.n	80018e6 <HAL_GPIO_Init+0x13a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	e001      	b.n	80018ea <HAL_GPIO_Init+0x13e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3304      	adds	r3, #4
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2bff      	cmp	r3, #255	; 0xff
 80018f0:	d802      	bhi.n	80018f8 <HAL_GPIO_Init+0x14c>
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	e002      	b.n	80018fe <HAL_GPIO_Init+0x152>
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	3b08      	subs	r3, #8
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	210f      	movs	r1, #15
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	6a39      	ldr	r1, [r7, #32]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	431a      	orrs	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8090 	beq.w	8001a4c <HAL_GPIO_Init+0x2a0>
 800192c:	4b56      	ldr	r3, [pc, #344]	; (8001a88 <HAL_GPIO_Init+0x2dc>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a55      	ldr	r2, [pc, #340]	; (8001a88 <HAL_GPIO_Init+0x2dc>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_GPIO_Init+0x2dc>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	4a51      	ldr	r2, [pc, #324]	; (8001a8c <HAL_GPIO_Init+0x2e0>)
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	220f      	movs	r2, #15
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a49      	ldr	r2, [pc, #292]	; (8001a90 <HAL_GPIO_Init+0x2e4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d00d      	beq.n	800198c <HAL_GPIO_Init+0x1e0>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a48      	ldr	r2, [pc, #288]	; (8001a94 <HAL_GPIO_Init+0x2e8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d007      	beq.n	8001988 <HAL_GPIO_Init+0x1dc>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a47      	ldr	r2, [pc, #284]	; (8001a98 <HAL_GPIO_Init+0x2ec>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_GPIO_Init+0x1d8>
 8001980:	2302      	movs	r3, #2
 8001982:	e004      	b.n	800198e <HAL_GPIO_Init+0x1e2>
 8001984:	2303      	movs	r3, #3
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0x1e2>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_GPIO_Init+0x1e2>
 800198c:	2300      	movs	r3, #0
 800198e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001990:	f002 0203 	and.w	r2, r2, #3
 8001994:	0092      	lsls	r2, r2, #2
 8001996:	4093      	lsls	r3, r2
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	493b      	ldr	r1, [pc, #236]	; (8001a8c <HAL_GPIO_Init+0x2e0>)
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_GPIO_Init+0x21a>
 80019b8:	4b38      	ldr	r3, [pc, #224]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	4937      	ldr	r1, [pc, #220]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	608b      	str	r3, [r1, #8]
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x228>
 80019c6:	4b35      	ldr	r3, [pc, #212]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4933      	ldr	r1, [pc, #204]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <HAL_GPIO_Init+0x242>
 80019e0:	4b2e      	ldr	r3, [pc, #184]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	492d      	ldr	r1, [pc, #180]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60cb      	str	r3, [r1, #12]
 80019ec:	e006      	b.n	80019fc <HAL_GPIO_Init+0x250>
 80019ee:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	4929      	ldr	r1, [pc, #164]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	60cb      	str	r3, [r1, #12]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <HAL_GPIO_Init+0x26a>
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	4923      	ldr	r1, [pc, #140]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x278>
 8001a16:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	491f      	ldr	r1, [pc, #124]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d006      	beq.n	8001a3e <HAL_GPIO_Init+0x292>
 8001a30:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4919      	ldr	r1, [pc, #100]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]
 8001a3c:	e006      	b.n	8001a4c <HAL_GPIO_Init+0x2a0>
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	4915      	ldr	r1, [pc, #84]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	3301      	adds	r3, #1
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f47f aeaf 	bne.w	80017c0 <HAL_GPIO_Init+0x14>
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	372c      	adds	r7, #44	; 0x2c
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	10320000 	.word	0x10320000
 8001a74:	10310000 	.word	0x10310000
 8001a78:	10220000 	.word	0x10220000
 8001a7c:	10210000 	.word	0x10210000
 8001a80:	10120000 	.word	0x10120000
 8001a84:	10110000 	.word	0x10110000
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	40010800 	.word	0x40010800
 8001a94:	40010c00 	.word	0x40010c00
 8001a98:	40011000 	.word	0x40011000
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_GPIO_ReadPin>:
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <HAL_GPIO_ReadPin+0x1e>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	e001      	b.n	8001ac2 <HAL_GPIO_ReadPin+0x22>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	73fb      	strb	r3, [r7, #15]
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <HAL_GPIO_WritePin>:
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	807b      	strh	r3, [r7, #2]
 8001ada:	4613      	mov	r3, r2
 8001adc:	707b      	strb	r3, [r7, #1]
 8001ade:	787b      	ldrb	r3, [r7, #1]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_WritePin+0x1e>
 8001ae4:	887a      	ldrh	r2, [r7, #2]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	611a      	str	r2, [r3, #16]
 8001aea:	e003      	b.n	8001af4 <HAL_GPIO_WritePin+0x26>
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	041a      	lsls	r2, r3, #16
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	611a      	str	r2, [r3, #16]
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <HAL_GPIO_TogglePin>:
 8001afe:	b480      	push	{r7}
 8001b00:	b085      	sub	sp, #20
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	460b      	mov	r3, r1
 8001b08:	807b      	strh	r3, [r7, #2]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	887a      	ldrh	r2, [r7, #2]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4013      	ands	r3, r2
 8001b16:	041a      	lsls	r2, r3, #16
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	887b      	ldrh	r3, [r7, #2]
 8001b1e:	400b      	ands	r3, r1
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	611a      	str	r2, [r3, #16]
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <HAL_RCC_OscConfig>:
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_OscConfig+0x12>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e26c      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8087 	beq.w	8001c5e <HAL_RCC_OscConfig+0x12e>
 8001b50:	4b92      	ldr	r3, [pc, #584]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d00c      	beq.n	8001b76 <HAL_RCC_OscConfig+0x46>
 8001b5c:	4b8f      	ldr	r3, [pc, #572]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d112      	bne.n	8001b8e <HAL_RCC_OscConfig+0x5e>
 8001b68:	4b8c      	ldr	r3, [pc, #560]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b74:	d10b      	bne.n	8001b8e <HAL_RCC_OscConfig+0x5e>
 8001b76:	4b89      	ldr	r3, [pc, #548]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d06c      	beq.n	8001c5c <HAL_RCC_OscConfig+0x12c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d168      	bne.n	8001c5c <HAL_RCC_OscConfig+0x12c>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e246      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x76>
 8001b98:	4b80      	ldr	r3, [pc, #512]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a7f      	ldr	r2, [pc, #508]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e02e      	b.n	8001c04 <HAL_RCC_OscConfig+0xd4>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x98>
 8001bae:	4b7b      	ldr	r3, [pc, #492]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a7a      	ldr	r2, [pc, #488]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b78      	ldr	r3, [pc, #480]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a77      	ldr	r2, [pc, #476]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e01d      	b.n	8001c04 <HAL_RCC_OscConfig+0xd4>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0xbc>
 8001bd2:	4b72      	ldr	r3, [pc, #456]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a71      	ldr	r2, [pc, #452]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	4b6f      	ldr	r3, [pc, #444]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a6e      	ldr	r2, [pc, #440]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0xd4>
 8001bec:	4b6b      	ldr	r3, [pc, #428]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a6a      	ldr	r2, [pc, #424]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b68      	ldr	r3, [pc, #416]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a67      	ldr	r2, [pc, #412]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d013      	beq.n	8001c34 <HAL_RCC_OscConfig+0x104>
 8001c0c:	f7ff fcb6 	bl	800157c <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0xf6>
 8001c14:	f7ff fcb2 	bl	800157c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0xf6>
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1fa      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001c26:	4b5d      	ldr	r3, [pc, #372]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0xe4>
 8001c32:	e014      	b.n	8001c5e <HAL_RCC_OscConfig+0x12e>
 8001c34:	f7ff fca2 	bl	800157c <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x11e>
 8001c3c:	f7ff fc9e 	bl	800157c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x11e>
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e1e6      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001c4e:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x10c>
 8001c5a:	e000      	b.n	8001c5e <HAL_RCC_OscConfig+0x12e>
 8001c5c:	bf00      	nop
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d063      	beq.n	8001d32 <HAL_RCC_OscConfig+0x202>
 8001c6a:	4b4c      	ldr	r3, [pc, #304]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00b      	beq.n	8001c8e <HAL_RCC_OscConfig+0x15e>
 8001c76:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d11c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x18c>
 8001c82:	4b46      	ldr	r3, [pc, #280]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d116      	bne.n	8001cbc <HAL_RCC_OscConfig+0x18c>
 8001c8e:	4b43      	ldr	r3, [pc, #268]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d005      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x176>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x176>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e1ba      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001ca6:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4939      	ldr	r1, [pc, #228]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]
 8001cba:	e03a      	b.n	8001d32 <HAL_RCC_OscConfig+0x202>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d020      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1d6>
 8001cc4:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	f7ff fc57 	bl	800157c <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x1b4>
 8001cd2:	f7ff fc53 	bl	800157c <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x1b4>
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e19b      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001ce4:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x1a2>
 8001cf0:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4927      	ldr	r1, [pc, #156]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	600b      	str	r3, [r1, #0]
 8001d04:	e015      	b.n	8001d32 <HAL_RCC_OscConfig+0x202>
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	f7ff fc36 	bl	800157c <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x1f6>
 8001d14:	f7ff fc32 	bl	800157c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x1f6>
 8001d22:	2303      	movs	r3, #3
 8001d24:	e17a      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001d26:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x1e4>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d03a      	beq.n	8001db4 <HAL_RCC_OscConfig+0x284>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d019      	beq.n	8001d7a <HAL_RCC_OscConfig+0x24a>
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <HAL_RCC_OscConfig+0x274>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	f7ff fc16 	bl	800157c <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x236>
 8001d54:	f7ff fc12 	bl	800157c <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x236>
 8001d62:	2303      	movs	r3, #3
 8001d64:	e15a      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x224>
 8001d72:	2001      	movs	r0, #1
 8001d74:	f000 fa9a 	bl	80022ac <RCC_Delay>
 8001d78:	e01c      	b.n	8001db4 <HAL_RCC_OscConfig+0x284>
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	f7ff fbfc 	bl	800157c <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]
 8001d86:	e00f      	b.n	8001da8 <HAL_RCC_OscConfig+0x278>
 8001d88:	f7ff fbf8 	bl	800157c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d908      	bls.n	8001da8 <HAL_RCC_OscConfig+0x278>
 8001d96:	2303      	movs	r3, #3
 8001d98:	e140      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	42420000 	.word	0x42420000
 8001da4:	42420480 	.word	0x42420480
 8001da8:	4b9e      	ldr	r3, [pc, #632]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e9      	bne.n	8001d88 <HAL_RCC_OscConfig+0x258>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80a6 	beq.w	8001f0e <HAL_RCC_OscConfig+0x3de>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	75fb      	strb	r3, [r7, #23]
 8001dc6:	4b97      	ldr	r3, [pc, #604]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10d      	bne.n	8001dee <HAL_RCC_OscConfig+0x2be>
 8001dd2:	4b94      	ldr	r3, [pc, #592]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	4a93      	ldr	r2, [pc, #588]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	61d3      	str	r3, [r2, #28]
 8001dde:	4b91      	ldr	r3, [pc, #580]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2301      	movs	r3, #1
 8001dec:	75fb      	strb	r3, [r7, #23]
 8001dee:	4b8e      	ldr	r3, [pc, #568]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d118      	bne.n	8001e2c <HAL_RCC_OscConfig+0x2fc>
 8001dfa:	4b8b      	ldr	r3, [pc, #556]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a8a      	ldr	r2, [pc, #552]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	f7ff fbb9 	bl	800157c <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x2f0>
 8001e0e:	f7ff fbb5 	bl	800157c <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b64      	cmp	r3, #100	; 0x64
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x2f0>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e0fd      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001e20:	4b81      	ldr	r3, [pc, #516]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x2de>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x312>
 8001e34:	4b7b      	ldr	r3, [pc, #492]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4a7a      	ldr	r2, [pc, #488]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6213      	str	r3, [r2, #32]
 8001e40:	e02d      	b.n	8001e9e <HAL_RCC_OscConfig+0x36e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x334>
 8001e4a:	4b76      	ldr	r3, [pc, #472]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4a75      	ldr	r2, [pc, #468]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	6213      	str	r3, [r2, #32]
 8001e56:	4b73      	ldr	r3, [pc, #460]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a72      	ldr	r2, [pc, #456]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	f023 0304 	bic.w	r3, r3, #4
 8001e60:	6213      	str	r3, [r2, #32]
 8001e62:	e01c      	b.n	8001e9e <HAL_RCC_OscConfig+0x36e>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	d10c      	bne.n	8001e86 <HAL_RCC_OscConfig+0x356>
 8001e6c:	4b6d      	ldr	r3, [pc, #436]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4a6c      	ldr	r2, [pc, #432]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	6213      	str	r3, [r2, #32]
 8001e78:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a69      	ldr	r2, [pc, #420]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	e00b      	b.n	8001e9e <HAL_RCC_OscConfig+0x36e>
 8001e86:	4b67      	ldr	r3, [pc, #412]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	4a66      	ldr	r2, [pc, #408]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	f023 0301 	bic.w	r3, r3, #1
 8001e90:	6213      	str	r3, [r2, #32]
 8001e92:	4b64      	ldr	r3, [pc, #400]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a63      	ldr	r2, [pc, #396]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	f023 0304 	bic.w	r3, r3, #4
 8001e9c:	6213      	str	r3, [r2, #32]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d015      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x3a2>
 8001ea6:	f7ff fb69 	bl	800157c <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x394>
 8001eae:	f7ff fb65 	bl	800157c <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x394>
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e0ab      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001ec4:	4b57      	ldr	r3, [pc, #348]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0ee      	beq.n	8001eae <HAL_RCC_OscConfig+0x37e>
 8001ed0:	e014      	b.n	8001efc <HAL_RCC_OscConfig+0x3cc>
 8001ed2:	f7ff fb53 	bl	800157c <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3c0>
 8001eda:	f7ff fb4f 	bl	800157c <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x3c0>
 8001eec:	2303      	movs	r3, #3
 8001eee:	e095      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001ef0:	4b4c      	ldr	r3, [pc, #304]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1ee      	bne.n	8001eda <HAL_RCC_OscConfig+0x3aa>
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d105      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3de>
 8001f02:	4b48      	ldr	r3, [pc, #288]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	4a47      	ldr	r2, [pc, #284]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	61d3      	str	r3, [r2, #28]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8081 	beq.w	800201a <HAL_RCC_OscConfig+0x4ea>
 8001f18:	4b42      	ldr	r3, [pc, #264]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d061      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x4b8>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d146      	bne.n	8001fba <HAL_RCC_OscConfig+0x48a>
 8001f2c:	4b3f      	ldr	r3, [pc, #252]	; (800202c <HAL_RCC_OscConfig+0x4fc>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	f7ff fb23 	bl	800157c <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x41c>
 8001f3a:	f7ff fb1f 	bl	800157c <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x41c>
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e067      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001f4c:	4b35      	ldr	r3, [pc, #212]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x40a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f60:	d108      	bne.n	8001f74 <HAL_RCC_OscConfig+0x444>
 8001f62:	4b30      	ldr	r3, [pc, #192]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	492d      	ldr	r1, [pc, #180]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a19      	ldr	r1, [r3, #32]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4927      	ldr	r1, [pc, #156]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_RCC_OscConfig+0x4fc>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	f7ff faf3 	bl	800157c <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x47c>
 8001f9a:	f7ff faef 	bl	800157c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x47c>
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e037      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001fac:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x46a>
 8001fb8:	e02f      	b.n	800201a <HAL_RCC_OscConfig+0x4ea>
 8001fba:	4b1c      	ldr	r3, [pc, #112]	; (800202c <HAL_RCC_OscConfig+0x4fc>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	f7ff fadc 	bl	800157c <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x4aa>
 8001fc8:	f7ff fad8 	bl	800157c <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x4aa>
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e020      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x498>
 8001fe6:	e018      	b.n	800201a <HAL_RCC_OscConfig+0x4ea>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x4c4>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e013      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	429a      	cmp	r2, r3
 8002006:	d106      	bne.n	8002016 <HAL_RCC_OscConfig+0x4e6>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	429a      	cmp	r2, r3
 8002014:	d001      	beq.n	800201a <HAL_RCC_OscConfig+0x4ea>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 800201a:	2300      	movs	r3, #0
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	40007000 	.word	0x40007000
 800202c:	42420060 	.word	0x42420060

08002030 <HAL_RCC_ClockConfig>:
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_RCC_ClockConfig+0x14>
 8002040:	2301      	movs	r3, #1
 8002042:	e0d0      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
 8002044:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d910      	bls.n	8002074 <HAL_RCC_ClockConfig+0x44>
 8002052:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 0207 	bic.w	r2, r3, #7
 800205a:	4965      	ldr	r1, [pc, #404]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
 8002062:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x44>
 8002070:	2301      	movs	r3, #1
 8002072:	e0b8      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d020      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x92>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x68>
 800208c:	4b59      	ldr	r3, [pc, #356]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4a58      	ldr	r2, [pc, #352]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002096:	6053      	str	r3, [r2, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x80>
 80020a4:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4a52      	ldr	r2, [pc, #328]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020ae:	6053      	str	r3, [r2, #4]
 80020b0:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	494d      	ldr	r1, [pc, #308]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d040      	beq.n	8002150 <HAL_RCC_ClockConfig+0x120>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xb6>
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d115      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e07f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0xce>
 80020ee:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d109      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e073      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
 80020fe:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
 800210a:	2301      	movs	r3, #1
 800210c:	e06b      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
 800210e:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f023 0203 	bic.w	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4936      	ldr	r1, [pc, #216]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
 8002120:	f7ff fa2c 	bl	800157c <HAL_GetTick>
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	e00a      	b.n	800213e <HAL_RCC_ClockConfig+0x10e>
 8002128:	f7ff fa28 	bl	800157c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_ClockConfig+0x10e>
 800213a:	2303      	movs	r3, #3
 800213c:	e053      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
 800213e:	4b2d      	ldr	r3, [pc, #180]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 020c 	and.w	r2, r3, #12
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	429a      	cmp	r2, r3
 800214e:	d1eb      	bne.n	8002128 <HAL_RCC_ClockConfig+0xf8>
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d210      	bcs.n	8002180 <HAL_RCC_ClockConfig+0x150>
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 0207 	bic.w	r2, r3, #7
 8002166:	4922      	ldr	r1, [pc, #136]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x150>
 800217c:	2301      	movs	r3, #1
 800217e:	e032      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCC_ClockConfig+0x16e>
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4916      	ldr	r1, [pc, #88]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <HAL_RCC_ClockConfig+0x18e>
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	490e      	ldr	r1, [pc, #56]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
 80021be:	f000 f821 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80021c2:	4602      	mov	r2, r0
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	490a      	ldr	r1, [pc, #40]	; (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 80021d0:	5ccb      	ldrb	r3, [r1, r3]
 80021d2:	fa22 f303 	lsr.w	r3, r2, r3
 80021d6:	4a09      	ldr	r2, [pc, #36]	; (80021fc <HAL_RCC_ClockConfig+0x1cc>)
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1d0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f98a 	bl	80014f8 <HAL_InitTick>
 80021e4:	2300      	movs	r3, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40022000 	.word	0x40022000
 80021f4:	40021000 	.word	0x40021000
 80021f8:	08002cdc 	.word	0x08002cdc
 80021fc:	20000060 	.word	0x20000060
 8002200:	20000064 	.word	0x20000064

08002204 <HAL_RCC_GetSysClockFreq>:
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	2300      	movs	r3, #0
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HAL_RCC_GetSysClockFreq+0x94>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b04      	cmp	r3, #4
 800222c:	d002      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x30>
 800222e:	2b08      	cmp	r3, #8
 8002230:	d003      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x36>
 8002232:	e027      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x80>
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_RCC_GetSysClockFreq+0x98>)
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	e027      	b.n	800228a <HAL_RCC_GetSysClockFreq+0x86>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	0c9b      	lsrs	r3, r3, #18
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	4a17      	ldr	r2, [pc, #92]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002244:	5cd3      	ldrb	r3, [r2, r3]
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d010      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x70>
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_RCC_GetSysClockFreq+0x94>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	0c5b      	lsrs	r3, r3, #17
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	4a11      	ldr	r2, [pc, #68]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800225e:	5cd3      	ldrb	r3, [r2, r3]
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a0d      	ldr	r2, [pc, #52]	; (800229c <HAL_RCC_GetSysClockFreq+0x98>)
 8002266:	fb02 f203 	mul.w	r2, r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	e004      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x7a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a0c      	ldr	r2, [pc, #48]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002278:	fb02 f303 	mul.w	r3, r2, r3
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	e002      	b.n	800228a <HAL_RCC_GetSysClockFreq+0x86>
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <HAL_RCC_GetSysClockFreq+0x98>)
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	bf00      	nop
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4618      	mov	r0, r3
 800228e:	371c      	adds	r7, #28
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	007a1200 	.word	0x007a1200
 80022a0:	08002cec 	.word	0x08002cec
 80022a4:	08002cfc 	.word	0x08002cfc
 80022a8:	003d0900 	.word	0x003d0900

080022ac <RCC_Delay>:
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <RCC_Delay+0x34>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <RCC_Delay+0x38>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	0a5b      	lsrs	r3, r3, #9
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	bf00      	nop
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1e5a      	subs	r2, r3, #1
 80022ce:	60fa      	str	r2, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f9      	bne.n	80022c8 <RCC_Delay+0x1c>
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	20000060 	.word	0x20000060
 80022e4:	10624dd3 	.word	0x10624dd3

080022e8 <HAL_TIM_Base_Init>:
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_TIM_Base_Init+0x12>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e041      	b.n	800237e <HAL_TIM_Base_Init+0x96>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <HAL_TIM_Base_Init+0x2c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff f824 	bl	800135c <HAL_TIM_Base_MspInit>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3304      	adds	r3, #4
 8002324:	4619      	mov	r1, r3
 8002326:	4610      	mov	r0, r2
 8002328:	f000 fa6e 	bl	8002808 <TIM_Base_SetConfig>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800237c:	2300      	movs	r3, #0
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_TIM_Base_Start_IT>:
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d001      	beq.n	80023a0 <HAL_TIM_Base_Start_IT+0x18>
 800239c:	2301      	movs	r3, #1
 800239e:	e035      	b.n	800240c <HAL_TIM_Base_Start_IT+0x84>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	60da      	str	r2, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a16      	ldr	r2, [pc, #88]	; (8002418 <HAL_TIM_Base_Start_IT+0x90>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d009      	beq.n	80023d6 <HAL_TIM_Base_Start_IT+0x4e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ca:	d004      	beq.n	80023d6 <HAL_TIM_Base_Start_IT+0x4e>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a12      	ldr	r2, [pc, #72]	; (800241c <HAL_TIM_Base_Start_IT+0x94>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d111      	bne.n	80023fa <HAL_TIM_Base_Start_IT+0x72>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b06      	cmp	r3, #6
 80023e6:	d010      	beq.n	800240a <HAL_TIM_Base_Start_IT+0x82>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e007      	b.n	800240a <HAL_TIM_Base_Start_IT+0x82>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	2300      	movs	r3, #0
 800240c:	4618      	mov	r0, r3
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40012c00 	.word	0x40012c00
 800241c:	40000400 	.word	0x40000400

08002420 <HAL_TIM_IRQHandler>:
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b02      	cmp	r3, #2
 8002434:	d122      	bne.n	800247c <HAL_TIM_IRQHandler+0x5c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b02      	cmp	r3, #2
 8002442:	d11b      	bne.n	800247c <HAL_TIM_IRQHandler+0x5c>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0202 	mvn.w	r2, #2
 800244c:	611a      	str	r2, [r3, #16]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	771a      	strb	r2, [r3, #28]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_TIM_IRQHandler+0x4a>
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f9b4 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 8002468:	e005      	b.n	8002476 <HAL_TIM_IRQHandler+0x56>
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f9a7 	bl	80027be <HAL_TIM_OC_DelayElapsedCallback>
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f9b6 	bl	80027e2 <HAL_TIM_PWM_PulseFinishedCallback>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	771a      	strb	r2, [r3, #28]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b04      	cmp	r3, #4
 8002488:	d122      	bne.n	80024d0 <HAL_TIM_IRQHandler+0xb0>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b04      	cmp	r3, #4
 8002496:	d11b      	bne.n	80024d0 <HAL_TIM_IRQHandler+0xb0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0204 	mvn.w	r2, #4
 80024a0:	611a      	str	r2, [r3, #16]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2202      	movs	r2, #2
 80024a6:	771a      	strb	r2, [r3, #28]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_TIM_IRQHandler+0x9e>
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f98a 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 80024bc:	e005      	b.n	80024ca <HAL_TIM_IRQHandler+0xaa>
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f97d 	bl	80027be <HAL_TIM_OC_DelayElapsedCallback>
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f98c 	bl	80027e2 <HAL_TIM_PWM_PulseFinishedCallback>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	771a      	strb	r2, [r3, #28]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d122      	bne.n	8002524 <HAL_TIM_IRQHandler+0x104>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d11b      	bne.n	8002524 <HAL_TIM_IRQHandler+0x104>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0208 	mvn.w	r2, #8
 80024f4:	611a      	str	r2, [r3, #16]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2204      	movs	r2, #4
 80024fa:	771a      	strb	r2, [r3, #28]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_TIM_IRQHandler+0xf2>
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f960 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 8002510:	e005      	b.n	800251e <HAL_TIM_IRQHandler+0xfe>
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f953 	bl	80027be <HAL_TIM_OC_DelayElapsedCallback>
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f962 	bl	80027e2 <HAL_TIM_PWM_PulseFinishedCallback>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	771a      	strb	r2, [r3, #28]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b10      	cmp	r3, #16
 8002530:	d122      	bne.n	8002578 <HAL_TIM_IRQHandler+0x158>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b10      	cmp	r3, #16
 800253e:	d11b      	bne.n	8002578 <HAL_TIM_IRQHandler+0x158>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0210 	mvn.w	r2, #16
 8002548:	611a      	str	r2, [r3, #16]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2208      	movs	r2, #8
 800254e:	771a      	strb	r2, [r3, #28]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_TIM_IRQHandler+0x146>
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f936 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 8002564:	e005      	b.n	8002572 <HAL_TIM_IRQHandler+0x152>
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f929 	bl	80027be <HAL_TIM_OC_DelayElapsedCallback>
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f938 	bl	80027e2 <HAL_TIM_PWM_PulseFinishedCallback>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	771a      	strb	r2, [r3, #28]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b01      	cmp	r3, #1
 8002584:	d10e      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x184>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b01      	cmp	r3, #1
 8002592:	d107      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x184>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0201 	mvn.w	r2, #1
 800259c:	611a      	str	r2, [r3, #16]
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe fd40 	bl	8001024 <HAL_TIM_PeriodElapsedCallback>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ae:	2b80      	cmp	r3, #128	; 0x80
 80025b0:	d10e      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x1b0>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025bc:	2b80      	cmp	r3, #128	; 0x80
 80025be:	d107      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x1b0>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025c8:	611a      	str	r2, [r3, #16]
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fa6b 	bl	8002aa6 <HAL_TIMEx_BreakCallback>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025da:	2b40      	cmp	r3, #64	; 0x40
 80025dc:	d10e      	bne.n	80025fc <HAL_TIM_IRQHandler+0x1dc>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e8:	2b40      	cmp	r3, #64	; 0x40
 80025ea:	d107      	bne.n	80025fc <HAL_TIM_IRQHandler+0x1dc>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025f4:	611a      	str	r2, [r3, #16]
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f8fc 	bl	80027f4 <HAL_TIM_TriggerCallback>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	2b20      	cmp	r3, #32
 8002608:	d10e      	bne.n	8002628 <HAL_TIM_IRQHandler+0x208>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b20      	cmp	r3, #32
 8002616:	d107      	bne.n	8002628 <HAL_TIM_IRQHandler+0x208>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0220 	mvn.w	r2, #32
 8002620:	611a      	str	r2, [r3, #16]
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fa36 	bl	8002a94 <HAL_TIMEx_CommutCallback>
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_TIM_ConfigClockSource>:
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	2300      	movs	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_TIM_ConfigClockSource+0x1c>
 8002648:	2302      	movs	r3, #2
 800264a:	e0b4      	b.n	80027b6 <HAL_TIM_ConfigClockSource+0x186>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002684:	d03e      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0xd4>
 8002686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800268a:	f200 8087 	bhi.w	800279c <HAL_TIM_ConfigClockSource+0x16c>
 800268e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002692:	f000 8086 	beq.w	80027a2 <HAL_TIM_ConfigClockSource+0x172>
 8002696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269a:	d87f      	bhi.n	800279c <HAL_TIM_ConfigClockSource+0x16c>
 800269c:	2b70      	cmp	r3, #112	; 0x70
 800269e:	d01a      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0xa6>
 80026a0:	2b70      	cmp	r3, #112	; 0x70
 80026a2:	d87b      	bhi.n	800279c <HAL_TIM_ConfigClockSource+0x16c>
 80026a4:	2b60      	cmp	r3, #96	; 0x60
 80026a6:	d050      	beq.n	800274a <HAL_TIM_ConfigClockSource+0x11a>
 80026a8:	2b60      	cmp	r3, #96	; 0x60
 80026aa:	d877      	bhi.n	800279c <HAL_TIM_ConfigClockSource+0x16c>
 80026ac:	2b50      	cmp	r3, #80	; 0x50
 80026ae:	d03c      	beq.n	800272a <HAL_TIM_ConfigClockSource+0xfa>
 80026b0:	2b50      	cmp	r3, #80	; 0x50
 80026b2:	d873      	bhi.n	800279c <HAL_TIM_ConfigClockSource+0x16c>
 80026b4:	2b40      	cmp	r3, #64	; 0x40
 80026b6:	d058      	beq.n	800276a <HAL_TIM_ConfigClockSource+0x13a>
 80026b8:	2b40      	cmp	r3, #64	; 0x40
 80026ba:	d86f      	bhi.n	800279c <HAL_TIM_ConfigClockSource+0x16c>
 80026bc:	2b30      	cmp	r3, #48	; 0x30
 80026be:	d064      	beq.n	800278a <HAL_TIM_ConfigClockSource+0x15a>
 80026c0:	2b30      	cmp	r3, #48	; 0x30
 80026c2:	d86b      	bhi.n	800279c <HAL_TIM_ConfigClockSource+0x16c>
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	d060      	beq.n	800278a <HAL_TIM_ConfigClockSource+0x15a>
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d867      	bhi.n	800279c <HAL_TIM_ConfigClockSource+0x16c>
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d05c      	beq.n	800278a <HAL_TIM_ConfigClockSource+0x15a>
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d05a      	beq.n	800278a <HAL_TIM_ConfigClockSource+0x15a>
 80026d4:	e062      	b.n	800279c <HAL_TIM_ConfigClockSource+0x16c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6899      	ldr	r1, [r3, #8]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f000 f95e 	bl	80029a6 <TIM_ETR_SetConfig>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	e04f      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x174>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	6899      	ldr	r1, [r3, #8]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f000 f947 	bl	80029a6 <TIM_ETR_SetConfig>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	e03c      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x174>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6859      	ldr	r1, [r3, #4]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	461a      	mov	r2, r3
 8002738:	f000 f8be 	bl	80028b8 <TIM_TI1_ConfigInputStage>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2150      	movs	r1, #80	; 0x50
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f915 	bl	8002972 <TIM_ITRx_SetConfig>
 8002748:	e02c      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x174>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6859      	ldr	r1, [r3, #4]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	461a      	mov	r2, r3
 8002758:	f000 f8dc 	bl	8002914 <TIM_TI2_ConfigInputStage>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2160      	movs	r1, #96	; 0x60
 8002762:	4618      	mov	r0, r3
 8002764:	f000 f905 	bl	8002972 <TIM_ITRx_SetConfig>
 8002768:	e01c      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x174>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	461a      	mov	r2, r3
 8002778:	f000 f89e 	bl	80028b8 <TIM_TI1_ConfigInputStage>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2140      	movs	r1, #64	; 0x40
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f8f5 	bl	8002972 <TIM_ITRx_SetConfig>
 8002788:	e00c      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x174>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4619      	mov	r1, r3
 8002794:	4610      	mov	r0, r2
 8002796:	f000 f8ec 	bl	8002972 <TIM_ITRx_SetConfig>
 800279a:	e003      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x174>
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	e000      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x174>
 80027a2:	bf00      	nop
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_TIM_OC_DelayElapsedCallback>:
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <HAL_TIM_IC_CaptureCallback>:
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr

080027e2 <HAL_TIM_PWM_PulseFinishedCallback>:
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HAL_TIM_TriggerCallback>:
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
	...

08002808 <TIM_Base_SetConfig>:
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a25      	ldr	r2, [pc, #148]	; (80028b0 <TIM_Base_SetConfig+0xa8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d007      	beq.n	8002830 <TIM_Base_SetConfig+0x28>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002826:	d003      	beq.n	8002830 <TIM_Base_SetConfig+0x28>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a22      	ldr	r2, [pc, #136]	; (80028b4 <TIM_Base_SetConfig+0xac>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d108      	bne.n	8002842 <TIM_Base_SetConfig+0x3a>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <TIM_Base_SetConfig+0xa8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d007      	beq.n	800285a <TIM_Base_SetConfig+0x52>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002850:	d003      	beq.n	800285a <TIM_Base_SetConfig+0x52>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a17      	ldr	r2, [pc, #92]	; (80028b4 <TIM_Base_SetConfig+0xac>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d108      	bne.n	800286c <TIM_Base_SetConfig+0x64>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <TIM_Base_SetConfig+0xa8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d103      	bne.n	80028a0 <TIM_Base_SetConfig+0x98>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	615a      	str	r2, [r3, #20]
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40000400 	.word	0x40000400

080028b8 <TIM_TI1_ConfigInputStage>:
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	f023 0201 	bic.w	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	621a      	str	r2, [r3, #32]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f023 030a 	bic.w	r3, r3, #10
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	619a      	str	r2, [r3, #24]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	621a      	str	r2, [r3, #32]
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <TIM_TI2_ConfigInputStage>:
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	f023 0210 	bic.w	r2, r3, #16
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	621a      	str	r2, [r3, #32]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	031b      	lsls	r3, r3, #12
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	619a      	str	r2, [r3, #24]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	621a      	str	r2, [r3, #32]
 8002968:	bf00      	nop
 800296a:	371c      	adds	r7, #28
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <TIM_ITRx_SetConfig>:
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	f043 0307 	orr.w	r3, r3, #7
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <TIM_ETR_SetConfig>:
 80029a6:	b480      	push	{r7}
 80029a8:	b087      	sub	sp, #28
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	021a      	lsls	r2, r3, #8
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	bf00      	nop
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <HAL_TIMEx_MasterConfigSynchronization>:
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e041      	b.n	8002a80 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d009      	beq.n	8002a54 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a48:	d004      	beq.n	8002a54 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d10c      	bne.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	609a      	str	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a7e:	2300      	movs	r3, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40012c00 	.word	0x40012c00
 8002a90:	40000400 	.word	0x40000400

08002a94 <HAL_TIMEx_CommutCallback>:
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_TIMEx_BreakCallback>:
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <__errno>:
 8002ab8:	4b01      	ldr	r3, [pc, #4]	; (8002ac0 <__errno+0x8>)
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	2000006c 	.word	0x2000006c

08002ac4 <__libc_init_array>:
 8002ac4:	b570      	push	{r4, r5, r6, lr}
 8002ac6:	2600      	movs	r6, #0
 8002ac8:	4d0c      	ldr	r5, [pc, #48]	; (8002afc <__libc_init_array+0x38>)
 8002aca:	4c0d      	ldr	r4, [pc, #52]	; (8002b00 <__libc_init_array+0x3c>)
 8002acc:	1b64      	subs	r4, r4, r5
 8002ace:	10a4      	asrs	r4, r4, #2
 8002ad0:	42a6      	cmp	r6, r4
 8002ad2:	d109      	bne.n	8002ae8 <__libc_init_array+0x24>
 8002ad4:	f000 f8f6 	bl	8002cc4 <_init>
 8002ad8:	2600      	movs	r6, #0
 8002ada:	4d0a      	ldr	r5, [pc, #40]	; (8002b04 <__libc_init_array+0x40>)
 8002adc:	4c0a      	ldr	r4, [pc, #40]	; (8002b08 <__libc_init_array+0x44>)
 8002ade:	1b64      	subs	r4, r4, r5
 8002ae0:	10a4      	asrs	r4, r4, #2
 8002ae2:	42a6      	cmp	r6, r4
 8002ae4:	d105      	bne.n	8002af2 <__libc_init_array+0x2e>
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}
 8002ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aec:	4798      	blx	r3
 8002aee:	3601      	adds	r6, #1
 8002af0:	e7ee      	b.n	8002ad0 <__libc_init_array+0xc>
 8002af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af6:	4798      	blx	r3
 8002af8:	3601      	adds	r6, #1
 8002afa:	e7f2      	b.n	8002ae2 <__libc_init_array+0x1e>
 8002afc:	08002d00 	.word	0x08002d00
 8002b00:	08002d00 	.word	0x08002d00
 8002b04:	08002d00 	.word	0x08002d00
 8002b08:	08002d04 	.word	0x08002d04

08002b0c <malloc>:
 8002b0c:	4b02      	ldr	r3, [pc, #8]	; (8002b18 <malloc+0xc>)
 8002b0e:	4601      	mov	r1, r0
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	f000 b85f 	b.w	8002bd4 <_malloc_r>
 8002b16:	bf00      	nop
 8002b18:	2000006c 	.word	0x2000006c

08002b1c <free>:
 8002b1c:	4b02      	ldr	r3, [pc, #8]	; (8002b28 <free+0xc>)
 8002b1e:	4601      	mov	r1, r0
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	f000 b80b 	b.w	8002b3c <_free_r>
 8002b26:	bf00      	nop
 8002b28:	2000006c 	.word	0x2000006c

08002b2c <memset>:
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4402      	add	r2, r0
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d100      	bne.n	8002b36 <memset+0xa>
 8002b34:	4770      	bx	lr
 8002b36:	f803 1b01 	strb.w	r1, [r3], #1
 8002b3a:	e7f9      	b.n	8002b30 <memset+0x4>

08002b3c <_free_r>:
 8002b3c:	b538      	push	{r3, r4, r5, lr}
 8002b3e:	4605      	mov	r5, r0
 8002b40:	2900      	cmp	r1, #0
 8002b42:	d043      	beq.n	8002bcc <_free_r+0x90>
 8002b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b48:	1f0c      	subs	r4, r1, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bfb8      	it	lt
 8002b4e:	18e4      	addlt	r4, r4, r3
 8002b50:	f000 f8aa 	bl	8002ca8 <__malloc_lock>
 8002b54:	4a1e      	ldr	r2, [pc, #120]	; (8002bd0 <_free_r+0x94>)
 8002b56:	6813      	ldr	r3, [r2, #0]
 8002b58:	4610      	mov	r0, r2
 8002b5a:	b933      	cbnz	r3, 8002b6a <_free_r+0x2e>
 8002b5c:	6063      	str	r3, [r4, #4]
 8002b5e:	6014      	str	r4, [r2, #0]
 8002b60:	4628      	mov	r0, r5
 8002b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b66:	f000 b8a5 	b.w	8002cb4 <__malloc_unlock>
 8002b6a:	42a3      	cmp	r3, r4
 8002b6c:	d90a      	bls.n	8002b84 <_free_r+0x48>
 8002b6e:	6821      	ldr	r1, [r4, #0]
 8002b70:	1862      	adds	r2, r4, r1
 8002b72:	4293      	cmp	r3, r2
 8002b74:	bf01      	itttt	eq
 8002b76:	681a      	ldreq	r2, [r3, #0]
 8002b78:	685b      	ldreq	r3, [r3, #4]
 8002b7a:	1852      	addeq	r2, r2, r1
 8002b7c:	6022      	streq	r2, [r4, #0]
 8002b7e:	6063      	str	r3, [r4, #4]
 8002b80:	6004      	str	r4, [r0, #0]
 8002b82:	e7ed      	b.n	8002b60 <_free_r+0x24>
 8002b84:	461a      	mov	r2, r3
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	b10b      	cbz	r3, 8002b8e <_free_r+0x52>
 8002b8a:	42a3      	cmp	r3, r4
 8002b8c:	d9fa      	bls.n	8002b84 <_free_r+0x48>
 8002b8e:	6811      	ldr	r1, [r2, #0]
 8002b90:	1850      	adds	r0, r2, r1
 8002b92:	42a0      	cmp	r0, r4
 8002b94:	d10b      	bne.n	8002bae <_free_r+0x72>
 8002b96:	6820      	ldr	r0, [r4, #0]
 8002b98:	4401      	add	r1, r0
 8002b9a:	1850      	adds	r0, r2, r1
 8002b9c:	4283      	cmp	r3, r0
 8002b9e:	6011      	str	r1, [r2, #0]
 8002ba0:	d1de      	bne.n	8002b60 <_free_r+0x24>
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4401      	add	r1, r0
 8002ba8:	6011      	str	r1, [r2, #0]
 8002baa:	6053      	str	r3, [r2, #4]
 8002bac:	e7d8      	b.n	8002b60 <_free_r+0x24>
 8002bae:	d902      	bls.n	8002bb6 <_free_r+0x7a>
 8002bb0:	230c      	movs	r3, #12
 8002bb2:	602b      	str	r3, [r5, #0]
 8002bb4:	e7d4      	b.n	8002b60 <_free_r+0x24>
 8002bb6:	6820      	ldr	r0, [r4, #0]
 8002bb8:	1821      	adds	r1, r4, r0
 8002bba:	428b      	cmp	r3, r1
 8002bbc:	bf01      	itttt	eq
 8002bbe:	6819      	ldreq	r1, [r3, #0]
 8002bc0:	685b      	ldreq	r3, [r3, #4]
 8002bc2:	1809      	addeq	r1, r1, r0
 8002bc4:	6021      	streq	r1, [r4, #0]
 8002bc6:	6063      	str	r3, [r4, #4]
 8002bc8:	6054      	str	r4, [r2, #4]
 8002bca:	e7c9      	b.n	8002b60 <_free_r+0x24>
 8002bcc:	bd38      	pop	{r3, r4, r5, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000128 	.word	0x20000128

08002bd4 <_malloc_r>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	1ccd      	adds	r5, r1, #3
 8002bd8:	f025 0503 	bic.w	r5, r5, #3
 8002bdc:	3508      	adds	r5, #8
 8002bde:	2d0c      	cmp	r5, #12
 8002be0:	bf38      	it	cc
 8002be2:	250c      	movcc	r5, #12
 8002be4:	2d00      	cmp	r5, #0
 8002be6:	4606      	mov	r6, r0
 8002be8:	db01      	blt.n	8002bee <_malloc_r+0x1a>
 8002bea:	42a9      	cmp	r1, r5
 8002bec:	d903      	bls.n	8002bf6 <_malloc_r+0x22>
 8002bee:	230c      	movs	r3, #12
 8002bf0:	6033      	str	r3, [r6, #0]
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bf6:	f000 f857 	bl	8002ca8 <__malloc_lock>
 8002bfa:	4921      	ldr	r1, [pc, #132]	; (8002c80 <_malloc_r+0xac>)
 8002bfc:	680a      	ldr	r2, [r1, #0]
 8002bfe:	4614      	mov	r4, r2
 8002c00:	b99c      	cbnz	r4, 8002c2a <_malloc_r+0x56>
 8002c02:	4f20      	ldr	r7, [pc, #128]	; (8002c84 <_malloc_r+0xb0>)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	b923      	cbnz	r3, 8002c12 <_malloc_r+0x3e>
 8002c08:	4621      	mov	r1, r4
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	f000 f83c 	bl	8002c88 <_sbrk_r>
 8002c10:	6038      	str	r0, [r7, #0]
 8002c12:	4629      	mov	r1, r5
 8002c14:	4630      	mov	r0, r6
 8002c16:	f000 f837 	bl	8002c88 <_sbrk_r>
 8002c1a:	1c43      	adds	r3, r0, #1
 8002c1c:	d123      	bne.n	8002c66 <_malloc_r+0x92>
 8002c1e:	230c      	movs	r3, #12
 8002c20:	4630      	mov	r0, r6
 8002c22:	6033      	str	r3, [r6, #0]
 8002c24:	f000 f846 	bl	8002cb4 <__malloc_unlock>
 8002c28:	e7e3      	b.n	8002bf2 <_malloc_r+0x1e>
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	1b5b      	subs	r3, r3, r5
 8002c2e:	d417      	bmi.n	8002c60 <_malloc_r+0x8c>
 8002c30:	2b0b      	cmp	r3, #11
 8002c32:	d903      	bls.n	8002c3c <_malloc_r+0x68>
 8002c34:	6023      	str	r3, [r4, #0]
 8002c36:	441c      	add	r4, r3
 8002c38:	6025      	str	r5, [r4, #0]
 8002c3a:	e004      	b.n	8002c46 <_malloc_r+0x72>
 8002c3c:	6863      	ldr	r3, [r4, #4]
 8002c3e:	42a2      	cmp	r2, r4
 8002c40:	bf0c      	ite	eq
 8002c42:	600b      	streq	r3, [r1, #0]
 8002c44:	6053      	strne	r3, [r2, #4]
 8002c46:	4630      	mov	r0, r6
 8002c48:	f000 f834 	bl	8002cb4 <__malloc_unlock>
 8002c4c:	f104 000b 	add.w	r0, r4, #11
 8002c50:	1d23      	adds	r3, r4, #4
 8002c52:	f020 0007 	bic.w	r0, r0, #7
 8002c56:	1ac2      	subs	r2, r0, r3
 8002c58:	d0cc      	beq.n	8002bf4 <_malloc_r+0x20>
 8002c5a:	1a1b      	subs	r3, r3, r0
 8002c5c:	50a3      	str	r3, [r4, r2]
 8002c5e:	e7c9      	b.n	8002bf4 <_malloc_r+0x20>
 8002c60:	4622      	mov	r2, r4
 8002c62:	6864      	ldr	r4, [r4, #4]
 8002c64:	e7cc      	b.n	8002c00 <_malloc_r+0x2c>
 8002c66:	1cc4      	adds	r4, r0, #3
 8002c68:	f024 0403 	bic.w	r4, r4, #3
 8002c6c:	42a0      	cmp	r0, r4
 8002c6e:	d0e3      	beq.n	8002c38 <_malloc_r+0x64>
 8002c70:	1a21      	subs	r1, r4, r0
 8002c72:	4630      	mov	r0, r6
 8002c74:	f000 f808 	bl	8002c88 <_sbrk_r>
 8002c78:	3001      	adds	r0, #1
 8002c7a:	d1dd      	bne.n	8002c38 <_malloc_r+0x64>
 8002c7c:	e7cf      	b.n	8002c1e <_malloc_r+0x4a>
 8002c7e:	bf00      	nop
 8002c80:	20000128 	.word	0x20000128
 8002c84:	2000012c 	.word	0x2000012c

08002c88 <_sbrk_r>:
 8002c88:	b538      	push	{r3, r4, r5, lr}
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	4d05      	ldr	r5, [pc, #20]	; (8002ca4 <_sbrk_r+0x1c>)
 8002c8e:	4604      	mov	r4, r0
 8002c90:	4608      	mov	r0, r1
 8002c92:	602b      	str	r3, [r5, #0]
 8002c94:	f7fe fbb8 	bl	8001408 <_sbrk>
 8002c98:	1c43      	adds	r3, r0, #1
 8002c9a:	d102      	bne.n	8002ca2 <_sbrk_r+0x1a>
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	b103      	cbz	r3, 8002ca2 <_sbrk_r+0x1a>
 8002ca0:	6023      	str	r3, [r4, #0]
 8002ca2:	bd38      	pop	{r3, r4, r5, pc}
 8002ca4:	20000180 	.word	0x20000180

08002ca8 <__malloc_lock>:
 8002ca8:	4801      	ldr	r0, [pc, #4]	; (8002cb0 <__malloc_lock+0x8>)
 8002caa:	f000 b809 	b.w	8002cc0 <__retarget_lock_acquire_recursive>
 8002cae:	bf00      	nop
 8002cb0:	20000188 	.word	0x20000188

08002cb4 <__malloc_unlock>:
 8002cb4:	4801      	ldr	r0, [pc, #4]	; (8002cbc <__malloc_unlock+0x8>)
 8002cb6:	f000 b804 	b.w	8002cc2 <__retarget_lock_release_recursive>
 8002cba:	bf00      	nop
 8002cbc:	20000188 	.word	0x20000188

08002cc0 <__retarget_lock_acquire_recursive>:
 8002cc0:	4770      	bx	lr

08002cc2 <__retarget_lock_release_recursive>:
 8002cc2:	4770      	bx	lr

08002cc4 <_init>:
 8002cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc6:	bf00      	nop
 8002cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cca:	bc08      	pop	{r3}
 8002ccc:	469e      	mov	lr, r3
 8002cce:	4770      	bx	lr

08002cd0 <_fini>:
 8002cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd2:	bf00      	nop
 8002cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd6:	bc08      	pop	{r3}
 8002cd8:	469e      	mov	lr, r3
 8002cda:	4770      	bx	lr
