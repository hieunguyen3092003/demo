
TEST_MCU_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000297c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a88  08002a88  00012a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aac  08002aac  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  08002aac  08002aac  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aac  08002aac  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aac  08002aac  00012aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ab0  08002ab0  00012ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08002ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  200000c0  08002b74  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08002b74  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b455  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f13  00000000  00000000  0002b53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002d458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002df48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e58  00000000  00000000  0002e910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c770  00000000  00000000  00046768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085bc1  00000000  00000000  00052ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d8a99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c68  00000000  00000000  000d8aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a70 	.word	0x08002a70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	08002a70 	.word	0x08002a70

0800014c <FSMLightModification>:
 */

#include "FSMLightModification.h"

void FSMLightModification()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status)
 8000150:	4b5d      	ldr	r3, [pc, #372]	; (80002c8 <FSMLightModification+0x17c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b2c      	cmp	r3, #44	; 0x2c
 8000156:	d035      	beq.n	80001c4 <FSMLightModification+0x78>
 8000158:	2b2c      	cmp	r3, #44	; 0x2c
 800015a:	f300 80ac 	bgt.w	80002b6 <FSMLightModification+0x16a>
 800015e:	2b2a      	cmp	r3, #42	; 0x2a
 8000160:	d002      	beq.n	8000168 <FSMLightModification+0x1c>
 8000162:	2b2b      	cmp	r3, #43	; 0x2b
 8000164:	d05b      	beq.n	800021e <FSMLightModification+0xd2>
				}
			}
		}
		break;
	default:
		break;
 8000166:	e0a6      	b.n	80002b6 <FSMLightModification+0x16a>
		if(timer4_flag == 1)
 8000168:	4b58      	ldr	r3, [pc, #352]	; (80002cc <FSMLightModification+0x180>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d104      	bne.n	800017a <FSMLightModification+0x2e>
			setTimer4(25);
 8000170:	2019      	movs	r0, #25
 8000172:	f000 ff83 	bl	800107c <setTimer4>
			toggleTrafficRed();
 8000176:	f000 fc33 	bl	80009e0 <toggleTrafficRed>
		if(isButton2Pressed() == 1)
 800017a:	f000 fab3 	bl	80006e4 <isButton2Pressed>
 800017e:	4603      	mov	r3, r0
 8000180:	2b01      	cmp	r3, #1
 8000182:	d10c      	bne.n	800019e <FSMLightModification+0x52>
			resetInitialState();
 8000184:	f000 fcce 	bl	8000b24 <resetInitialState>
			red_time++;
 8000188:	4b51      	ldr	r3, [pc, #324]	; (80002d0 <FSMLightModification+0x184>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	3301      	adds	r3, #1
 800018e:	4a50      	ldr	r2, [pc, #320]	; (80002d0 <FSMLightModification+0x184>)
 8000190:	6013      	str	r3, [r2, #0]
			setLedBuffer(red_time, 1);
 8000192:	4b4f      	ldr	r3, [pc, #316]	; (80002d0 <FSMLightModification+0x184>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	2101      	movs	r1, #1
 8000198:	4618      	mov	r0, r3
 800019a:	f000 fc5b 	bl	8000a54 <setLedBuffer>
		if(isButton3Pressed() == 1)
 800019e:	f000 fabf 	bl	8000720 <isButton3Pressed>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b01      	cmp	r3, #1
 80001a6:	f040 8088 	bne.w	80002ba <FSMLightModification+0x16e>
			resetInitialState();
 80001aa:	f000 fcbb 	bl	8000b24 <resetInitialState>
			status = MODIFY_YELLOW;	//next mode
 80001ae:	4b46      	ldr	r3, [pc, #280]	; (80002c8 <FSMLightModification+0x17c>)
 80001b0:	2222      	movs	r2, #34	; 0x22
 80001b2:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 80001b4:	2019      	movs	r0, #25
 80001b6:	f000 ff61 	bl	800107c <setTimer4>
			setLedBuffer(0, 2);
 80001ba:	2102      	movs	r1, #2
 80001bc:	2000      	movs	r0, #0
 80001be:	f000 fc49 	bl	8000a54 <setLedBuffer>
		break;
 80001c2:	e07a      	b.n	80002ba <FSMLightModification+0x16e>
		if(timer4_flag == 1)
 80001c4:	4b41      	ldr	r3, [pc, #260]	; (80002cc <FSMLightModification+0x180>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d104      	bne.n	80001d6 <FSMLightModification+0x8a>
			setTimer4(25);
 80001cc:	2019      	movs	r0, #25
 80001ce:	f000 ff55 	bl	800107c <setTimer4>
			toggleTrafficYellow();
 80001d2:	f000 fc17 	bl	8000a04 <toggleTrafficYellow>
		if(isButton2Pressed() == 1)
 80001d6:	f000 fa85 	bl	80006e4 <isButton2Pressed>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d10c      	bne.n	80001fa <FSMLightModification+0xae>
			resetInitialState();
 80001e0:	f000 fca0 	bl	8000b24 <resetInitialState>
			yellow_time++;
 80001e4:	4b3b      	ldr	r3, [pc, #236]	; (80002d4 <FSMLightModification+0x188>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	3301      	adds	r3, #1
 80001ea:	4a3a      	ldr	r2, [pc, #232]	; (80002d4 <FSMLightModification+0x188>)
 80001ec:	6013      	str	r3, [r2, #0]
			setLedBuffer(yellow_time, 2);
 80001ee:	4b39      	ldr	r3, [pc, #228]	; (80002d4 <FSMLightModification+0x188>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2102      	movs	r1, #2
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 fc2d 	bl	8000a54 <setLedBuffer>
		if(isButton3Pressed() == 1)
 80001fa:	f000 fa91 	bl	8000720 <isButton3Pressed>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b01      	cmp	r3, #1
 8000202:	d15c      	bne.n	80002be <FSMLightModification+0x172>
			resetInitialState();
 8000204:	f000 fc8e 	bl	8000b24 <resetInitialState>
			status = MODIFY_GREEN;	//next mode
 8000208:	4b2f      	ldr	r3, [pc, #188]	; (80002c8 <FSMLightModification+0x17c>)
 800020a:	2221      	movs	r2, #33	; 0x21
 800020c:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 800020e:	2019      	movs	r0, #25
 8000210:	f000 ff34 	bl	800107c <setTimer4>
			setLedBuffer(0, 3);
 8000214:	2103      	movs	r1, #3
 8000216:	2000      	movs	r0, #0
 8000218:	f000 fc1c 	bl	8000a54 <setLedBuffer>
		break;
 800021c:	e04f      	b.n	80002be <FSMLightModification+0x172>
		if(timer4_flag == 1)
 800021e:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <FSMLightModification+0x180>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d104      	bne.n	8000230 <FSMLightModification+0xe4>
			setTimer4(25);
 8000226:	2019      	movs	r0, #25
 8000228:	f000 ff28 	bl	800107c <setTimer4>
			toggleTrafficGreen();
 800022c:	f000 fc04 	bl	8000a38 <toggleTrafficGreen>
		if(isButton2Pressed() == 1)
 8000230:	f000 fa58 	bl	80006e4 <isButton2Pressed>
 8000234:	4603      	mov	r3, r0
 8000236:	2b01      	cmp	r3, #1
 8000238:	d10c      	bne.n	8000254 <FSMLightModification+0x108>
			resetInitialState();
 800023a:	f000 fc73 	bl	8000b24 <resetInitialState>
			green_time++;
 800023e:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <FSMLightModification+0x18c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	3301      	adds	r3, #1
 8000244:	4a24      	ldr	r2, [pc, #144]	; (80002d8 <FSMLightModification+0x18c>)
 8000246:	6013      	str	r3, [r2, #0]
			setLedBuffer(green_time, 3);
 8000248:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <FSMLightModification+0x18c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2103      	movs	r1, #3
 800024e:	4618      	mov	r0, r3
 8000250:	f000 fc00 	bl	8000a54 <setLedBuffer>
		if(isButton3Pressed() == 1)
 8000254:	f000 fa64 	bl	8000720 <isButton3Pressed>
 8000258:	4603      	mov	r3, r0
 800025a:	2b01      	cmp	r3, #1
 800025c:	d131      	bne.n	80002c2 <FSMLightModification+0x176>
			if(red_time == green_time+yellow_time)
 800025e:	4b1e      	ldr	r3, [pc, #120]	; (80002d8 <FSMLightModification+0x18c>)
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	4b1c      	ldr	r3, [pc, #112]	; (80002d4 <FSMLightModification+0x188>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	441a      	add	r2, r3
 8000268:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <FSMLightModification+0x184>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	429a      	cmp	r2, r3
 800026e:	d103      	bne.n	8000278 <FSMLightModification+0x12c>
				status = NORMAL_MODE;
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <FSMLightModification+0x17c>)
 8000272:	2215      	movs	r2, #21
 8000274:	601a      	str	r2, [r3, #0]
		break;
 8000276:	e024      	b.n	80002c2 <FSMLightModification+0x176>
				if(red_time > green_time+yellow_time)
 8000278:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <FSMLightModification+0x18c>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <FSMLightModification+0x188>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	441a      	add	r2, r3
 8000282:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <FSMLightModification+0x184>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	429a      	cmp	r2, r3
 8000288:	da0a      	bge.n	80002a0 <FSMLightModification+0x154>
					green_time = red_time - yellow_time;
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <FSMLightModification+0x184>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <FSMLightModification+0x188>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	1ad3      	subs	r3, r2, r3
 8000294:	4a10      	ldr	r2, [pc, #64]	; (80002d8 <FSMLightModification+0x18c>)
 8000296:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 8000298:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <FSMLightModification+0x17c>)
 800029a:	2215      	movs	r2, #21
 800029c:	601a      	str	r2, [r3, #0]
		break;
 800029e:	e010      	b.n	80002c2 <FSMLightModification+0x176>
					red_time = green_time + yellow_time;
 80002a0:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <FSMLightModification+0x18c>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <FSMLightModification+0x188>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4413      	add	r3, r2
 80002aa:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <FSMLightModification+0x184>)
 80002ac:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <FSMLightModification+0x17c>)
 80002b0:	2215      	movs	r2, #21
 80002b2:	601a      	str	r2, [r3, #0]
		break;
 80002b4:	e005      	b.n	80002c2 <FSMLightModification+0x176>
		break;
 80002b6:	bf00      	nop
 80002b8:	e004      	b.n	80002c4 <FSMLightModification+0x178>
		break;
 80002ba:	bf00      	nop
 80002bc:	e002      	b.n	80002c4 <FSMLightModification+0x178>
		break;
 80002be:	bf00      	nop
 80002c0:	e000      	b.n	80002c4 <FSMLightModification+0x178>
		break;
 80002c2:	bf00      	nop
	}
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	200000ec 	.word	0x200000ec
 80002cc:	2000010c 	.word	0x2000010c
 80002d0:	20000044 	.word	0x20000044
 80002d4:	2000004c 	.word	0x2000004c
 80002d8:	20000048 	.word	0x20000048

080002dc <FSMModificationModeRun>:
 */
#include "FSMModificationMode.h"


void FSMModificationModeRun()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	switch(status)
 80002e0:	4b6c      	ldr	r3, [pc, #432]	; (8000494 <FSMModificationModeRun+0x1b8>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3b1f      	subs	r3, #31
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	f200 80cb 	bhi.w	8000482 <FSMModificationModeRun+0x1a6>
 80002ec:	a201      	add	r2, pc, #4	; (adr r2, 80002f4 <FSMModificationModeRun+0x18>)
 80002ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f2:	bf00      	nop
 80002f4:	08000305 	.word	0x08000305
 80002f8:	0800031f 	.word	0x0800031f
 80002fc:	080003e5 	.word	0x080003e5
 8000300:	08000383 	.word	0x08000383
	{
	case MODIFICATION_MODE:
		resetInitialState();	// reset all all the varialbles thats affect FSMModificationModeRun
 8000304:	f000 fc0e 	bl	8000b24 <resetInitialState>
		status = MODIFY_RED;	// next mode
 8000308:	4b62      	ldr	r3, [pc, #392]	; (8000494 <FSMModificationModeRun+0x1b8>)
 800030a:	2220      	movs	r2, #32
 800030c:	601a      	str	r2, [r3, #0]
		//led blinky for 2hz
		setTimer4(25);
 800030e:	2019      	movs	r0, #25
 8000310:	f000 feb4 	bl	800107c <setTimer4>
		// initial setting led 7 seg
		setLedBuffer(0, 1);
 8000314:	2101      	movs	r1, #1
 8000316:	2000      	movs	r0, #0
 8000318:	f000 fb9c 	bl	8000a54 <setLedBuffer>


		break;
 800031c:	e0b8      	b.n	8000490 <FSMModificationModeRun+0x1b4>

	case MODIFY_RED:

		if(timer4_flag == 1)
 800031e:	4b5e      	ldr	r3, [pc, #376]	; (8000498 <FSMModificationModeRun+0x1bc>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d104      	bne.n	8000330 <FSMModificationModeRun+0x54>
		{
			setTimer4(25);
 8000326:	2019      	movs	r0, #25
 8000328:	f000 fea8 	bl	800107c <setTimer4>
			toggleTrafficRed();
 800032c:	f000 fb58 	bl	80009e0 <toggleTrafficRed>
		}

		if(isButton1Pressed() == 1)
 8000330:	f000 f9ba 	bl	80006a8 <isButton1Pressed>
 8000334:	4603      	mov	r3, r0
 8000336:	2b01      	cmp	r3, #1
 8000338:	d10b      	bne.n	8000352 <FSMModificationModeRun+0x76>
		{
			resetInitialState();
 800033a:	f000 fbf3 	bl	8000b24 <resetInitialState>

			status = MODIFY_YELLOW;	//next mode
 800033e:	4b55      	ldr	r3, [pc, #340]	; (8000494 <FSMModificationModeRun+0x1b8>)
 8000340:	2222      	movs	r2, #34	; 0x22
 8000342:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 8000344:	2019      	movs	r0, #25
 8000346:	f000 fe99 	bl	800107c <setTimer4>

			// initial setting led 7 seg
			setLedBuffer(0, 2);
 800034a:	2102      	movs	r1, #2
 800034c:	2000      	movs	r0, #0
 800034e:	f000 fb81 	bl	8000a54 <setLedBuffer>
		}

		if(isButton2Pressed() == 1)
 8000352:	f000 f9c7 	bl	80006e4 <isButton2Pressed>
 8000356:	4603      	mov	r3, r0
 8000358:	2b01      	cmp	r3, #1
 800035a:	f040 8094 	bne.w	8000486 <FSMModificationModeRun+0x1aa>
		{
			resetInitialState();
 800035e:	f000 fbe1 	bl	8000b24 <resetInitialState>

			status = MODIFY_TIME_RED; //next mode
 8000362:	4b4c      	ldr	r3, [pc, #304]	; (8000494 <FSMModificationModeRun+0x1b8>)
 8000364:	222a      	movs	r2, #42	; 0x2a
 8000366:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 8000368:	2019      	movs	r0, #25
 800036a:	f000 fe87 	bl	800107c <setTimer4>

			red_time = 1;
 800036e:	4b4b      	ldr	r3, [pc, #300]	; (800049c <FSMModificationModeRun+0x1c0>)
 8000370:	2201      	movs	r2, #1
 8000372:	601a      	str	r2, [r3, #0]
			setLedBuffer(red_time, 1);
 8000374:	4b49      	ldr	r3, [pc, #292]	; (800049c <FSMModificationModeRun+0x1c0>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2101      	movs	r1, #1
 800037a:	4618      	mov	r0, r3
 800037c:	f000 fb6a 	bl	8000a54 <setLedBuffer>
		}
		break;
 8000380:	e081      	b.n	8000486 <FSMModificationModeRun+0x1aa>

	case MODIFY_YELLOW:

		if(timer4_flag == 1)
 8000382:	4b45      	ldr	r3, [pc, #276]	; (8000498 <FSMModificationModeRun+0x1bc>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d104      	bne.n	8000394 <FSMModificationModeRun+0xb8>
		{
			setTimer4(25);
 800038a:	2019      	movs	r0, #25
 800038c:	f000 fe76 	bl	800107c <setTimer4>

			toggleTrafficYellow();
 8000390:	f000 fb38 	bl	8000a04 <toggleTrafficYellow>
		}

		if(isButton1Pressed() == 1)
 8000394:	f000 f988 	bl	80006a8 <isButton1Pressed>
 8000398:	4603      	mov	r3, r0
 800039a:	2b01      	cmp	r3, #1
 800039c:	d10b      	bne.n	80003b6 <FSMModificationModeRun+0xda>
		{
			resetInitialState();
 800039e:	f000 fbc1 	bl	8000b24 <resetInitialState>

			status = MODIFY_GREEN;
 80003a2:	4b3c      	ldr	r3, [pc, #240]	; (8000494 <FSMModificationModeRun+0x1b8>)
 80003a4:	2221      	movs	r2, #33	; 0x21
 80003a6:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 80003a8:	2019      	movs	r0, #25
 80003aa:	f000 fe67 	bl	800107c <setTimer4>

			setLedBuffer(0, 3);
 80003ae:	2103      	movs	r1, #3
 80003b0:	2000      	movs	r0, #0
 80003b2:	f000 fb4f 	bl	8000a54 <setLedBuffer>
//			SCH_Add_Task(toggleTrafficGreen, 0, TOGGLE_TIME);
		}

		if(isButton2Pressed() == 1)
 80003b6:	f000 f995 	bl	80006e4 <isButton2Pressed>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d164      	bne.n	800048a <FSMModificationModeRun+0x1ae>
		{
			resetInitialState();
 80003c0:	f000 fbb0 	bl	8000b24 <resetInitialState>

			status = MODIFY_TIME_YELLOW;
 80003c4:	4b33      	ldr	r3, [pc, #204]	; (8000494 <FSMModificationModeRun+0x1b8>)
 80003c6:	222c      	movs	r2, #44	; 0x2c
 80003c8:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 80003ca:	2019      	movs	r0, #25
 80003cc:	f000 fe56 	bl	800107c <setTimer4>

			yellow_time = 1;
 80003d0:	4b33      	ldr	r3, [pc, #204]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	601a      	str	r2, [r3, #0]
			setLedBuffer(yellow_time, 2);
 80003d6:	4b32      	ldr	r3, [pc, #200]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2102      	movs	r1, #2
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fb39 	bl	8000a54 <setLedBuffer>

		}
		break;
 80003e2:	e052      	b.n	800048a <FSMModificationModeRun+0x1ae>

	case MODIFY_GREEN:

		if(timer4_flag == 1)
 80003e4:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <FSMModificationModeRun+0x1bc>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d104      	bne.n	80003f6 <FSMModificationModeRun+0x11a>
		{
			setTimer4(25);
 80003ec:	2019      	movs	r0, #25
 80003ee:	f000 fe45 	bl	800107c <setTimer4>

			toggleTrafficGreen();
 80003f2:	f000 fb21 	bl	8000a38 <toggleTrafficGreen>
		}

		if(isButton1Pressed() == 1)
 80003f6:	f000 f957 	bl	80006a8 <isButton1Pressed>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d12c      	bne.n	800045a <FSMModificationModeRun+0x17e>
		{
			resetInitialState();
 8000400:	f000 fb90 	bl	8000b24 <resetInitialState>
			if(red_time == green_time+yellow_time)
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	4b25      	ldr	r3, [pc, #148]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	441a      	add	r2, r3
 800040e:	4b23      	ldr	r3, [pc, #140]	; (800049c <FSMModificationModeRun+0x1c0>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	429a      	cmp	r2, r3
 8000414:	d103      	bne.n	800041e <FSMModificationModeRun+0x142>
			{
				status = NORMAL_MODE;
 8000416:	4b1f      	ldr	r3, [pc, #124]	; (8000494 <FSMModificationModeRun+0x1b8>)
 8000418:	2215      	movs	r2, #21
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	e01d      	b.n	800045a <FSMModificationModeRun+0x17e>
			}
			else
			{
				if(red_time > green_time+yellow_time)
 800041e:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	441a      	add	r2, r3
 8000428:	4b1c      	ldr	r3, [pc, #112]	; (800049c <FSMModificationModeRun+0x1c0>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	429a      	cmp	r2, r3
 800042e:	da0a      	bge.n	8000446 <FSMModificationModeRun+0x16a>
				{
					green_time = red_time - yellow_time;
 8000430:	4b1a      	ldr	r3, [pc, #104]	; (800049c <FSMModificationModeRun+0x1c0>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	4a1a      	ldr	r2, [pc, #104]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 800043c:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <FSMModificationModeRun+0x1b8>)
 8000440:	2215      	movs	r2, #21
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	e009      	b.n	800045a <FSMModificationModeRun+0x17e>
				}
				else
				{
					red_time = green_time + yellow_time;
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <FSMModificationModeRun+0x1c4>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4413      	add	r3, r2
 8000450:	4a12      	ldr	r2, [pc, #72]	; (800049c <FSMModificationModeRun+0x1c0>)
 8000452:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <FSMModificationModeRun+0x1b8>)
 8000456:	2215      	movs	r2, #21
 8000458:	601a      	str	r2, [r3, #0]
				}
			}
		}

		if(isButton2Pressed() == 1)
 800045a:	f000 f943 	bl	80006e4 <isButton2Pressed>
 800045e:	4603      	mov	r3, r0
 8000460:	2b01      	cmp	r3, #1
 8000462:	d114      	bne.n	800048e <FSMModificationModeRun+0x1b2>
		{
			resetInitialState();
 8000464:	f000 fb5e 	bl	8000b24 <resetInitialState>

			status = MODIFY_TIME_GREEN;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <FSMModificationModeRun+0x1b8>)
 800046a:	222b      	movs	r2, #43	; 0x2b
 800046c:	601a      	str	r2, [r3, #0]
			green_time = 1;
 800046e:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 8000470:	2201      	movs	r2, #1
 8000472:	601a      	str	r2, [r3, #0]
			setLedBuffer(green_time, 3);
 8000474:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <FSMModificationModeRun+0x1c8>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2103      	movs	r1, #3
 800047a:	4618      	mov	r0, r3
 800047c:	f000 faea 	bl	8000a54 <setLedBuffer>
		}
		break;
 8000480:	e005      	b.n	800048e <FSMModificationModeRun+0x1b2>

	default:
		break;
 8000482:	bf00      	nop
 8000484:	e004      	b.n	8000490 <FSMModificationModeRun+0x1b4>
		break;
 8000486:	bf00      	nop
 8000488:	e002      	b.n	8000490 <FSMModificationModeRun+0x1b4>
		break;
 800048a:	bf00      	nop
 800048c:	e000      	b.n	8000490 <FSMModificationModeRun+0x1b4>
		break;
 800048e:	bf00      	nop
	}
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	200000ec 	.word	0x200000ec
 8000498:	2000010c 	.word	0x2000010c
 800049c:	20000044 	.word	0x20000044
 80004a0:	2000004c 	.word	0x2000004c
 80004a4:	20000048 	.word	0x20000048

080004a8 <FSMNormalModeRun>:

#include "FSMNormalMode.h"


void FSMNormalModeRun()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	switch(status)
 80004ac:	4b77      	ldr	r3, [pc, #476]	; (800068c <FSMNormalModeRun+0x1e4>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	3b15      	subs	r3, #21
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	f200 80de 	bhi.w	8000674 <FSMNormalModeRun+0x1cc>
 80004b8:	a201      	add	r2, pc, #4	; (adr r2, 80004c0 <FSMNormalModeRun+0x18>)
 80004ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004be:	bf00      	nop
 80004c0:	080004d5 	.word	0x080004d5
 80004c4:	080004fb 	.word	0x080004fb
 80004c8:	0800055b 	.word	0x0800055b
 80004cc:	080005b9 	.word	0x080005b9
 80004d0:	08000617 	.word	0x08000617
	{
	case NORMAL_MODE:
		resetInitialState(); 	// reset all all the varialbles thats affect FSMNormalModeRun
 80004d4:	f000 fb26 	bl	8000b24 <resetInitialState>

		status = RED0_GREEN1; 	//next mode
 80004d8:	4b6c      	ldr	r3, [pc, #432]	; (800068c <FSMNormalModeRun+0x1e4>)
 80004da:	2216      	movs	r2, #22
 80004dc:	601a      	str	r2, [r3, #0]
		setTimer1(green_time);	//set timer for next state
 80004de:	4b6c      	ldr	r3, [pc, #432]	; (8000690 <FSMNormalModeRun+0x1e8>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 fd4a 	bl	8000f7c <setTimer1>

		setLedBuffer(red_time, green_time);
 80004e8:	4b6a      	ldr	r3, [pc, #424]	; (8000694 <FSMNormalModeRun+0x1ec>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a68      	ldr	r2, [pc, #416]	; (8000690 <FSMNormalModeRun+0x1e8>)
 80004ee:	6812      	ldr	r2, [r2, #0]
 80004f0:	4611      	mov	r1, r2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 faae 	bl	8000a54 <setLedBuffer>
		break;
 80004f8:	e0c5      	b.n	8000686 <FSMNormalModeRun+0x1de>
	case RED0_GREEN1:
		setTrafficRed();
 80004fa:	f000 fa05 	bl	8000908 <setTrafficRed>
		setTrafficGreen1();
 80004fe:	f000 fa4f 	bl	80009a0 <setTrafficGreen1>

		if(timer3_flag == 1)	//update buffer every second
 8000502:	4b65      	ldr	r3, [pc, #404]	; (8000698 <FSMNormalModeRun+0x1f0>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d104      	bne.n	8000514 <FSMNormalModeRun+0x6c>
		{
			updateLedBuffer();
 800050a:	f000 fadf 	bl	8000acc <updateLedBuffer>
			setTimer3(100);
 800050e:	2064      	movs	r0, #100	; 0x64
 8000510:	f000 fda0 	bl	8001054 <setTimer3>
		}

		if(timer1_flag == 1)
 8000514:	4b61      	ldr	r3, [pc, #388]	; (800069c <FSMNormalModeRun+0x1f4>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d10f      	bne.n	800053c <FSMNormalModeRun+0x94>
		{
			status = RED0_YELLOW1;	//next mode
 800051c:	4b5b      	ldr	r3, [pc, #364]	; (800068c <FSMNormalModeRun+0x1e4>)
 800051e:	2217      	movs	r2, #23
 8000520:	601a      	str	r2, [r3, #0]
			setTimer1(yellow_time);
 8000522:	4b5f      	ldr	r3, [pc, #380]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f000 fd28 	bl	8000f7c <setTimer1>

			setLedBuffer(yellow_time, yellow_time); // set buffer for led 7 seg
 800052c:	4b5c      	ldr	r3, [pc, #368]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a5b      	ldr	r2, [pc, #364]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 8000532:	6812      	ldr	r2, [r2, #0]
 8000534:	4611      	mov	r1, r2
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fa8c 	bl	8000a54 <setLedBuffer>

		}

		if(isButton1Pressed() == 1)
 800053c:	f000 f8b4 	bl	80006a8 <isButton1Pressed>
 8000540:	4603      	mov	r3, r0
 8000542:	2b01      	cmp	r3, #1
 8000544:	f040 8098 	bne.w	8000678 <FSMNormalModeRun+0x1d0>
		{
			status = MODIFICATION_MODE;
 8000548:	4b50      	ldr	r3, [pc, #320]	; (800068c <FSMNormalModeRun+0x1e4>)
 800054a:	221f      	movs	r2, #31
 800054c:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(FSMModificationModeRun, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	4854      	ldr	r0, [pc, #336]	; (80006a4 <FSMNormalModeRun+0x1fc>)
 8000554:	f000 fc4c 	bl	8000df0 <SCH_Add_Task>
		}
		break;
 8000558:	e08e      	b.n	8000678 <FSMNormalModeRun+0x1d0>

	case RED0_YELLOW1:
		setTrafficRed();
 800055a:	f000 f9d5 	bl	8000908 <setTrafficRed>
		setTrafficYellow1();
 800055e:	f000 fa2f 	bl	80009c0 <setTrafficYellow1>

		if(timer3_flag == 1)	//update buffer every second
 8000562:	4b4d      	ldr	r3, [pc, #308]	; (8000698 <FSMNormalModeRun+0x1f0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d104      	bne.n	8000574 <FSMNormalModeRun+0xcc>
		{
			updateLedBuffer();
 800056a:	f000 faaf 	bl	8000acc <updateLedBuffer>
			setTimer3(100);
 800056e:	2064      	movs	r0, #100	; 0x64
 8000570:	f000 fd70 	bl	8001054 <setTimer3>
		}

		if(timer1_flag == 1)
 8000574:	4b49      	ldr	r3, [pc, #292]	; (800069c <FSMNormalModeRun+0x1f4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d10f      	bne.n	800059c <FSMNormalModeRun+0xf4>
		{
			status = GREEN0_RED1;	//next mode
 800057c:	4b43      	ldr	r3, [pc, #268]	; (800068c <FSMNormalModeRun+0x1e4>)
 800057e:	2218      	movs	r2, #24
 8000580:	601a      	str	r2, [r3, #0]
			setTimer1(green_time);	//set_timer for next mode
 8000582:	4b43      	ldr	r3, [pc, #268]	; (8000690 <FSMNormalModeRun+0x1e8>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fcf8 	bl	8000f7c <setTimer1>

			setLedBuffer(green_time, red_time); // set buffer for led 7 seg
 800058c:	4b40      	ldr	r3, [pc, #256]	; (8000690 <FSMNormalModeRun+0x1e8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a40      	ldr	r2, [pc, #256]	; (8000694 <FSMNormalModeRun+0x1ec>)
 8000592:	6812      	ldr	r2, [r2, #0]
 8000594:	4611      	mov	r1, r2
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fa5c 	bl	8000a54 <setLedBuffer>
		}

		if(isButton1Pressed() == 1)
 800059c:	f000 f884 	bl	80006a8 <isButton1Pressed>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d16a      	bne.n	800067c <FSMNormalModeRun+0x1d4>
		{
			status = MODIFICATION_MODE;
 80005a6:	4b39      	ldr	r3, [pc, #228]	; (800068c <FSMNormalModeRun+0x1e4>)
 80005a8:	221f      	movs	r2, #31
 80005aa:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(FSMModificationModeRun, 0, 0);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	483c      	ldr	r0, [pc, #240]	; (80006a4 <FSMNormalModeRun+0x1fc>)
 80005b2:	f000 fc1d 	bl	8000df0 <SCH_Add_Task>
		}
		break;
 80005b6:	e061      	b.n	800067c <FSMNormalModeRun+0x1d4>

	case GREEN0_RED1:
		setTrafficGreen();
 80005b8:	f000 f9ba 	bl	8000930 <setTrafficGreen>
		setTrafficRed1();
 80005bc:	f000 f9e0 	bl	8000980 <setTrafficRed1>

		if(timer3_flag == 1)
 80005c0:	4b35      	ldr	r3, [pc, #212]	; (8000698 <FSMNormalModeRun+0x1f0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d104      	bne.n	80005d2 <FSMNormalModeRun+0x12a>
		{
			updateLedBuffer();
 80005c8:	f000 fa80 	bl	8000acc <updateLedBuffer>
			setTimer3(100);
 80005cc:	2064      	movs	r0, #100	; 0x64
 80005ce:	f000 fd41 	bl	8001054 <setTimer3>

		}

		if(timer1_flag==1)
 80005d2:	4b32      	ldr	r3, [pc, #200]	; (800069c <FSMNormalModeRun+0x1f4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d10f      	bne.n	80005fa <FSMNormalModeRun+0x152>
		{
			status = YELLOW0_RED1;
 80005da:	4b2c      	ldr	r3, [pc, #176]	; (800068c <FSMNormalModeRun+0x1e4>)
 80005dc:	2219      	movs	r2, #25
 80005de:	601a      	str	r2, [r3, #0]
			setTimer1(yellow_time);
 80005e0:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fcc9 	bl	8000f7c <setTimer1>

			setLedBuffer(yellow_time, yellow_time);	// set buffer for led 7 seg
 80005ea:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a2c      	ldr	r2, [pc, #176]	; (80006a0 <FSMNormalModeRun+0x1f8>)
 80005f0:	6812      	ldr	r2, [r2, #0]
 80005f2:	4611      	mov	r1, r2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fa2d 	bl	8000a54 <setLedBuffer>
		}

		if(isButton1Pressed() == 1)
 80005fa:	f000 f855 	bl	80006a8 <isButton1Pressed>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b01      	cmp	r3, #1
 8000602:	d13d      	bne.n	8000680 <FSMNormalModeRun+0x1d8>
		{
			status = MODIFICATION_MODE;
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <FSMNormalModeRun+0x1e4>)
 8000606:	221f      	movs	r2, #31
 8000608:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(FSMModificationModeRun, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	4825      	ldr	r0, [pc, #148]	; (80006a4 <FSMNormalModeRun+0x1fc>)
 8000610:	f000 fbee 	bl	8000df0 <SCH_Add_Task>
		}
		break;
 8000614:	e034      	b.n	8000680 <FSMNormalModeRun+0x1d8>

	case YELLOW0_RED1:
		setTrafficYellow();
 8000616:	f000 f99f 	bl	8000958 <setTrafficYellow>
		setTrafficRed1();
 800061a:	f000 f9b1 	bl	8000980 <setTrafficRed1>

		if(timer3_flag == 1)
 800061e:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <FSMNormalModeRun+0x1f0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d104      	bne.n	8000630 <FSMNormalModeRun+0x188>
		{
			updateLedBuffer();
 8000626:	f000 fa51 	bl	8000acc <updateLedBuffer>
			setTimer3(100);
 800062a:	2064      	movs	r0, #100	; 0x64
 800062c:	f000 fd12 	bl	8001054 <setTimer3>
		}

		if(timer1_flag == 1)
 8000630:	4b1a      	ldr	r3, [pc, #104]	; (800069c <FSMNormalModeRun+0x1f4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d10f      	bne.n	8000658 <FSMNormalModeRun+0x1b0>
		{
			status = RED0_GREEN1;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <FSMNormalModeRun+0x1e4>)
 800063a:	2216      	movs	r2, #22
 800063c:	601a      	str	r2, [r3, #0]
			setTimer1(green_time);
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <FSMNormalModeRun+0x1e8>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fc9a 	bl	8000f7c <setTimer1>

			setLedBuffer(red_time, green_time); // set buffer for led 7 seg
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <FSMNormalModeRun+0x1ec>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a10      	ldr	r2, [pc, #64]	; (8000690 <FSMNormalModeRun+0x1e8>)
 800064e:	6812      	ldr	r2, [r2, #0]
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f9fe 	bl	8000a54 <setLedBuffer>
		}
		if(isButton1Pressed() == 1)
 8000658:	f000 f826 	bl	80006a8 <isButton1Pressed>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d110      	bne.n	8000684 <FSMNormalModeRun+0x1dc>
		{
			status = MODIFICATION_MODE;
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <FSMNormalModeRun+0x1e4>)
 8000664:	221f      	movs	r2, #31
 8000666:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(FSMModificationModeRun, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <FSMNormalModeRun+0x1fc>)
 800066e:	f000 fbbf 	bl	8000df0 <SCH_Add_Task>
		}
		break;
 8000672:	e007      	b.n	8000684 <FSMNormalModeRun+0x1dc>

	default:
		break;
 8000674:	bf00      	nop
 8000676:	e006      	b.n	8000686 <FSMNormalModeRun+0x1de>
		break;
 8000678:	bf00      	nop
 800067a:	e004      	b.n	8000686 <FSMNormalModeRun+0x1de>
		break;
 800067c:	bf00      	nop
 800067e:	e002      	b.n	8000686 <FSMNormalModeRun+0x1de>
		break;
 8000680:	bf00      	nop
 8000682:	e000      	b.n	8000686 <FSMNormalModeRun+0x1de>
		break;
 8000684:	bf00      	nop
	}
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200000ec 	.word	0x200000ec
 8000690:	20000048 	.word	0x20000048
 8000694:	20000044 	.word	0x20000044
 8000698:	20000108 	.word	0x20000108
 800069c:	20000100 	.word	0x20000100
 80006a0:	2000004c 	.word	0x2000004c
 80006a4:	080002dd 	.word	0x080002dd

080006a8 <isButton1Pressed>:
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;
// PROCESS BUTTON 1 FUNCTION
int isButton1Pressed() // nếu nút được nhấn thì hàm trả về 1
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <isButton1Pressed+0x20>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d104      	bne.n	80006be <isButton1Pressed+0x16>
		button1_flag = 0;
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <isButton1Pressed+0x20>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
		return 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e000      	b.n	80006c0 <isButton1Pressed+0x18>
	}
	else return 0;
 80006be:	2300      	movs	r3, #0
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	200000dc 	.word	0x200000dc

080006cc <flag1Process>:
void flag1Process() // hàm này chỉ đề set cờ khi mà nút được nhấn
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	button1_flag = 1; // set flag để xử lý trên while(1)
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <flag1Process+0x14>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	200000dc 	.word	0x200000dc

080006e4 <isButton2Pressed>:

// PROCESS BUTTON 2 FUNCTION
int isButton2Pressed()
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <isButton2Pressed+0x20>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d104      	bne.n	80006fa <isButton2Pressed+0x16>
	{
		button2_flag = 0;
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <isButton2Pressed+0x20>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
		return 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e000      	b.n	80006fc <isButton2Pressed+0x18>
	}
	else return 0;
 80006fa:	2300      	movs	r3, #0
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	200000e0 	.word	0x200000e0

08000708 <flag2Process>:
void flag2Process()
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
	button2_flag = 1;
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <flag2Process+0x14>)
 800070e:	2201      	movs	r2, #1
 8000710:	601a      	str	r2, [r3, #0]
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	200000e0 	.word	0x200000e0

08000720 <isButton3Pressed>:

//PROCESS BUTTON 3 FUNCTION
int isButton3Pressed()
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <isButton3Pressed+0x20>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d104      	bne.n	8000736 <isButton3Pressed+0x16>
	{
		button3_flag = 0;
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <isButton3Pressed+0x20>)
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
		return 1;
 8000732:	2301      	movs	r3, #1
 8000734:	e000      	b.n	8000738 <isButton3Pressed+0x18>
	}
	else return 0;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	200000e4 	.word	0x200000e4

08000744 <flag3Process>:
void flag3Process()
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <flag3Process+0x14>)
 800074a:	2201      	movs	r2, #1
 800074c:	601a      	str	r2, [r3, #0]
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	200000e4 	.word	0x200000e4

0800075c <getKeyInput>:

void getKeyInput()  //goi = timer moi 10ms 1 lan
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	key1_reg0 = key1_reg1;
 8000760:	4b5a      	ldr	r3, [pc, #360]	; (80008cc <getKeyInput+0x170>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a5a      	ldr	r2, [pc, #360]	; (80008d0 <getKeyInput+0x174>)
 8000766:	6013      	str	r3, [r2, #0]
	key1_reg1 = key1_reg2;
 8000768:	4b5a      	ldr	r3, [pc, #360]	; (80008d4 <getKeyInput+0x178>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a57      	ldr	r2, [pc, #348]	; (80008cc <getKeyInput+0x170>)
 800076e:	6013      	str	r3, [r2, #0]
	key1_reg2 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin); // key1_reg2 đọc giá trị của nút nhấn
 8000770:	2102      	movs	r1, #2
 8000772:	4859      	ldr	r0, [pc, #356]	; (80008d8 <getKeyInput+0x17c>)
 8000774:	f001 f86a 	bl	800184c <HAL_GPIO_ReadPin>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	4b55      	ldr	r3, [pc, #340]	; (80008d4 <getKeyInput+0x178>)
 800077e:	601a      	str	r2, [r3, #0]
	if((key1_reg0 == key1_reg1) && (key1_reg1 == key1_reg2)) // chống rung
 8000780:	4b53      	ldr	r3, [pc, #332]	; (80008d0 <getKeyInput+0x174>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b51      	ldr	r3, [pc, #324]	; (80008cc <getKeyInput+0x170>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	429a      	cmp	r2, r3
 800078a:	d125      	bne.n	80007d8 <getKeyInput+0x7c>
 800078c:	4b4f      	ldr	r3, [pc, #316]	; (80008cc <getKeyInput+0x170>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4b50      	ldr	r3, [pc, #320]	; (80008d4 <getKeyInput+0x178>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	429a      	cmp	r2, r3
 8000796:	d11f      	bne.n	80007d8 <getKeyInput+0x7c>
	{
		if(key1_reg3 != key1_reg2) // xử lý khi nhấn
 8000798:	4b50      	ldr	r3, [pc, #320]	; (80008dc <getKeyInput+0x180>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b4d      	ldr	r3, [pc, #308]	; (80008d4 <getKeyInput+0x178>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d00d      	beq.n	80007c0 <getKeyInput+0x64>
		{
			key1_reg3 = key1_reg2;
 80007a4:	4b4b      	ldr	r3, [pc, #300]	; (80008d4 <getKeyInput+0x178>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a4c      	ldr	r2, [pc, #304]	; (80008dc <getKeyInput+0x180>)
 80007aa:	6013      	str	r3, [r2, #0]
			if(key1_reg2 == PRESSED_STATE)
 80007ac:	4b49      	ldr	r3, [pc, #292]	; (80008d4 <getKeyInput+0x178>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d111      	bne.n	80007d8 <getKeyInput+0x7c>
			{
				flag1Process();
 80007b4:	f7ff ff8a 	bl	80006cc <flag1Process>
				timer_for_key_press = 200; // gán lại lên 2s
 80007b8:	4b49      	ldr	r3, [pc, #292]	; (80008e0 <getKeyInput+0x184>)
 80007ba:	22c8      	movs	r2, #200	; 0xc8
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	e00b      	b.n	80007d8 <getKeyInput+0x7c>
			}
		}
		else // xử lý nhấn đè (key1_reg3 == key1_reg2)
		{
			timer_for_key_press--;
 80007c0:	4b47      	ldr	r3, [pc, #284]	; (80008e0 <getKeyInput+0x184>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	4a46      	ldr	r2, [pc, #280]	; (80008e0 <getKeyInput+0x184>)
 80007c8:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 80007ca:	4b45      	ldr	r3, [pc, #276]	; (80008e0 <getKeyInput+0x184>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d102      	bne.n	80007d8 <getKeyInput+0x7c>
			{
				key1_reg3 = NORMAL_STATE; // gán key1_reg3 thành NORMAL_STATE sẽ reset trường hợp nhấn đè lên lại trường hợp nhấn
 80007d2:	4b42      	ldr	r3, [pc, #264]	; (80008dc <getKeyInput+0x180>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	601a      	str	r2, [r3, #0]
			}
		}
	}

	key2_reg0 = key2_reg1;
 80007d8:	4b42      	ldr	r3, [pc, #264]	; (80008e4 <getKeyInput+0x188>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a42      	ldr	r2, [pc, #264]	; (80008e8 <getKeyInput+0x18c>)
 80007de:	6013      	str	r3, [r2, #0]
	key2_reg1 = key2_reg2;
 80007e0:	4b42      	ldr	r3, [pc, #264]	; (80008ec <getKeyInput+0x190>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a3f      	ldr	r2, [pc, #252]	; (80008e4 <getKeyInput+0x188>)
 80007e6:	6013      	str	r3, [r2, #0]
	key2_reg2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80007e8:	2110      	movs	r1, #16
 80007ea:	483b      	ldr	r0, [pc, #236]	; (80008d8 <getKeyInput+0x17c>)
 80007ec:	f001 f82e 	bl	800184c <HAL_GPIO_ReadPin>
 80007f0:	4603      	mov	r3, r0
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b3d      	ldr	r3, [pc, #244]	; (80008ec <getKeyInput+0x190>)
 80007f6:	601a      	str	r2, [r3, #0]
	if(key2_reg0 == key2_reg1 && key2_reg1 == key2_reg2)
 80007f8:	4b3b      	ldr	r3, [pc, #236]	; (80008e8 <getKeyInput+0x18c>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <getKeyInput+0x188>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	429a      	cmp	r2, r3
 8000802:	d125      	bne.n	8000850 <getKeyInput+0xf4>
 8000804:	4b37      	ldr	r3, [pc, #220]	; (80008e4 <getKeyInput+0x188>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b38      	ldr	r3, [pc, #224]	; (80008ec <getKeyInput+0x190>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	429a      	cmp	r2, r3
 800080e:	d11f      	bne.n	8000850 <getKeyInput+0xf4>
	{
		if(key2_reg3 != key2_reg2)
 8000810:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <getKeyInput+0x194>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b35      	ldr	r3, [pc, #212]	; (80008ec <getKeyInput+0x190>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	d00d      	beq.n	8000838 <getKeyInput+0xdc>
		{
			key2_reg3 = key2_reg2;
 800081c:	4b33      	ldr	r3, [pc, #204]	; (80008ec <getKeyInput+0x190>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a33      	ldr	r2, [pc, #204]	; (80008f0 <getKeyInput+0x194>)
 8000822:	6013      	str	r3, [r2, #0]
			if(key2_reg2 == PRESSED_STATE)
 8000824:	4b31      	ldr	r3, [pc, #196]	; (80008ec <getKeyInput+0x190>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d111      	bne.n	8000850 <getKeyInput+0xf4>
			{
				flag2Process();
 800082c:	f7ff ff6c 	bl	8000708 <flag2Process>
				timer_for_key_press = 200;
 8000830:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <getKeyInput+0x184>)
 8000832:	22c8      	movs	r2, #200	; 0xc8
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	e00b      	b.n	8000850 <getKeyInput+0xf4>
			}
		}
		else
		{
			timer_for_key_press--;
 8000838:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <getKeyInput+0x184>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3b01      	subs	r3, #1
 800083e:	4a28      	ldr	r2, [pc, #160]	; (80008e0 <getKeyInput+0x184>)
 8000840:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 8000842:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <getKeyInput+0x184>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d102      	bne.n	8000850 <getKeyInput+0xf4>
			{
				key2_reg3 = NORMAL_STATE;
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <getKeyInput+0x194>)
 800084c:	2201      	movs	r2, #1
 800084e:	601a      	str	r2, [r3, #0]
			}
		}
	}

	key3_reg0 = key3_reg1;
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <getKeyInput+0x198>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <getKeyInput+0x19c>)
 8000856:	6013      	str	r3, [r2, #0]
	key3_reg1 = key3_reg2;
 8000858:	4b28      	ldr	r3, [pc, #160]	; (80008fc <getKeyInput+0x1a0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <getKeyInput+0x198>)
 800085e:	6013      	str	r3, [r2, #0]
	key3_reg2 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000860:	2101      	movs	r1, #1
 8000862:	4827      	ldr	r0, [pc, #156]	; (8000900 <getKeyInput+0x1a4>)
 8000864:	f000 fff2 	bl	800184c <HAL_GPIO_ReadPin>
 8000868:	4603      	mov	r3, r0
 800086a:	461a      	mov	r2, r3
 800086c:	4b23      	ldr	r3, [pc, #140]	; (80008fc <getKeyInput+0x1a0>)
 800086e:	601a      	str	r2, [r3, #0]
	if(key3_reg0 == key3_reg1 && key3_reg1 == key3_reg2)
 8000870:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <getKeyInput+0x19c>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <getKeyInput+0x198>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d125      	bne.n	80008c8 <getKeyInput+0x16c>
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <getKeyInput+0x198>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <getKeyInput+0x1a0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	429a      	cmp	r2, r3
 8000886:	d11f      	bne.n	80008c8 <getKeyInput+0x16c>
	{
		if(key3_reg2 != key3_reg3)
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <getKeyInput+0x1a0>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <getKeyInput+0x1a8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	429a      	cmp	r2, r3
 8000892:	d00d      	beq.n	80008b0 <getKeyInput+0x154>
		{
			key3_reg3 = key3_reg2;
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <getKeyInput+0x1a0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a1a      	ldr	r2, [pc, #104]	; (8000904 <getKeyInput+0x1a8>)
 800089a:	6013      	str	r3, [r2, #0]
			if(key3_reg2 == PRESSED_STATE)
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <getKeyInput+0x1a0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d111      	bne.n	80008c8 <getKeyInput+0x16c>
			{
				flag3Process();
 80008a4:	f7ff ff4e 	bl	8000744 <flag3Process>
				timer_for_key_press = 200;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <getKeyInput+0x184>)
 80008aa:	22c8      	movs	r2, #200	; 0xc8
 80008ac:	601a      	str	r2, [r3, #0]
			{
				key3_reg3 = NORMAL_STATE;
			}
		}
	}
}
 80008ae:	e00b      	b.n	80008c8 <getKeyInput+0x16c>
			timer_for_key_press--;
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <getKeyInput+0x184>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <getKeyInput+0x184>)
 80008b8:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <getKeyInput+0x184>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d102      	bne.n	80008c8 <getKeyInput+0x16c>
				key3_reg3 = NORMAL_STATE;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <getKeyInput+0x1a8>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000004 	.word	0x20000004
 80008d0:	20000000 	.word	0x20000000
 80008d4:	20000008 	.word	0x20000008
 80008d8:	40010800 	.word	0x40010800
 80008dc:	2000000c 	.word	0x2000000c
 80008e0:	20000030 	.word	0x20000030
 80008e4:	20000014 	.word	0x20000014
 80008e8:	20000010 	.word	0x20000010
 80008ec:	20000018 	.word	0x20000018
 80008f0:	2000001c 	.word	0x2000001c
 80008f4:	20000024 	.word	0x20000024
 80008f8:	20000020 	.word	0x20000020
 80008fc:	20000028 	.word	0x20000028
 8000900:	40010c00 	.word	0x40010c00
 8000904:	2000002c 	.word	0x2000002c

08000908 <setTrafficRed>:
int green_time = 3;
int yellow_time = 2;

//SET TRAFFIC LIGHT FUNCTION
void setTrafficRed()
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_GPIO_Port, LIGHT2_Pin, RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <setTrafficRed+0x20>)
 8000914:	f000 ffb1 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT3_GPIO_Port, LIGHT3_Pin, SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2108      	movs	r1, #8
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <setTrafficRed+0x24>)
 800091e:	f000 ffac 	bl	800187a <HAL_GPIO_WritePin>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40010800 	.word	0x40010800
 800092c:	40010c00 	.word	0x40010c00

08000930 <setTrafficGreen>:
void setTrafficGreen()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_GPIO_Port, LIGHT2_Pin, SET);
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <setTrafficGreen+0x20>)
 800093c:	f000 ff9d 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT3_GPIO_Port, LIGHT3_Pin, RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2108      	movs	r1, #8
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <setTrafficGreen+0x24>)
 8000946:	f000 ff98 	bl	800187a <HAL_GPIO_WritePin>
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40010800 	.word	0x40010800
 8000954:	40010c00 	.word	0x40010c00

08000958 <setTrafficYellow>:
void setTrafficYellow()
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_GPIO_Port, LIGHT2_Pin, RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <setTrafficYellow+0x20>)
 8000964:	f000 ff89 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT3_GPIO_Port, LIGHT3_Pin, RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2108      	movs	r1, #8
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <setTrafficYellow+0x24>)
 800096e:	f000 ff84 	bl	800187a <HAL_GPIO_WritePin>
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40010800 	.word	0x40010800
 800097c:	40010c00 	.word	0x40010c00

08000980 <setTrafficRed1>:

void setTrafficRed1()
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT4_GPIO_Port, LIGHT4_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2110      	movs	r1, #16
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <setTrafficRed1+0x1c>)
 800098a:	f000 ff76 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT5_GPIO_Port, LIGHT5_Pin, SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2120      	movs	r1, #32
 8000992:	4802      	ldr	r0, [pc, #8]	; (800099c <setTrafficRed1+0x1c>)
 8000994:	f000 ff71 	bl	800187a <HAL_GPIO_WritePin>

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40010c00 	.word	0x40010c00

080009a0 <setTrafficGreen1>:
void setTrafficGreen1()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT4_GPIO_Port, LIGHT4_Pin, SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2110      	movs	r1, #16
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <setTrafficGreen1+0x1c>)
 80009aa:	f000 ff66 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT5_GPIO_Port, LIGHT5_Pin, RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2120      	movs	r1, #32
 80009b2:	4802      	ldr	r0, [pc, #8]	; (80009bc <setTrafficGreen1+0x1c>)
 80009b4:	f000 ff61 	bl	800187a <HAL_GPIO_WritePin>
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40010c00 	.word	0x40010c00

080009c0 <setTrafficYellow1>:
void setTrafficYellow1()
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT4_GPIO_Port, LIGHT4_Pin, RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2110      	movs	r1, #16
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <setTrafficYellow1+0x1c>)
 80009ca:	f000 ff56 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT5_GPIO_Port, LIGHT5_Pin, RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2120      	movs	r1, #32
 80009d2:	4802      	ldr	r0, [pc, #8]	; (80009dc <setTrafficYellow1+0x1c>)
 80009d4:	f000 ff51 	bl	800187a <HAL_GPIO_WritePin>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40010c00 	.word	0x40010c00

080009e0 <toggleTrafficRed>:

void toggleTrafficRed()
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LIGHT2_GPIO_Port, LIGHT2_Pin);
 80009e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <toggleTrafficRed+0x1c>)
 80009ea:	f000 ff5e 	bl	80018aa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT4_GPIO_Port, LIGHT4_Pin);
 80009ee:	2110      	movs	r1, #16
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <toggleTrafficRed+0x20>)
 80009f2:	f000 ff5a 	bl	80018aa <HAL_GPIO_TogglePin>
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40010800 	.word	0x40010800
 8000a00:	40010c00 	.word	0x40010c00

08000a04 <toggleTrafficYellow>:
void toggleTrafficYellow()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LIGHT2_GPIO_Port, LIGHT2_Pin);
 8000a08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0c:	4808      	ldr	r0, [pc, #32]	; (8000a30 <toggleTrafficYellow+0x2c>)
 8000a0e:	f000 ff4c 	bl	80018aa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT3_GPIO_Port, LIGHT3_Pin);
 8000a12:	2108      	movs	r1, #8
 8000a14:	4807      	ldr	r0, [pc, #28]	; (8000a34 <toggleTrafficYellow+0x30>)
 8000a16:	f000 ff48 	bl	80018aa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT4_GPIO_Port, LIGHT4_Pin);
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <toggleTrafficYellow+0x30>)
 8000a1e:	f000 ff44 	bl	80018aa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT5_GPIO_Port, LIGHT5_Pin);
 8000a22:	2120      	movs	r1, #32
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <toggleTrafficYellow+0x30>)
 8000a26:	f000 ff40 	bl	80018aa <HAL_GPIO_TogglePin>
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40010800 	.word	0x40010800
 8000a34:	40010c00 	.word	0x40010c00

08000a38 <toggleTrafficGreen>:
void toggleTrafficGreen()
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LIGHT3_GPIO_Port, LIGHT3_Pin);
 8000a3c:	2108      	movs	r1, #8
 8000a3e:	4804      	ldr	r0, [pc, #16]	; (8000a50 <toggleTrafficGreen+0x18>)
 8000a40:	f000 ff33 	bl	80018aa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT5_GPIO_Port, LIGHT5_Pin);
 8000a44:	2120      	movs	r1, #32
 8000a46:	4802      	ldr	r0, [pc, #8]	; (8000a50 <toggleTrafficGreen+0x18>)
 8000a48:	f000 ff2f 	bl	80018aa <HAL_GPIO_TogglePin>
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40010c00 	.word	0x40010c00

08000a54 <setLedBuffer>:

int led_buffer[4] = {1, 2, 3, 4};
void setLedBuffer(int first_led_time, int second_led_time)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
	led_buffer[0] = first_led_time / 10;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a18      	ldr	r2, [pc, #96]	; (8000ac4 <setLedBuffer+0x70>)
 8000a62:	fb82 1203 	smull	r1, r2, r2, r3
 8000a66:	1092      	asrs	r2, r2, #2
 8000a68:	17db      	asrs	r3, r3, #31
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <setLedBuffer+0x74>)
 8000a6e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = first_led_time % 10;
 8000a70:	6879      	ldr	r1, [r7, #4]
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <setLedBuffer+0x70>)
 8000a74:	fb83 2301 	smull	r2, r3, r3, r1
 8000a78:	109a      	asrs	r2, r3, #2
 8000a7a:	17cb      	asrs	r3, r1, #31
 8000a7c:	1ad2      	subs	r2, r2, r3
 8000a7e:	4613      	mov	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	1aca      	subs	r2, r1, r3
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <setLedBuffer+0x74>)
 8000a8a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = second_led_time / 10;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <setLedBuffer+0x70>)
 8000a90:	fb82 1203 	smull	r1, r2, r2, r3
 8000a94:	1092      	asrs	r2, r2, #2
 8000a96:	17db      	asrs	r3, r3, #31
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <setLedBuffer+0x74>)
 8000a9c:	6093      	str	r3, [r2, #8]
	led_buffer[3] = second_led_time % 10;
 8000a9e:	6839      	ldr	r1, [r7, #0]
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <setLedBuffer+0x70>)
 8000aa2:	fb83 2301 	smull	r2, r3, r3, r1
 8000aa6:	109a      	asrs	r2, r3, #2
 8000aa8:	17cb      	asrs	r3, r1, #31
 8000aaa:	1ad2      	subs	r2, r2, r3
 8000aac:	4613      	mov	r3, r2
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	4413      	add	r3, r2
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	1aca      	subs	r2, r1, r3
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <setLedBuffer+0x74>)
 8000ab8:	60da      	str	r2, [r3, #12]
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	66666667 	.word	0x66666667
 8000ac8:	20000034 	.word	0x20000034

08000acc <updateLedBuffer>:

void updateLedBuffer()
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
	//TODO
	if(led_buffer[1] <= 0)
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <updateLedBuffer+0x54>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	dc08      	bgt.n	8000aea <updateLedBuffer+0x1e>
	{
		led_buffer[0]--;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <updateLedBuffer+0x54>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <updateLedBuffer+0x54>)
 8000ae0:	6013      	str	r3, [r2, #0]
		led_buffer[1] = 9;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <updateLedBuffer+0x54>)
 8000ae4:	2209      	movs	r2, #9
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	e004      	b.n	8000af4 <updateLedBuffer+0x28>
	}
	else
	{
		led_buffer[1]--;
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <updateLedBuffer+0x54>)
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <updateLedBuffer+0x54>)
 8000af2:	6053      	str	r3, [r2, #4]
	}
	if(led_buffer[3] <= 0)
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <updateLedBuffer+0x54>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	dc08      	bgt.n	8000b0e <updateLedBuffer+0x42>
	{
		led_buffer[2]--;
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <updateLedBuffer+0x54>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <updateLedBuffer+0x54>)
 8000b04:	6093      	str	r3, [r2, #8]
		led_buffer[3] = 9;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <updateLedBuffer+0x54>)
 8000b08:	2209      	movs	r2, #9
 8000b0a:	60da      	str	r2, [r3, #12]
	}
	else
	{
		led_buffer[3]--;
	}
}
 8000b0c:	e004      	b.n	8000b18 <updateLedBuffer+0x4c>
		led_buffer[3]--;
 8000b0e:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <updateLedBuffer+0x54>)
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	4a02      	ldr	r2, [pc, #8]	; (8000b20 <updateLedBuffer+0x54>)
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	20000034 	.word	0x20000034

08000b24 <resetInitialState>:

void resetInitialState()
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	count = 0;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <resetInitialState+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, PED_LIGHT1_Pin|LIGHT3_Pin|LIGHT4_Pin|LIGHT5_Pin, SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000b34:	480f      	ldr	r0, [pc, #60]	; (8000b74 <resetInitialState+0x50>)
 8000b36:	f000 fea0 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, PED_LIGHT2_Pin|LIGHT2_Pin, SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <resetInitialState+0x54>)
 8000b42:	f000 fe9a 	bl	800187a <HAL_GPIO_WritePin>

	timer1_flag = 0;
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <resetInitialState+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <resetInitialState+0x5c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
	timer3_flag = 0;
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <resetInitialState+0x60>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
	timer4_flag = 0;
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <resetInitialState+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]

	isButton1Pressed(); // delete all button_flag
 8000b5e:	f7ff fda3 	bl	80006a8 <isButton1Pressed>
	isButton2Pressed();
 8000b62:	f7ff fdbf 	bl	80006e4 <isButton2Pressed>
	isButton3Pressed();
 8000b66:	f7ff fddb 	bl	8000720 <isButton3Pressed>

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000e8 	.word	0x200000e8
 8000b74:	40010c00 	.word	0x40010c00
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	20000100 	.word	0x20000100
 8000b80:	20000104 	.word	0x20000104
 8000b84:	20000108 	.word	0x20000108
 8000b88:	2000010c 	.word	0x2000010c

08000b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b90:	f000 fb72 	bl	8001278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b94:	f000 f826 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b98:	f000 f8ac 	bl	8000cf4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b9c:	f000 f85e 	bl	8000c5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <main+0x48>)
 8000ba2:	f001 fac7 	bl	8002134 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  status = NORMAL_MODE;
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <main+0x4c>)
 8000ba8:	2215      	movs	r2, #21
 8000baa:	601a      	str	r2, [r3, #0]
  SCH_Add_Task(timerRun, 0, 10); 	// setflag function
 8000bac:	220a      	movs	r2, #10
 8000bae:	2100      	movs	r1, #0
 8000bb0:	480a      	ldr	r0, [pc, #40]	; (8000bdc <main+0x50>)
 8000bb2:	f000 f91d 	bl	8000df0 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 10);	// read button flag function every 10 ms
 8000bb6:	220a      	movs	r2, #10
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4809      	ldr	r0, [pc, #36]	; (8000be0 <main+0x54>)
 8000bbc:	f000 f918 	bl	8000df0 <SCH_Add_Task>
  while (1)
  {
	  FSMNormalModeRun();
 8000bc0:	f7ff fc72 	bl	80004a8 <FSMNormalModeRun>
	  FSMModificationModeRun();
 8000bc4:	f7ff fb8a 	bl	80002dc <FSMModificationModeRun>
	  FSMLightModification();
 8000bc8:	f7ff fac0 	bl	800014c <FSMLightModification>
	  SCH_Dispatch_Tasks();
 8000bcc:	f000 f9a2 	bl	8000f14 <SCH_Dispatch_Tasks>
	  FSMNormalModeRun();
 8000bd0:	e7f6      	b.n	8000bc0 <main+0x34>
 8000bd2:	bf00      	nop
 8000bd4:	2000011c 	.word	0x2000011c
 8000bd8:	200000ec 	.word	0x200000ec
 8000bdc:	08000fa9 	.word	0x08000fa9
 8000be0:	0800075d 	.word	0x0800075d

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b090      	sub	sp, #64	; 0x40
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0318 	add.w	r3, r7, #24
 8000bee:	2228      	movs	r2, #40	; 0x28
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 fe70 	bl	80028d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0e:	2310      	movs	r3, #16
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c16:	f107 0318 	add.w	r3, r7, #24
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fe5e 	bl	80018dc <HAL_RCC_OscConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c26:	f000 f8dd 	bl	8000de4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 f8ca 	bl	8001ddc <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c4e:	f000 f8c9 	bl	8000de4 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3740      	adds	r7, #64	; 0x40
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c70:	463b      	mov	r3, r7
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c82:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c90:	2209      	movs	r2, #9
 8000c92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ca0:	4813      	ldr	r0, [pc, #76]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000ca2:	f001 f9f7 	bl	8002094 <HAL_TIM_Base_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cac:	f000 f89a 	bl	8000de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000cbe:	f001 fb8d 	bl	80023dc <HAL_TIM_ConfigClockSource>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cc8:	f000 f88c 	bl	8000de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000cda:	f001 fd59 	bl	8002790 <HAL_TIMEx_MasterConfigSynchronization>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ce4:	f000 f87e 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000011c 	.word	0x2000011c

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <MX_GPIO_Init+0xd0>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a2d      	ldr	r2, [pc, #180]	; (8000dc4 <MX_GPIO_Init+0xd0>)
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <MX_GPIO_Init+0xd0>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0304 	and.w	r3, r3, #4
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d20:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <MX_GPIO_Init+0xd0>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <MX_GPIO_Init+0xd0>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <MX_GPIO_Init+0xd0>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0308 	and.w	r3, r3, #8
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PED_LIGHT1_Pin|LIGHT3_Pin|LIGHT4_Pin|LIGHT5_Pin, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000d3e:	4822      	ldr	r0, [pc, #136]	; (8000dc8 <MX_GPIO_Init+0xd4>)
 8000d40:	f000 fd9b 	bl	800187a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PED_LIGHT2_Pin|LIGHT2_Pin, GPIO_PIN_RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000d4a:	4820      	ldr	r0, [pc, #128]	; (8000dcc <MX_GPIO_Init+0xd8>)
 8000d4c:	f000 fd95 	bl	800187a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PED_BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = PED_BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000d50:	2313      	movs	r3, #19
 8000d52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0308 	add.w	r3, r7, #8
 8000d60:	4619      	mov	r1, r3
 8000d62:	481a      	ldr	r0, [pc, #104]	; (8000dcc <MX_GPIO_Init+0xd8>)
 8000d64:	f000 fbf8 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4813      	ldr	r0, [pc, #76]	; (8000dc8 <MX_GPIO_Init+0xd4>)
 8000d7c:	f000 fbec 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_LIGHT1_Pin LIGHT3_Pin LIGHT4_Pin LIGHT5_Pin */
  GPIO_InitStruct.Pin = PED_LIGHT1_Pin|LIGHT3_Pin|LIGHT4_Pin|LIGHT5_Pin;
 8000d80:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000d84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	4619      	mov	r1, r3
 8000d98:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <MX_GPIO_Init+0xd4>)
 8000d9a:	f000 fbdd 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_LIGHT2_Pin LIGHT2_Pin */
  GPIO_InitStruct.Pin = PED_LIGHT2_Pin|LIGHT2_Pin;
 8000d9e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000da2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2302      	movs	r3, #2
 8000dae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	4619      	mov	r1, r3
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_GPIO_Init+0xd8>)
 8000db8:	f000 fbce 	bl	8001558 <HAL_GPIO_Init>

}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010c00 	.word	0x40010c00
 8000dcc:	40010800 	.word	0x40010800

08000dd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000dd8:	f000 f874 	bl	8000ec4 <SCH_Update>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de8:	b672      	cpsid	i
}
 8000dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dec:	e7fe      	b.n	8000dec <Error_Handler+0x8>
	...

08000df0 <SCH_Add_Task>:
{
    struct task *top;
} stack_task;

void SCH_Add_Task(void (*pTask)(), uint16_t delay, uint16_t period)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	807b      	strh	r3, [r7, #2]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	803b      	strh	r3, [r7, #0]
    struct task *my_task = (struct task *)malloc(sizeof(struct task));
 8000e00:	200c      	movs	r0, #12
 8000e02:	f001 fd59 	bl	80028b8 <malloc>
 8000e06:	4603      	mov	r3, r0
 8000e08:	60fb      	str	r3, [r7, #12]
    my_task->pTask = pTask;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	601a      	str	r2, [r3, #0]
    my_task->counter = delay *FREQ_OF_TIM/1000;
 8000e10:	887b      	ldrh	r3, [r7, #2]
 8000e12:	4a2a      	ldr	r2, [pc, #168]	; (8000ebc <SCH_Add_Task+0xcc>)
 8000e14:	fb82 1203 	smull	r1, r2, r2, r3
 8000e18:	1092      	asrs	r2, r2, #2
 8000e1a:	17db      	asrs	r3, r3, #31
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	809a      	strh	r2, [r3, #4]
    my_task->period = period;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	883a      	ldrh	r2, [r7, #0]
 8000e28:	80da      	strh	r2, [r3, #6]
    my_task->next_task = 0;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
    if (stack_task.top == 0)
 8000e30:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <SCH_Add_Task+0xd0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d103      	bne.n	8000e40 <SCH_Add_Task+0x50>
    {
        stack_task.top = my_task;
 8000e38:	4a21      	ldr	r2, [pc, #132]	; (8000ec0 <SCH_Add_Task+0xd0>)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	6013      	str	r3, [r2, #0]
        return;
 8000e3e:	e039      	b.n	8000eb4 <SCH_Add_Task+0xc4>
    }
    struct task *pre = stack_task.top;
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <SCH_Add_Task+0xd0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	617b      	str	r3, [r7, #20]
    struct task *cur = stack_task.top;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <SCH_Add_Task+0xd0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	613b      	str	r3, [r7, #16]
    while (cur && my_task->counter >= cur->counter)
 8000e4c:	e00c      	b.n	8000e68 <SCH_Add_Task+0x78>
    {
        my_task->counter = my_task->counter - cur->counter;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	889a      	ldrh	r2, [r3, #4]
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	889b      	ldrh	r3, [r3, #4]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	809a      	strh	r2, [r3, #4]
        pre = cur;
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	617b      	str	r3, [r7, #20]
        cur = cur->next_task;
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	613b      	str	r3, [r7, #16]
    while (cur && my_task->counter >= cur->counter)
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d005      	beq.n	8000e7a <SCH_Add_Task+0x8a>
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	889a      	ldrh	r2, [r3, #4]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	889b      	ldrh	r3, [r3, #4]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d2e9      	bcs.n	8000e4e <SCH_Add_Task+0x5e>
    }
    if (pre != cur)
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d006      	beq.n	8000e90 <SCH_Add_Task+0xa0>
    {
        pre->next_task = my_task;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	609a      	str	r2, [r3, #8]
        my_task->next_task = cur;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	e005      	b.n	8000e9c <SCH_Add_Task+0xac>
    }
    else
    {
        my_task->next_task = cur;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	609a      	str	r2, [r3, #8]
        stack_task.top = my_task;
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <SCH_Add_Task+0xd0>)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6013      	str	r3, [r2, #0]
    }
    if (cur)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d007      	beq.n	8000eb2 <SCH_Add_Task+0xc2>
        cur->counter -= my_task->counter;
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	889a      	ldrh	r2, [r3, #4]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	889b      	ldrh	r3, [r3, #4]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	809a      	strh	r2, [r3, #4]
    return;
 8000eb2:	bf00      	nop
}
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	66666667 	.word	0x66666667
 8000ec0:	20000164 	.word	0x20000164

08000ec4 <SCH_Update>:

void SCH_Update(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
    if (stack_task.top == 0)
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <SCH_Update+0x2c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d00b      	beq.n	8000ee8 <SCH_Update+0x24>
        return;
    if (stack_task.top->counter > 0)
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <SCH_Update+0x2c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	889b      	ldrh	r3, [r3, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d007      	beq.n	8000eea <SCH_Update+0x26>
    {
        stack_task.top->counter--;
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <SCH_Update+0x2c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	889a      	ldrh	r2, [r3, #4]
 8000ee0:	3a01      	subs	r2, #1
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	809a      	strh	r2, [r3, #4]
 8000ee6:	e000      	b.n	8000eea <SCH_Update+0x26>
        return;
 8000ee8:	bf00      	nop
    }
}
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	20000164 	.word	0x20000164

08000ef4 <SCH_Delete_Task>:

void SCH_Delete_Task(struct task *del_task)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
    if (del_task == 0)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <SCH_Delete_Task+0x16>
    {
        return;
    }
    free(del_task);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f001 fce0 	bl	80028c8 <free>
 8000f08:	e000      	b.n	8000f0c <SCH_Delete_Task+0x18>
        return;
 8000f0a:	bf00      	nop
}
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
    if (stack_task.top == 0)
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <SCH_Dispatch_Tasks+0x64>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d024      	beq.n	8000f6c <SCH_Dispatch_Tasks+0x58>
        return;
    if (stack_task.top->counter == 0)
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <SCH_Dispatch_Tasks+0x64>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	889b      	ldrh	r3, [r3, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d121      	bne.n	8000f70 <SCH_Dispatch_Tasks+0x5c>
    {
        (*stack_task.top->pTask)();
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <SCH_Dispatch_Tasks+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4798      	blx	r3
        struct task *temp = stack_task.top;
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <SCH_Dispatch_Tasks+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	607b      	str	r3, [r7, #4]
        stack_task.top = stack_task.top->next_task;
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <SCH_Dispatch_Tasks+0x64>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <SCH_Dispatch_Tasks+0x64>)
 8000f42:	6013      	str	r3, [r2, #0]
        temp->next_task = 0;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
        if (temp->period != 0)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	88db      	ldrh	r3, [r3, #6]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d008      	beq.n	8000f64 <SCH_Dispatch_Tasks+0x50>
        {
            SCH_Add_Task(temp->pTask, temp->period, temp->period);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	88d9      	ldrh	r1, [r3, #6]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	88db      	ldrh	r3, [r3, #6]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f7ff ff46 	bl	8000df0 <SCH_Add_Task>
        }
        SCH_Delete_Task(temp);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ffc5 	bl	8000ef4 <SCH_Delete_Task>
        return;
 8000f6a:	e002      	b.n	8000f72 <SCH_Dispatch_Tasks+0x5e>
        return;
 8000f6c:	bf00      	nop
 8000f6e:	e000      	b.n	8000f72 <SCH_Dispatch_Tasks+0x5e>
    }
    return;
 8000f70:	bf00      	nop
}
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000164 	.word	0x20000164

08000f7c <setTimer1>:

int timer1_counter = 0;
int timer1_flag = 0;
// counter for trafic light (already multiple for 100)
void setTimer1(int duration)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	timer1_counter = duration*100;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2264      	movs	r2, #100	; 0x64
 8000f88:	fb02 f303 	mul.w	r3, r2, r3
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <setTimer1+0x24>)
 8000f8e:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <setTimer1+0x28>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	200000f0 	.word	0x200000f0
 8000fa4:	20000100 	.word	0x20000100

08000fa8 <timerRun>:

void timerRun()
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 8000fac:	4b21      	ldr	r3, [pc, #132]	; (8001034 <timerRun+0x8c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	dd0b      	ble.n	8000fcc <timerRun+0x24>
	{
		timer1_counter--;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <timerRun+0x8c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	4a1e      	ldr	r2, [pc, #120]	; (8001034 <timerRun+0x8c>)
 8000fbc:	6013      	str	r3, [r2, #0]

		if(timer1_counter <= 0)
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <timerRun+0x8c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	dc02      	bgt.n	8000fcc <timerRun+0x24>
		{
			timer1_flag = 1;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <timerRun+0x90>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0)
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <timerRun+0x94>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	dd0b      	ble.n	8000fec <timerRun+0x44>
	{
		timer2_counter--;//counter led 7 segment
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <timerRun+0x94>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	4a18      	ldr	r2, [pc, #96]	; (800103c <timerRun+0x94>)
 8000fdc:	6013      	str	r3, [r2, #0]

		if(timer2_counter <= 0) // counter led 7 segment
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <timerRun+0x94>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	dc02      	bgt.n	8000fec <timerRun+0x44>
		{
			timer2_flag = 1;
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <timerRun+0x98>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0)
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <timerRun+0x9c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	dd0b      	ble.n	800100c <timerRun+0x64>
	{
		timer3_counter--;
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <timerRun+0x9c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <timerRun+0x9c>)
 8000ffc:	6013      	str	r3, [r2, #0]

		if(timer3_counter <= 0)
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <timerRun+0x9c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	dc02      	bgt.n	800100c <timerRun+0x64>
		{
			timer3_flag = 1;
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <timerRun+0xa0>)
 8001008:	2201      	movs	r2, #1
 800100a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0)
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <timerRun+0xa4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	dd0b      	ble.n	800102c <timerRun+0x84>
	{
		timer4_counter--;
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <timerRun+0xa4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3b01      	subs	r3, #1
 800101a:	4a0c      	ldr	r2, [pc, #48]	; (800104c <timerRun+0xa4>)
 800101c:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0)
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <timerRun+0xa4>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	dc02      	bgt.n	800102c <timerRun+0x84>
		{
			timer4_flag = 1;
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <timerRun+0xa8>)
 8001028:	2201      	movs	r2, #1
 800102a:	601a      	str	r2, [r3, #0]
		}
	}

}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	200000f0 	.word	0x200000f0
 8001038:	20000100 	.word	0x20000100
 800103c:	200000f4 	.word	0x200000f4
 8001040:	20000104 	.word	0x20000104
 8001044:	200000f8 	.word	0x200000f8
 8001048:	20000108 	.word	0x20000108
 800104c:	200000fc 	.word	0x200000fc
 8001050:	2000010c 	.word	0x2000010c

08001054 <setTimer3>:

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer3(int duration3)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration3;
 800105c:	4a05      	ldr	r2, [pc, #20]	; (8001074 <setTimer3+0x20>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <setTimer3+0x24>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200000f8 	.word	0x200000f8
 8001078:	20000108 	.word	0x20000108

0800107c <setTimer4>:

int timer4_counter = 0;
int timer4_flag = 0;

void setTimer4(int duration4)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	timer4_counter = duration4;
 8001084:	4a05      	ldr	r2, [pc, #20]	; (800109c <setTimer4+0x20>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <setTimer4+0x24>)
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	200000fc 	.word	0x200000fc
 80010a0:	2000010c 	.word	0x2000010c

080010a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_MspInit+0x5c>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <HAL_MspInit+0x5c>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6193      	str	r3, [r2, #24]
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_MspInit+0x5c>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_MspInit+0x5c>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_MspInit+0x5c>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010cc:	61d3      	str	r3, [r2, #28]
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_MspInit+0x5c>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_MspInit+0x60>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_MspInit+0x60>)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	40021000 	.word	0x40021000
 8001104:	40010000 	.word	0x40010000

08001108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001118:	d113      	bne.n	8001142 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HAL_TIM_Base_MspInit+0x44>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <HAL_TIM_Base_MspInit+0x44>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_TIM_Base_MspInit+0x44>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	201c      	movs	r0, #28
 8001138:	f000 f9d7 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800113c:	201c      	movs	r0, #28
 800113e:	f000 f9f0 	bl	8001522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <NMI_Handler+0x4>

08001156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <MemManage_Handler+0x4>

08001162 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <UsageFault_Handler+0x4>

0800116e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr

0800117a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr

08001186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001196:	f000 f8b5 	bl	8001304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <TIM2_IRQHandler+0x10>)
 80011a6:	f001 f811 	bl	80021cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000011c 	.word	0x2000011c

080011b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <_sbrk+0x5c>)
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <_sbrk+0x60>)
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <_sbrk+0x64>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <_sbrk+0x68>)
 80011d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d207      	bcs.n	80011f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e4:	f001 fb3e 	bl	8002864 <__errno>
 80011e8:	4603      	mov	r3, r0
 80011ea:	220c      	movs	r2, #12
 80011ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	e009      	b.n	8001208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <_sbrk+0x64>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <_sbrk+0x64>)
 8001204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20002800 	.word	0x20002800
 8001214:	00000400 	.word	0x00000400
 8001218:	20000110 	.word	0x20000110
 800121c:	20000180 	.word	0x20000180

08001220 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800122c:	f7ff fff8 	bl	8001220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001230:	480b      	ldr	r0, [pc, #44]	; (8001260 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001232:	490c      	ldr	r1, [pc, #48]	; (8001264 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001234:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001248:	4c09      	ldr	r4, [pc, #36]	; (8001270 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001256:	f001 fb0b 	bl	8002870 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800125a:	f7ff fc97 	bl	8000b8c <main>
  bx lr
 800125e:	4770      	bx	lr
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001268:	08002ab4 	.word	0x08002ab4
  ldr r2, =_sbss
 800126c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001270:	2000017c 	.word	0x2000017c

08001274 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC1_2_IRQHandler>
	...

08001278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_Init+0x28>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <HAL_Init+0x28>)
 8001282:	f043 0310 	orr.w	r3, r3, #16
 8001286:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001288:	2003      	movs	r0, #3
 800128a:	f000 f923 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128e:	200f      	movs	r0, #15
 8001290:	f000 f808 	bl	80012a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001294:	f7ff ff06 	bl	80010a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40022000 	.word	0x40022000

080012a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_InitTick+0x54>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_InitTick+0x58>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80012be:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f93b 	bl	800153e <HAL_SYSTICK_Config>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00e      	b.n	80012f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b0f      	cmp	r3, #15
 80012d6:	d80a      	bhi.n	80012ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d8:	2200      	movs	r2, #0
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f000 f903 	bl	80014ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e4:	4a06      	ldr	r2, [pc, #24]	; (8001300 <HAL_InitTick+0x5c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e000      	b.n	80012f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000050 	.word	0x20000050
 80012fc:	20000058 	.word	0x20000058
 8001300:	20000054 	.word	0x20000054

08001304 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_IncTick+0x1c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_IncTick+0x20>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a03      	ldr	r2, [pc, #12]	; (8001324 <HAL_IncTick+0x20>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	20000058 	.word	0x20000058
 8001324:	20000168 	.word	0x20000168

08001328 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b02      	ldr	r3, [pc, #8]	; (8001338 <HAL_GetTick+0x10>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	20000168 	.word	0x20000168

0800133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4906      	ldr	r1, [pc, #24]	; (80013d4 <__NVIC_EnableIRQ+0x34>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a0:	d301      	bcc.n	80014a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00f      	b.n	80014c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <SysTick_Config+0x40>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ae:	210f      	movs	r1, #15
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f7ff ff90 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <SysTick_Config+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <SysTick_Config+0x40>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff2d 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014fc:	f7ff ff42 	bl	8001384 <__NVIC_GetPriorityGrouping>
 8001500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff ff90 	bl	800142c <NVIC_EncodePriority>
 800150c:	4602      	mov	r2, r0
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff5f 	bl	80013d8 <__NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff35 	bl	80013a0 <__NVIC_EnableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffa2 	bl	8001490 <SysTick_Config>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b480      	push	{r7}
 800155a:	b08b      	sub	sp, #44	; 0x2c
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156a:	e148      	b.n	80017fe <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800156c:	2201      	movs	r2, #1
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	429a      	cmp	r2, r3
 8001586:	f040 8137 	bne.w	80017f8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4aa3      	ldr	r2, [pc, #652]	; (800181c <HAL_GPIO_Init+0x2c4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d05e      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 8001594:	4aa1      	ldr	r2, [pc, #644]	; (800181c <HAL_GPIO_Init+0x2c4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d875      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 800159a:	4aa1      	ldr	r2, [pc, #644]	; (8001820 <HAL_GPIO_Init+0x2c8>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d058      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015a0:	4a9f      	ldr	r2, [pc, #636]	; (8001820 <HAL_GPIO_Init+0x2c8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d86f      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015a6:	4a9f      	ldr	r2, [pc, #636]	; (8001824 <HAL_GPIO_Init+0x2cc>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d052      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015ac:	4a9d      	ldr	r2, [pc, #628]	; (8001824 <HAL_GPIO_Init+0x2cc>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d869      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015b2:	4a9d      	ldr	r2, [pc, #628]	; (8001828 <HAL_GPIO_Init+0x2d0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d04c      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015b8:	4a9b      	ldr	r2, [pc, #620]	; (8001828 <HAL_GPIO_Init+0x2d0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d863      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015be:	4a9b      	ldr	r2, [pc, #620]	; (800182c <HAL_GPIO_Init+0x2d4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d046      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015c4:	4a99      	ldr	r2, [pc, #612]	; (800182c <HAL_GPIO_Init+0x2d4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d85d      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015ca:	2b12      	cmp	r3, #18
 80015cc:	d82a      	bhi.n	8001624 <HAL_GPIO_Init+0xcc>
 80015ce:	2b12      	cmp	r3, #18
 80015d0:	d859      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015d2:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <HAL_GPIO_Init+0x80>)
 80015d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d8:	08001653 	.word	0x08001653
 80015dc:	0800162d 	.word	0x0800162d
 80015e0:	0800163f 	.word	0x0800163f
 80015e4:	08001681 	.word	0x08001681
 80015e8:	08001687 	.word	0x08001687
 80015ec:	08001687 	.word	0x08001687
 80015f0:	08001687 	.word	0x08001687
 80015f4:	08001687 	.word	0x08001687
 80015f8:	08001687 	.word	0x08001687
 80015fc:	08001687 	.word	0x08001687
 8001600:	08001687 	.word	0x08001687
 8001604:	08001687 	.word	0x08001687
 8001608:	08001687 	.word	0x08001687
 800160c:	08001687 	.word	0x08001687
 8001610:	08001687 	.word	0x08001687
 8001614:	08001687 	.word	0x08001687
 8001618:	08001687 	.word	0x08001687
 800161c:	08001635 	.word	0x08001635
 8001620:	08001649 	.word	0x08001649
 8001624:	4a82      	ldr	r2, [pc, #520]	; (8001830 <HAL_GPIO_Init+0x2d8>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800162a:	e02c      	b.n	8001686 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	623b      	str	r3, [r7, #32]
          break;
 8001632:	e029      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	3304      	adds	r3, #4
 800163a:	623b      	str	r3, [r7, #32]
          break;
 800163c:	e024      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	3308      	adds	r3, #8
 8001644:	623b      	str	r3, [r7, #32]
          break;
 8001646:	e01f      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	330c      	adds	r3, #12
 800164e:	623b      	str	r3, [r7, #32]
          break;
 8001650:	e01a      	b.n	8001688 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800165a:	2304      	movs	r3, #4
 800165c:	623b      	str	r3, [r7, #32]
          break;
 800165e:	e013      	b.n	8001688 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d105      	bne.n	8001674 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001668:	2308      	movs	r3, #8
 800166a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	611a      	str	r2, [r3, #16]
          break;
 8001672:	e009      	b.n	8001688 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001674:	2308      	movs	r3, #8
 8001676:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	615a      	str	r2, [r3, #20]
          break;
 800167e:	e003      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
          break;
 8001684:	e000      	b.n	8001688 <HAL_GPIO_Init+0x130>
          break;
 8001686:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2bff      	cmp	r3, #255	; 0xff
 800168c:	d801      	bhi.n	8001692 <HAL_GPIO_Init+0x13a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	e001      	b.n	8001696 <HAL_GPIO_Init+0x13e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3304      	adds	r3, #4
 8001696:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2bff      	cmp	r3, #255	; 0xff
 800169c:	d802      	bhi.n	80016a4 <HAL_GPIO_Init+0x14c>
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	e002      	b.n	80016aa <HAL_GPIO_Init+0x152>
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	3b08      	subs	r3, #8
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	210f      	movs	r1, #15
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	401a      	ands	r2, r3
 80016bc:	6a39      	ldr	r1, [r7, #32]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	431a      	orrs	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 8090 	beq.w	80017f8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016d8:	4b56      	ldr	r3, [pc, #344]	; (8001834 <HAL_GPIO_Init+0x2dc>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a55      	ldr	r2, [pc, #340]	; (8001834 <HAL_GPIO_Init+0x2dc>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_GPIO_Init+0x2dc>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016f0:	4a51      	ldr	r2, [pc, #324]	; (8001838 <HAL_GPIO_Init+0x2e0>)
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a49      	ldr	r2, [pc, #292]	; (800183c <HAL_GPIO_Init+0x2e4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d00d      	beq.n	8001738 <HAL_GPIO_Init+0x1e0>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a48      	ldr	r2, [pc, #288]	; (8001840 <HAL_GPIO_Init+0x2e8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d007      	beq.n	8001734 <HAL_GPIO_Init+0x1dc>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a47      	ldr	r2, [pc, #284]	; (8001844 <HAL_GPIO_Init+0x2ec>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d101      	bne.n	8001730 <HAL_GPIO_Init+0x1d8>
 800172c:	2302      	movs	r3, #2
 800172e:	e004      	b.n	800173a <HAL_GPIO_Init+0x1e2>
 8001730:	2303      	movs	r3, #3
 8001732:	e002      	b.n	800173a <HAL_GPIO_Init+0x1e2>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_GPIO_Init+0x1e2>
 8001738:	2300      	movs	r3, #0
 800173a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173c:	f002 0203 	and.w	r2, r2, #3
 8001740:	0092      	lsls	r2, r2, #2
 8001742:	4093      	lsls	r3, r2
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800174a:	493b      	ldr	r1, [pc, #236]	; (8001838 <HAL_GPIO_Init+0x2e0>)
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001764:	4b38      	ldr	r3, [pc, #224]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	4937      	ldr	r1, [pc, #220]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	608b      	str	r3, [r1, #8]
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001772:	4b35      	ldr	r3, [pc, #212]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	43db      	mvns	r3, r3
 800177a:	4933      	ldr	r1, [pc, #204]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 800177c:	4013      	ands	r3, r2
 800177e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800178c:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	492d      	ldr	r1, [pc, #180]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	60cb      	str	r3, [r1, #12]
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800179a:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	4929      	ldr	r1, [pc, #164]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	4923      	ldr	r1, [pc, #140]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	491f      	ldr	r1, [pc, #124]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d006      	beq.n	80017ea <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4919      	ldr	r1, [pc, #100]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	4915      	ldr	r1, [pc, #84]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	3301      	adds	r3, #1
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	fa22 f303 	lsr.w	r3, r2, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	f47f aeaf 	bne.w	800156c <HAL_GPIO_Init+0x14>
  }
}
 800180e:	bf00      	nop
 8001810:	bf00      	nop
 8001812:	372c      	adds	r7, #44	; 0x2c
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	10320000 	.word	0x10320000
 8001820:	10310000 	.word	0x10310000
 8001824:	10220000 	.word	0x10220000
 8001828:	10210000 	.word	0x10210000
 800182c:	10120000 	.word	0x10120000
 8001830:	10110000 	.word	0x10110000
 8001834:	40021000 	.word	0x40021000
 8001838:	40010000 	.word	0x40010000
 800183c:	40010800 	.word	0x40010800
 8001840:	40010c00 	.word	0x40010c00
 8001844:	40011000 	.word	0x40011000
 8001848:	40010400 	.word	0x40010400

0800184c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	887b      	ldrh	r3, [r7, #2]
 800185e:	4013      	ands	r3, r2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e001      	b.n	800186e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	807b      	strh	r3, [r7, #2]
 8001886:	4613      	mov	r3, r2
 8001888:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800188a:	787b      	ldrb	r3, [r7, #1]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001890:	887a      	ldrh	r2, [r7, #2]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001896:	e003      	b.n	80018a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001898:	887b      	ldrh	r3, [r7, #2]
 800189a:	041a      	lsls	r2, r3, #16
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	611a      	str	r2, [r3, #16]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b085      	sub	sp, #20
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	460b      	mov	r3, r1
 80018b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018bc:	887a      	ldrh	r2, [r7, #2]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4013      	ands	r3, r2
 80018c2:	041a      	lsls	r2, r3, #16
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	400b      	ands	r3, r1
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	611a      	str	r2, [r3, #16]
}
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e26c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 8087 	beq.w	8001a0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018fc:	4b92      	ldr	r3, [pc, #584]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b04      	cmp	r3, #4
 8001906:	d00c      	beq.n	8001922 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001908:	4b8f      	ldr	r3, [pc, #572]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d112      	bne.n	800193a <HAL_RCC_OscConfig+0x5e>
 8001914:	4b8c      	ldr	r3, [pc, #560]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001920:	d10b      	bne.n	800193a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001922:	4b89      	ldr	r3, [pc, #548]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d06c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x12c>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d168      	bne.n	8001a08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e246      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x76>
 8001944:	4b80      	ldr	r3, [pc, #512]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a7f      	ldr	r2, [pc, #508]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800194a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	e02e      	b.n	80019b0 <HAL_RCC_OscConfig+0xd4>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x98>
 800195a:	4b7b      	ldr	r3, [pc, #492]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a7a      	ldr	r2, [pc, #488]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b78      	ldr	r3, [pc, #480]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a77      	ldr	r2, [pc, #476]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800196c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e01d      	b.n	80019b0 <HAL_RCC_OscConfig+0xd4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0xbc>
 800197e:	4b72      	ldr	r3, [pc, #456]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a71      	ldr	r2, [pc, #452]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	4b6f      	ldr	r3, [pc, #444]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a6e      	ldr	r2, [pc, #440]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e00b      	b.n	80019b0 <HAL_RCC_OscConfig+0xd4>
 8001998:	4b6b      	ldr	r3, [pc, #428]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a6a      	ldr	r2, [pc, #424]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800199e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b68      	ldr	r3, [pc, #416]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a67      	ldr	r2, [pc, #412]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d013      	beq.n	80019e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fcb6 	bl	8001328 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff fcb2 	bl	8001328 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1fa      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4b5d      	ldr	r3, [pc, #372]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0xe4>
 80019de:	e014      	b.n	8001a0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fca2 	bl	8001328 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e8:	f7ff fc9e 	bl	8001328 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b64      	cmp	r3, #100	; 0x64
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e1e6      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fa:	4b53      	ldr	r3, [pc, #332]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x10c>
 8001a06:	e000      	b.n	8001a0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d063      	beq.n	8001ade <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a16:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00b      	beq.n	8001a3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a22:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d11c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x18c>
 8001a2e:	4b46      	ldr	r3, [pc, #280]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d116      	bne.n	8001a68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3a:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <HAL_RCC_OscConfig+0x176>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e1ba      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4939      	ldr	r1, [pc, #228]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a66:	e03a      	b.n	8001ade <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d020      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a70:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff fc57 	bl	8001328 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fc53 	bl	8001328 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e19b      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4927      	ldr	r1, [pc, #156]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	600b      	str	r3, [r1, #0]
 8001ab0:	e015      	b.n	8001ade <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab2:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fc36 	bl	8001328 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac0:	f7ff fc32 	bl	8001328 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e17a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d03a      	beq.n	8001b60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d019      	beq.n	8001b26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af8:	f7ff fc16 	bl	8001328 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b00:	f7ff fc12 	bl	8001328 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e15a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f000 fa9a 	bl	8002058 <RCC_Delay>
 8001b24:	e01c      	b.n	8001b60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2c:	f7ff fbfc 	bl	8001328 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b32:	e00f      	b.n	8001b54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b34:	f7ff fbf8 	bl	8001328 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d908      	bls.n	8001b54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e140      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	42420000 	.word	0x42420000
 8001b50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b54:	4b9e      	ldr	r3, [pc, #632]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e9      	bne.n	8001b34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80a6 	beq.w	8001cba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b72:	4b97      	ldr	r3, [pc, #604]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10d      	bne.n	8001b9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	4b94      	ldr	r3, [pc, #592]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	4a93      	ldr	r2, [pc, #588]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	61d3      	str	r3, [r2, #28]
 8001b8a:	4b91      	ldr	r3, [pc, #580]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b96:	2301      	movs	r3, #1
 8001b98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9a:	4b8e      	ldr	r3, [pc, #568]	; (8001dd4 <HAL_RCC_OscConfig+0x4f8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d118      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba6:	4b8b      	ldr	r3, [pc, #556]	; (8001dd4 <HAL_RCC_OscConfig+0x4f8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a8a      	ldr	r2, [pc, #552]	; (8001dd4 <HAL_RCC_OscConfig+0x4f8>)
 8001bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff fbb9 	bl	8001328 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bba:	f7ff fbb5 	bl	8001328 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b64      	cmp	r3, #100	; 0x64
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e0fd      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bcc:	4b81      	ldr	r3, [pc, #516]	; (8001dd4 <HAL_RCC_OscConfig+0x4f8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d106      	bne.n	8001bee <HAL_RCC_OscConfig+0x312>
 8001be0:	4b7b      	ldr	r3, [pc, #492]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	4a7a      	ldr	r2, [pc, #488]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6213      	str	r3, [r2, #32]
 8001bec:	e02d      	b.n	8001c4a <HAL_RCC_OscConfig+0x36e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x334>
 8001bf6:	4b76      	ldr	r3, [pc, #472]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a75      	ldr	r2, [pc, #468]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	6213      	str	r3, [r2, #32]
 8001c02:	4b73      	ldr	r3, [pc, #460]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	4a72      	ldr	r2, [pc, #456]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	f023 0304 	bic.w	r3, r3, #4
 8001c0c:	6213      	str	r3, [r2, #32]
 8001c0e:	e01c      	b.n	8001c4a <HAL_RCC_OscConfig+0x36e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b05      	cmp	r3, #5
 8001c16:	d10c      	bne.n	8001c32 <HAL_RCC_OscConfig+0x356>
 8001c18:	4b6d      	ldr	r3, [pc, #436]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4a6c      	ldr	r2, [pc, #432]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	6213      	str	r3, [r2, #32]
 8001c24:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4a69      	ldr	r2, [pc, #420]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6213      	str	r3, [r2, #32]
 8001c30:	e00b      	b.n	8001c4a <HAL_RCC_OscConfig+0x36e>
 8001c32:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a66      	ldr	r2, [pc, #408]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6213      	str	r3, [r2, #32]
 8001c3e:	4b64      	ldr	r3, [pc, #400]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	4a63      	ldr	r2, [pc, #396]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d015      	beq.n	8001c7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c52:	f7ff fb69 	bl	8001328 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7ff fb65 	bl	8001328 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e0ab      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	4b57      	ldr	r3, [pc, #348]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0ee      	beq.n	8001c5a <HAL_RCC_OscConfig+0x37e>
 8001c7c:	e014      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fb53 	bl	8001328 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f7ff fb4f 	bl	8001328 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e095      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c9c:	4b4c      	ldr	r3, [pc, #304]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1ee      	bne.n	8001c86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ca8:	7dfb      	ldrb	r3, [r7, #23]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d105      	bne.n	8001cba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cae:	4b48      	ldr	r3, [pc, #288]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a47      	ldr	r2, [pc, #284]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8081 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc4:	4b42      	ldr	r3, [pc, #264]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d061      	beq.n	8001d94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d146      	bne.n	8001d66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd8:	4b3f      	ldr	r3, [pc, #252]	; (8001dd8 <HAL_RCC_OscConfig+0x4fc>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cde:	f7ff fb23 	bl	8001328 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce6:	f7ff fb1f 	bl	8001328 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e067      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf8:	4b35      	ldr	r3, [pc, #212]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f0      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0c:	d108      	bne.n	8001d20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d0e:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	492d      	ldr	r1, [pc, #180]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d20:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a19      	ldr	r1, [r3, #32]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	430b      	orrs	r3, r1
 8001d32:	4927      	ldr	r1, [pc, #156]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_RCC_OscConfig+0x4fc>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7ff faf3 	bl	8001328 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d46:	f7ff faef 	bl	8001328 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e037      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x46a>
 8001d64:	e02f      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d66:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <HAL_RCC_OscConfig+0x4fc>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fadc 	bl	8001328 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff fad8 	bl	8001328 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e020      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x498>
 8001d92:	e018      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e013      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	42420060 	.word	0x42420060

08001ddc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0d0      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df0:	4b6a      	ldr	r3, [pc, #424]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d910      	bls.n	8001e20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b67      	ldr	r3, [pc, #412]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 0207 	bic.w	r2, r3, #7
 8001e06:	4965      	ldr	r1, [pc, #404]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0b8      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d020      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e38:	4b59      	ldr	r3, [pc, #356]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4a58      	ldr	r2, [pc, #352]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e50:	4b53      	ldr	r3, [pc, #332]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	4a52      	ldr	r2, [pc, #328]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e5c:	4b50      	ldr	r3, [pc, #320]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	494d      	ldr	r1, [pc, #308]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d040      	beq.n	8001efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d107      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	4b47      	ldr	r3, [pc, #284]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d115      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e07f      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e073      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e06b      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eba:	4b39      	ldr	r3, [pc, #228]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f023 0203 	bic.w	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4936      	ldr	r1, [pc, #216]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ecc:	f7ff fa2c 	bl	8001328 <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed4:	f7ff fa28 	bl	8001328 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e053      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 020c 	and.w	r2, r3, #12
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d1eb      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001efc:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d210      	bcs.n	8001f2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 0207 	bic.w	r2, r3, #7
 8001f12:	4922      	ldr	r1, [pc, #136]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e032      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4916      	ldr	r1, [pc, #88]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	490e      	ldr	r1, [pc, #56]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f6a:	f000 f821 	bl	8001fb0 <HAL_RCC_GetSysClockFreq>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	490a      	ldr	r1, [pc, #40]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f7c:	5ccb      	ldrb	r3, [r1, r3]
 8001f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f82:	4a09      	ldr	r2, [pc, #36]	; (8001fa8 <HAL_RCC_ClockConfig+0x1cc>)
 8001f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_RCC_ClockConfig+0x1d0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff f98a 	bl	80012a4 <HAL_InitTick>

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40022000 	.word	0x40022000
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	08002a88 	.word	0x08002a88
 8001fa8:	20000050 	.word	0x20000050
 8001fac:	20000054 	.word	0x20000054

08001fb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fca:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d002      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x30>
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d003      	beq.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x36>
 8001fde:	e027      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fe2:	613b      	str	r3, [r7, #16]
      break;
 8001fe4:	e027      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	0c9b      	lsrs	r3, r3, #18
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	4a17      	ldr	r2, [pc, #92]	; (800204c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
 8001ff2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d010      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_RCC_GetSysClockFreq+0x94>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	0c5b      	lsrs	r3, r3, #17
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	4a11      	ldr	r2, [pc, #68]	; (8002050 <HAL_RCC_GetSysClockFreq+0xa0>)
 800200a:	5cd3      	ldrb	r3, [r2, r3]
 800200c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <HAL_RCC_GetSysClockFreq+0x98>)
 8002012:	fb02 f203 	mul.w	r2, r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	fbb2 f3f3 	udiv	r3, r2, r3
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	e004      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	613b      	str	r3, [r7, #16]
      break;
 800202e:	e002      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_RCC_GetSysClockFreq+0x98>)
 8002032:	613b      	str	r3, [r7, #16]
      break;
 8002034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002036:	693b      	ldr	r3, [r7, #16]
}
 8002038:	4618      	mov	r0, r3
 800203a:	371c      	adds	r7, #28
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	007a1200 	.word	0x007a1200
 800204c:	08002a98 	.word	0x08002a98
 8002050:	08002aa8 	.word	0x08002aa8
 8002054:	003d0900 	.word	0x003d0900

08002058 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <RCC_Delay+0x34>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <RCC_Delay+0x38>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	0a5b      	lsrs	r3, r3, #9
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002074:	bf00      	nop
  }
  while (Delay --);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1e5a      	subs	r2, r3, #1
 800207a:	60fa      	str	r2, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f9      	bne.n	8002074 <RCC_Delay+0x1c>
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	20000050 	.word	0x20000050
 8002090:	10624dd3 	.word	0x10624dd3

08002094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e041      	b.n	800212a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d106      	bne.n	80020c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff f824 	bl	8001108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3304      	adds	r3, #4
 80020d0:	4619      	mov	r1, r3
 80020d2:	4610      	mov	r0, r2
 80020d4:	f000 fa6e 	bl	80025b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d001      	beq.n	800214c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e035      	b.n	80021b8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <HAL_TIM_Base_Start_IT+0x90>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_TIM_Base_Start_IT+0x4e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002176:	d004      	beq.n	8002182 <HAL_TIM_Base_Start_IT+0x4e>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <HAL_TIM_Base_Start_IT+0x94>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d111      	bne.n	80021a6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b06      	cmp	r3, #6
 8002192:	d010      	beq.n	80021b6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a4:	e007      	b.n	80021b6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40012c00 	.word	0x40012c00
 80021c8:	40000400 	.word	0x40000400

080021cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d122      	bne.n	8002228 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d11b      	bne.n	8002228 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0202 	mvn.w	r2, #2
 80021f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f9b4 	bl	800257c <HAL_TIM_IC_CaptureCallback>
 8002214:	e005      	b.n	8002222 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f9a7 	bl	800256a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f9b6 	bl	800258e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b04      	cmp	r3, #4
 8002234:	d122      	bne.n	800227c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b04      	cmp	r3, #4
 8002242:	d11b      	bne.n	800227c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0204 	mvn.w	r2, #4
 800224c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f98a 	bl	800257c <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f97d 	bl	800256a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f98c 	bl	800258e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b08      	cmp	r3, #8
 8002288:	d122      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b08      	cmp	r3, #8
 8002296:	d11b      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0208 	mvn.w	r2, #8
 80022a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2204      	movs	r2, #4
 80022a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f960 	bl	800257c <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f953 	bl	800256a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f962 	bl	800258e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	2b10      	cmp	r3, #16
 80022dc:	d122      	bne.n	8002324 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b10      	cmp	r3, #16
 80022ea:	d11b      	bne.n	8002324 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0210 	mvn.w	r2, #16
 80022f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2208      	movs	r2, #8
 80022fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f936 	bl	800257c <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f929 	bl	800256a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f938 	bl	800258e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b01      	cmp	r3, #1
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b01      	cmp	r3, #1
 800233e:	d107      	bne.n	8002350 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0201 	mvn.w	r2, #1
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe fd40 	bl	8000dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235a:	2b80      	cmp	r3, #128	; 0x80
 800235c:	d10e      	bne.n	800237c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002368:	2b80      	cmp	r3, #128	; 0x80
 800236a:	d107      	bne.n	800237c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fa6b 	bl	8002852 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002386:	2b40      	cmp	r3, #64	; 0x40
 8002388:	d10e      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	d107      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f8fc 	bl	80025a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d10e      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d107      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0220 	mvn.w	r2, #32
 80023cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fa36 	bl	8002840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_TIM_ConfigClockSource+0x1c>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e0b4      	b.n	8002562 <HAL_TIM_ConfigClockSource+0x186>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800241e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002430:	d03e      	beq.n	80024b0 <HAL_TIM_ConfigClockSource+0xd4>
 8002432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002436:	f200 8087 	bhi.w	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 800243a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243e:	f000 8086 	beq.w	800254e <HAL_TIM_ConfigClockSource+0x172>
 8002442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002446:	d87f      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002448:	2b70      	cmp	r3, #112	; 0x70
 800244a:	d01a      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0xa6>
 800244c:	2b70      	cmp	r3, #112	; 0x70
 800244e:	d87b      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002450:	2b60      	cmp	r3, #96	; 0x60
 8002452:	d050      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0x11a>
 8002454:	2b60      	cmp	r3, #96	; 0x60
 8002456:	d877      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002458:	2b50      	cmp	r3, #80	; 0x50
 800245a:	d03c      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0xfa>
 800245c:	2b50      	cmp	r3, #80	; 0x50
 800245e:	d873      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	d058      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0x13a>
 8002464:	2b40      	cmp	r3, #64	; 0x40
 8002466:	d86f      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002468:	2b30      	cmp	r3, #48	; 0x30
 800246a:	d064      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15a>
 800246c:	2b30      	cmp	r3, #48	; 0x30
 800246e:	d86b      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002470:	2b20      	cmp	r3, #32
 8002472:	d060      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15a>
 8002474:	2b20      	cmp	r3, #32
 8002476:	d867      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002478:	2b00      	cmp	r3, #0
 800247a:	d05c      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15a>
 800247c:	2b10      	cmp	r3, #16
 800247e:	d05a      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15a>
 8002480:	e062      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6899      	ldr	r1, [r3, #8]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f000 f95e 	bl	8002752 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	609a      	str	r2, [r3, #8]
      break;
 80024ae:	e04f      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6899      	ldr	r1, [r3, #8]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f000 f947 	bl	8002752 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024d2:	609a      	str	r2, [r3, #8]
      break;
 80024d4:	e03c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6859      	ldr	r1, [r3, #4]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	461a      	mov	r2, r3
 80024e4:	f000 f8be 	bl	8002664 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2150      	movs	r1, #80	; 0x50
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f915 	bl	800271e <TIM_ITRx_SetConfig>
      break;
 80024f4:	e02c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6859      	ldr	r1, [r3, #4]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	461a      	mov	r2, r3
 8002504:	f000 f8dc 	bl	80026c0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2160      	movs	r1, #96	; 0x60
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f905 	bl	800271e <TIM_ITRx_SetConfig>
      break;
 8002514:	e01c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6859      	ldr	r1, [r3, #4]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	461a      	mov	r2, r3
 8002524:	f000 f89e 	bl	8002664 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2140      	movs	r1, #64	; 0x40
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f8f5 	bl	800271e <TIM_ITRx_SetConfig>
      break;
 8002534:	e00c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4619      	mov	r1, r3
 8002540:	4610      	mov	r0, r2
 8002542:	f000 f8ec 	bl	800271e <TIM_ITRx_SetConfig>
      break;
 8002546:	e003      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
      break;
 800254c:	e000      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800254e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
	...

080025b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a25      	ldr	r2, [pc, #148]	; (800265c <TIM_Base_SetConfig+0xa8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d007      	beq.n	80025dc <TIM_Base_SetConfig+0x28>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d2:	d003      	beq.n	80025dc <TIM_Base_SetConfig+0x28>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a22      	ldr	r2, [pc, #136]	; (8002660 <TIM_Base_SetConfig+0xac>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d108      	bne.n	80025ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a1a      	ldr	r2, [pc, #104]	; (800265c <TIM_Base_SetConfig+0xa8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d007      	beq.n	8002606 <TIM_Base_SetConfig+0x52>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fc:	d003      	beq.n	8002606 <TIM_Base_SetConfig+0x52>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a17      	ldr	r2, [pc, #92]	; (8002660 <TIM_Base_SetConfig+0xac>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d108      	bne.n	8002618 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800260c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4313      	orrs	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a07      	ldr	r2, [pc, #28]	; (800265c <TIM_Base_SetConfig+0xa8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d103      	bne.n	800264c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	615a      	str	r2, [r3, #20]
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40000400 	.word	0x40000400

08002664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	f023 0201 	bic.w	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800268e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f023 030a 	bic.w	r3, r3, #10
 80026a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	621a      	str	r2, [r3, #32]
}
 80026b6:	bf00      	nop
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	f023 0210 	bic.w	r2, r3, #16
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	031b      	lsls	r3, r3, #12
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	621a      	str	r2, [r3, #32]
}
 8002714:	bf00      	nop
 8002716:	371c      	adds	r7, #28
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr

0800271e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800271e:	b480      	push	{r7}
 8002720:	b085      	sub	sp, #20
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	f043 0307 	orr.w	r3, r3, #7
 8002740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	609a      	str	r2, [r3, #8]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002752:	b480      	push	{r7}
 8002754:	b087      	sub	sp, #28
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800276c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	021a      	lsls	r2, r3, #8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	431a      	orrs	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	4313      	orrs	r3, r2
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	609a      	str	r2, [r3, #8]
}
 8002786:	bf00      	nop
 8002788:	371c      	adds	r7, #28
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e041      	b.n	800282c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a14      	ldr	r2, [pc, #80]	; (8002838 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d009      	beq.n	8002800 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f4:	d004      	beq.n	8002800 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a10      	ldr	r2, [pc, #64]	; (800283c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d10c      	bne.n	800281a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002806:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	4313      	orrs	r3, r2
 8002810:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40012c00 	.word	0x40012c00
 800283c:	40000400 	.word	0x40000400

08002840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <__errno>:
 8002864:	4b01      	ldr	r3, [pc, #4]	; (800286c <__errno+0x8>)
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	2000005c 	.word	0x2000005c

08002870 <__libc_init_array>:
 8002870:	b570      	push	{r4, r5, r6, lr}
 8002872:	2600      	movs	r6, #0
 8002874:	4d0c      	ldr	r5, [pc, #48]	; (80028a8 <__libc_init_array+0x38>)
 8002876:	4c0d      	ldr	r4, [pc, #52]	; (80028ac <__libc_init_array+0x3c>)
 8002878:	1b64      	subs	r4, r4, r5
 800287a:	10a4      	asrs	r4, r4, #2
 800287c:	42a6      	cmp	r6, r4
 800287e:	d109      	bne.n	8002894 <__libc_init_array+0x24>
 8002880:	f000 f8f6 	bl	8002a70 <_init>
 8002884:	2600      	movs	r6, #0
 8002886:	4d0a      	ldr	r5, [pc, #40]	; (80028b0 <__libc_init_array+0x40>)
 8002888:	4c0a      	ldr	r4, [pc, #40]	; (80028b4 <__libc_init_array+0x44>)
 800288a:	1b64      	subs	r4, r4, r5
 800288c:	10a4      	asrs	r4, r4, #2
 800288e:	42a6      	cmp	r6, r4
 8002890:	d105      	bne.n	800289e <__libc_init_array+0x2e>
 8002892:	bd70      	pop	{r4, r5, r6, pc}
 8002894:	f855 3b04 	ldr.w	r3, [r5], #4
 8002898:	4798      	blx	r3
 800289a:	3601      	adds	r6, #1
 800289c:	e7ee      	b.n	800287c <__libc_init_array+0xc>
 800289e:	f855 3b04 	ldr.w	r3, [r5], #4
 80028a2:	4798      	blx	r3
 80028a4:	3601      	adds	r6, #1
 80028a6:	e7f2      	b.n	800288e <__libc_init_array+0x1e>
 80028a8:	08002aac 	.word	0x08002aac
 80028ac:	08002aac 	.word	0x08002aac
 80028b0:	08002aac 	.word	0x08002aac
 80028b4:	08002ab0 	.word	0x08002ab0

080028b8 <malloc>:
 80028b8:	4b02      	ldr	r3, [pc, #8]	; (80028c4 <malloc+0xc>)
 80028ba:	4601      	mov	r1, r0
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	f000 b85f 	b.w	8002980 <_malloc_r>
 80028c2:	bf00      	nop
 80028c4:	2000005c 	.word	0x2000005c

080028c8 <free>:
 80028c8:	4b02      	ldr	r3, [pc, #8]	; (80028d4 <free+0xc>)
 80028ca:	4601      	mov	r1, r0
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	f000 b80b 	b.w	80028e8 <_free_r>
 80028d2:	bf00      	nop
 80028d4:	2000005c 	.word	0x2000005c

080028d8 <memset>:
 80028d8:	4603      	mov	r3, r0
 80028da:	4402      	add	r2, r0
 80028dc:	4293      	cmp	r3, r2
 80028de:	d100      	bne.n	80028e2 <memset+0xa>
 80028e0:	4770      	bx	lr
 80028e2:	f803 1b01 	strb.w	r1, [r3], #1
 80028e6:	e7f9      	b.n	80028dc <memset+0x4>

080028e8 <_free_r>:
 80028e8:	b538      	push	{r3, r4, r5, lr}
 80028ea:	4605      	mov	r5, r0
 80028ec:	2900      	cmp	r1, #0
 80028ee:	d043      	beq.n	8002978 <_free_r+0x90>
 80028f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028f4:	1f0c      	subs	r4, r1, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bfb8      	it	lt
 80028fa:	18e4      	addlt	r4, r4, r3
 80028fc:	f000 f8aa 	bl	8002a54 <__malloc_lock>
 8002900:	4a1e      	ldr	r2, [pc, #120]	; (800297c <_free_r+0x94>)
 8002902:	6813      	ldr	r3, [r2, #0]
 8002904:	4610      	mov	r0, r2
 8002906:	b933      	cbnz	r3, 8002916 <_free_r+0x2e>
 8002908:	6063      	str	r3, [r4, #4]
 800290a:	6014      	str	r4, [r2, #0]
 800290c:	4628      	mov	r0, r5
 800290e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002912:	f000 b8a5 	b.w	8002a60 <__malloc_unlock>
 8002916:	42a3      	cmp	r3, r4
 8002918:	d90a      	bls.n	8002930 <_free_r+0x48>
 800291a:	6821      	ldr	r1, [r4, #0]
 800291c:	1862      	adds	r2, r4, r1
 800291e:	4293      	cmp	r3, r2
 8002920:	bf01      	itttt	eq
 8002922:	681a      	ldreq	r2, [r3, #0]
 8002924:	685b      	ldreq	r3, [r3, #4]
 8002926:	1852      	addeq	r2, r2, r1
 8002928:	6022      	streq	r2, [r4, #0]
 800292a:	6063      	str	r3, [r4, #4]
 800292c:	6004      	str	r4, [r0, #0]
 800292e:	e7ed      	b.n	800290c <_free_r+0x24>
 8002930:	461a      	mov	r2, r3
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	b10b      	cbz	r3, 800293a <_free_r+0x52>
 8002936:	42a3      	cmp	r3, r4
 8002938:	d9fa      	bls.n	8002930 <_free_r+0x48>
 800293a:	6811      	ldr	r1, [r2, #0]
 800293c:	1850      	adds	r0, r2, r1
 800293e:	42a0      	cmp	r0, r4
 8002940:	d10b      	bne.n	800295a <_free_r+0x72>
 8002942:	6820      	ldr	r0, [r4, #0]
 8002944:	4401      	add	r1, r0
 8002946:	1850      	adds	r0, r2, r1
 8002948:	4283      	cmp	r3, r0
 800294a:	6011      	str	r1, [r2, #0]
 800294c:	d1de      	bne.n	800290c <_free_r+0x24>
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4401      	add	r1, r0
 8002954:	6011      	str	r1, [r2, #0]
 8002956:	6053      	str	r3, [r2, #4]
 8002958:	e7d8      	b.n	800290c <_free_r+0x24>
 800295a:	d902      	bls.n	8002962 <_free_r+0x7a>
 800295c:	230c      	movs	r3, #12
 800295e:	602b      	str	r3, [r5, #0]
 8002960:	e7d4      	b.n	800290c <_free_r+0x24>
 8002962:	6820      	ldr	r0, [r4, #0]
 8002964:	1821      	adds	r1, r4, r0
 8002966:	428b      	cmp	r3, r1
 8002968:	bf01      	itttt	eq
 800296a:	6819      	ldreq	r1, [r3, #0]
 800296c:	685b      	ldreq	r3, [r3, #4]
 800296e:	1809      	addeq	r1, r1, r0
 8002970:	6021      	streq	r1, [r4, #0]
 8002972:	6063      	str	r3, [r4, #4]
 8002974:	6054      	str	r4, [r2, #4]
 8002976:	e7c9      	b.n	800290c <_free_r+0x24>
 8002978:	bd38      	pop	{r3, r4, r5, pc}
 800297a:	bf00      	nop
 800297c:	20000114 	.word	0x20000114

08002980 <_malloc_r>:
 8002980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002982:	1ccd      	adds	r5, r1, #3
 8002984:	f025 0503 	bic.w	r5, r5, #3
 8002988:	3508      	adds	r5, #8
 800298a:	2d0c      	cmp	r5, #12
 800298c:	bf38      	it	cc
 800298e:	250c      	movcc	r5, #12
 8002990:	2d00      	cmp	r5, #0
 8002992:	4606      	mov	r6, r0
 8002994:	db01      	blt.n	800299a <_malloc_r+0x1a>
 8002996:	42a9      	cmp	r1, r5
 8002998:	d903      	bls.n	80029a2 <_malloc_r+0x22>
 800299a:	230c      	movs	r3, #12
 800299c:	6033      	str	r3, [r6, #0]
 800299e:	2000      	movs	r0, #0
 80029a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029a2:	f000 f857 	bl	8002a54 <__malloc_lock>
 80029a6:	4921      	ldr	r1, [pc, #132]	; (8002a2c <_malloc_r+0xac>)
 80029a8:	680a      	ldr	r2, [r1, #0]
 80029aa:	4614      	mov	r4, r2
 80029ac:	b99c      	cbnz	r4, 80029d6 <_malloc_r+0x56>
 80029ae:	4f20      	ldr	r7, [pc, #128]	; (8002a30 <_malloc_r+0xb0>)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	b923      	cbnz	r3, 80029be <_malloc_r+0x3e>
 80029b4:	4621      	mov	r1, r4
 80029b6:	4630      	mov	r0, r6
 80029b8:	f000 f83c 	bl	8002a34 <_sbrk_r>
 80029bc:	6038      	str	r0, [r7, #0]
 80029be:	4629      	mov	r1, r5
 80029c0:	4630      	mov	r0, r6
 80029c2:	f000 f837 	bl	8002a34 <_sbrk_r>
 80029c6:	1c43      	adds	r3, r0, #1
 80029c8:	d123      	bne.n	8002a12 <_malloc_r+0x92>
 80029ca:	230c      	movs	r3, #12
 80029cc:	4630      	mov	r0, r6
 80029ce:	6033      	str	r3, [r6, #0]
 80029d0:	f000 f846 	bl	8002a60 <__malloc_unlock>
 80029d4:	e7e3      	b.n	800299e <_malloc_r+0x1e>
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	1b5b      	subs	r3, r3, r5
 80029da:	d417      	bmi.n	8002a0c <_malloc_r+0x8c>
 80029dc:	2b0b      	cmp	r3, #11
 80029de:	d903      	bls.n	80029e8 <_malloc_r+0x68>
 80029e0:	6023      	str	r3, [r4, #0]
 80029e2:	441c      	add	r4, r3
 80029e4:	6025      	str	r5, [r4, #0]
 80029e6:	e004      	b.n	80029f2 <_malloc_r+0x72>
 80029e8:	6863      	ldr	r3, [r4, #4]
 80029ea:	42a2      	cmp	r2, r4
 80029ec:	bf0c      	ite	eq
 80029ee:	600b      	streq	r3, [r1, #0]
 80029f0:	6053      	strne	r3, [r2, #4]
 80029f2:	4630      	mov	r0, r6
 80029f4:	f000 f834 	bl	8002a60 <__malloc_unlock>
 80029f8:	f104 000b 	add.w	r0, r4, #11
 80029fc:	1d23      	adds	r3, r4, #4
 80029fe:	f020 0007 	bic.w	r0, r0, #7
 8002a02:	1ac2      	subs	r2, r0, r3
 8002a04:	d0cc      	beq.n	80029a0 <_malloc_r+0x20>
 8002a06:	1a1b      	subs	r3, r3, r0
 8002a08:	50a3      	str	r3, [r4, r2]
 8002a0a:	e7c9      	b.n	80029a0 <_malloc_r+0x20>
 8002a0c:	4622      	mov	r2, r4
 8002a0e:	6864      	ldr	r4, [r4, #4]
 8002a10:	e7cc      	b.n	80029ac <_malloc_r+0x2c>
 8002a12:	1cc4      	adds	r4, r0, #3
 8002a14:	f024 0403 	bic.w	r4, r4, #3
 8002a18:	42a0      	cmp	r0, r4
 8002a1a:	d0e3      	beq.n	80029e4 <_malloc_r+0x64>
 8002a1c:	1a21      	subs	r1, r4, r0
 8002a1e:	4630      	mov	r0, r6
 8002a20:	f000 f808 	bl	8002a34 <_sbrk_r>
 8002a24:	3001      	adds	r0, #1
 8002a26:	d1dd      	bne.n	80029e4 <_malloc_r+0x64>
 8002a28:	e7cf      	b.n	80029ca <_malloc_r+0x4a>
 8002a2a:	bf00      	nop
 8002a2c:	20000114 	.word	0x20000114
 8002a30:	20000118 	.word	0x20000118

08002a34 <_sbrk_r>:
 8002a34:	b538      	push	{r3, r4, r5, lr}
 8002a36:	2300      	movs	r3, #0
 8002a38:	4d05      	ldr	r5, [pc, #20]	; (8002a50 <_sbrk_r+0x1c>)
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	4608      	mov	r0, r1
 8002a3e:	602b      	str	r3, [r5, #0]
 8002a40:	f7fe fbb8 	bl	80011b4 <_sbrk>
 8002a44:	1c43      	adds	r3, r0, #1
 8002a46:	d102      	bne.n	8002a4e <_sbrk_r+0x1a>
 8002a48:	682b      	ldr	r3, [r5, #0]
 8002a4a:	b103      	cbz	r3, 8002a4e <_sbrk_r+0x1a>
 8002a4c:	6023      	str	r3, [r4, #0]
 8002a4e:	bd38      	pop	{r3, r4, r5, pc}
 8002a50:	2000016c 	.word	0x2000016c

08002a54 <__malloc_lock>:
 8002a54:	4801      	ldr	r0, [pc, #4]	; (8002a5c <__malloc_lock+0x8>)
 8002a56:	f000 b809 	b.w	8002a6c <__retarget_lock_acquire_recursive>
 8002a5a:	bf00      	nop
 8002a5c:	20000174 	.word	0x20000174

08002a60 <__malloc_unlock>:
 8002a60:	4801      	ldr	r0, [pc, #4]	; (8002a68 <__malloc_unlock+0x8>)
 8002a62:	f000 b804 	b.w	8002a6e <__retarget_lock_release_recursive>
 8002a66:	bf00      	nop
 8002a68:	20000174 	.word	0x20000174

08002a6c <__retarget_lock_acquire_recursive>:
 8002a6c:	4770      	bx	lr

08002a6e <__retarget_lock_release_recursive>:
 8002a6e:	4770      	bx	lr

08002a70 <_init>:
 8002a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a72:	bf00      	nop
 8002a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a76:	bc08      	pop	{r3}
 8002a78:	469e      	mov	lr, r3
 8002a7a:	4770      	bx	lr

08002a7c <_fini>:
 8002a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7e:	bf00      	nop
 8002a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a82:	bc08      	pop	{r3}
 8002a84:	469e      	mov	lr, r3
 8002a86:	4770      	bx	lr
