
TEST_MCU_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d68  08004d68  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08004d68  08004d68  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d68  08004d68  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d6c  08004d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08004d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  200000d0  08004e40  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08004e40  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001380c  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb8  00000000  00000000  00033905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  000365c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00037418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196ea  00000000  00000000  00038138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e17  00000000  00000000  00051822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000893b4  00000000  00000000  00063639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec9ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd8  00000000  00000000  000eca40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d0 	.word	0x200000d0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004cac 	.word	0x08004cac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d4 	.word	0x200000d4
 8000148:	08004cac 	.word	0x08004cac

0800014c <FSMLightModification>:
 */

#include "FSMLightModification.h"

void FSMLightModification()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status)
 8000150:	4b68      	ldr	r3, [pc, #416]	; (80002f4 <FSMLightModification+0x1a8>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b2c      	cmp	r3, #44	; 0x2c
 8000156:	d03e      	beq.n	80001d6 <FSMLightModification+0x8a>
 8000158:	2b2c      	cmp	r3, #44	; 0x2c
 800015a:	f300 80c2 	bgt.w	80002e2 <FSMLightModification+0x196>
 800015e:	2b2a      	cmp	r3, #42	; 0x2a
 8000160:	d002      	beq.n	8000168 <FSMLightModification+0x1c>
 8000162:	2b2b      	cmp	r3, #43	; 0x2b
 8000164:	d06c      	beq.n	8000240 <FSMLightModification+0xf4>
				}
			}
		}
		break;
	default:
		break;
 8000166:	e0bc      	b.n	80002e2 <FSMLightModification+0x196>
		if(timer4_flag == 1)
 8000168:	4b63      	ldr	r3, [pc, #396]	; (80002f8 <FSMLightModification+0x1ac>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d104      	bne.n	800017a <FSMLightModification+0x2e>
			setTimer4(25);
 8000170:	2019      	movs	r0, #25
 8000172:	f001 fab9 	bl	80016e8 <setTimer4>
			toggleTrafficRed();
 8000176:	f000 ff0d 	bl	8000f94 <toggleTrafficRed>
		if(isButton2Pressed() == 1)
 800017a:	f000 fcdb 	bl	8000b34 <isButton2Pressed>
 800017e:	4603      	mov	r3, r0
 8000180:	2b01      	cmp	r3, #1
 8000182:	d112      	bne.n	80001aa <FSMLightModification+0x5e>
			resetInitialState();
 8000184:	f000 ffa8 	bl	80010d8 <resetInitialState>
			red_time++;
 8000188:	4b5c      	ldr	r3, [pc, #368]	; (80002fc <FSMLightModification+0x1b0>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	3301      	adds	r3, #1
 800018e:	4a5b      	ldr	r2, [pc, #364]	; (80002fc <FSMLightModification+0x1b0>)
 8000190:	6013      	str	r3, [r2, #0]
			setLedBuffer(red_time, 1);
 8000192:	4b5a      	ldr	r3, [pc, #360]	; (80002fc <FSMLightModification+0x1b0>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	2101      	movs	r1, #1
 8000198:	4618      	mov	r0, r3
 800019a:	f000 ff35 	bl	8001008 <setLedBuffer>
			UARTSendBufferRed(red_time);
 800019e:	4b57      	ldr	r3, [pc, #348]	; (80002fc <FSMLightModification+0x1b0>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	4618      	mov	r0, r3
 80001a6:	f000 fc4d 	bl	8000a44 <UARTSendBufferRed>
		if(isButton3Pressed() == 1)
 80001aa:	f000 fce1 	bl	8000b70 <isButton3Pressed>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	f040 8098 	bne.w	80002e6 <FSMLightModification+0x19a>
			resetInitialState();
 80001b6:	f000 ff8f 	bl	80010d8 <resetInitialState>
			status = MODIFY_YELLOW;	//next mode
 80001ba:	4b4e      	ldr	r3, [pc, #312]	; (80002f4 <FSMLightModification+0x1a8>)
 80001bc:	2222      	movs	r2, #34	; 0x22
 80001be:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 80001c0:	2019      	movs	r0, #25
 80001c2:	f001 fa91 	bl	80016e8 <setTimer4>
			setLedBuffer(0, 2);
 80001c6:	2102      	movs	r1, #2
 80001c8:	2000      	movs	r0, #0
 80001ca:	f000 ff1d 	bl	8001008 <setLedBuffer>
			UARTSendBufferYellow(0);
 80001ce:	2000      	movs	r0, #0
 80001d0:	f000 fc74 	bl	8000abc <UARTSendBufferYellow>
		break;
 80001d4:	e087      	b.n	80002e6 <FSMLightModification+0x19a>
		if(timer4_flag == 1)
 80001d6:	4b48      	ldr	r3, [pc, #288]	; (80002f8 <FSMLightModification+0x1ac>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	d104      	bne.n	80001e8 <FSMLightModification+0x9c>
			setTimer4(25);
 80001de:	2019      	movs	r0, #25
 80001e0:	f001 fa82 	bl	80016e8 <setTimer4>
			toggleTrafficYellow();
 80001e4:	f000 fee8 	bl	8000fb8 <toggleTrafficYellow>
		if(isButton2Pressed() == 1)
 80001e8:	f000 fca4 	bl	8000b34 <isButton2Pressed>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b01      	cmp	r3, #1
 80001f0:	d111      	bne.n	8000216 <FSMLightModification+0xca>
			resetInitialState();
 80001f2:	f000 ff71 	bl	80010d8 <resetInitialState>
			yellow_time++;
 80001f6:	4b42      	ldr	r3, [pc, #264]	; (8000300 <FSMLightModification+0x1b4>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	3301      	adds	r3, #1
 80001fc:	4a40      	ldr	r2, [pc, #256]	; (8000300 <FSMLightModification+0x1b4>)
 80001fe:	6013      	str	r3, [r2, #0]
			setLedBuffer(yellow_time, 2);
 8000200:	4b3f      	ldr	r3, [pc, #252]	; (8000300 <FSMLightModification+0x1b4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2102      	movs	r1, #2
 8000206:	4618      	mov	r0, r3
 8000208:	f000 fefe 	bl	8001008 <setLedBuffer>
			UARTSendBufferYellow(yellow_time);
 800020c:	4b3c      	ldr	r3, [pc, #240]	; (8000300 <FSMLightModification+0x1b4>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fc53 	bl	8000abc <UARTSendBufferYellow>
		if(isButton3Pressed() == 1)
 8000216:	f000 fcab 	bl	8000b70 <isButton3Pressed>
 800021a:	4603      	mov	r3, r0
 800021c:	2b01      	cmp	r3, #1
 800021e:	d164      	bne.n	80002ea <FSMLightModification+0x19e>
			resetInitialState();
 8000220:	f000 ff5a 	bl	80010d8 <resetInitialState>
			status = MODIFY_GREEN;	//next mode
 8000224:	4b33      	ldr	r3, [pc, #204]	; (80002f4 <FSMLightModification+0x1a8>)
 8000226:	2221      	movs	r2, #33	; 0x21
 8000228:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 800022a:	2019      	movs	r0, #25
 800022c:	f001 fa5c 	bl	80016e8 <setTimer4>
			setLedBuffer(0, 3);
 8000230:	2103      	movs	r1, #3
 8000232:	2000      	movs	r0, #0
 8000234:	f000 fee8 	bl	8001008 <setLedBuffer>
			UARTSendBufferGreen(0);
 8000238:	2000      	movs	r0, #0
 800023a:	f000 fc21 	bl	8000a80 <UARTSendBufferGreen>
		break;
 800023e:	e054      	b.n	80002ea <FSMLightModification+0x19e>
		if(timer4_flag == 1)
 8000240:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <FSMLightModification+0x1ac>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b01      	cmp	r3, #1
 8000246:	d104      	bne.n	8000252 <FSMLightModification+0x106>
			setTimer4(25);
 8000248:	2019      	movs	r0, #25
 800024a:	f001 fa4d 	bl	80016e8 <setTimer4>
			toggleTrafficGreen();
 800024e:	f000 fecd 	bl	8000fec <toggleTrafficGreen>
		if(isButton2Pressed() == 1)
 8000252:	f000 fc6f 	bl	8000b34 <isButton2Pressed>
 8000256:	4603      	mov	r3, r0
 8000258:	2b01      	cmp	r3, #1
 800025a:	d111      	bne.n	8000280 <FSMLightModification+0x134>
			resetInitialState();
 800025c:	f000 ff3c 	bl	80010d8 <resetInitialState>
			green_time++;
 8000260:	4b28      	ldr	r3, [pc, #160]	; (8000304 <FSMLightModification+0x1b8>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	3301      	adds	r3, #1
 8000266:	4a27      	ldr	r2, [pc, #156]	; (8000304 <FSMLightModification+0x1b8>)
 8000268:	6013      	str	r3, [r2, #0]
			setLedBuffer(green_time, 3);
 800026a:	4b26      	ldr	r3, [pc, #152]	; (8000304 <FSMLightModification+0x1b8>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	2103      	movs	r1, #3
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fec9 	bl	8001008 <setLedBuffer>
			UARTSendBufferGreen(green_time);
 8000276:	4b23      	ldr	r3, [pc, #140]	; (8000304 <FSMLightModification+0x1b8>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fc00 	bl	8000a80 <UARTSendBufferGreen>
		if(isButton3Pressed() == 1)
 8000280:	f000 fc76 	bl	8000b70 <isButton3Pressed>
 8000284:	4603      	mov	r3, r0
 8000286:	2b01      	cmp	r3, #1
 8000288:	d131      	bne.n	80002ee <FSMLightModification+0x1a2>
			if(red_time == green_time+yellow_time)
 800028a:	4b1e      	ldr	r3, [pc, #120]	; (8000304 <FSMLightModification+0x1b8>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	4b1c      	ldr	r3, [pc, #112]	; (8000300 <FSMLightModification+0x1b4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	441a      	add	r2, r3
 8000294:	4b19      	ldr	r3, [pc, #100]	; (80002fc <FSMLightModification+0x1b0>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	429a      	cmp	r2, r3
 800029a:	d103      	bne.n	80002a4 <FSMLightModification+0x158>
				status = NORMAL_MODE;
 800029c:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <FSMLightModification+0x1a8>)
 800029e:	2215      	movs	r2, #21
 80002a0:	601a      	str	r2, [r3, #0]
		break;
 80002a2:	e024      	b.n	80002ee <FSMLightModification+0x1a2>
				if(red_time > green_time+yellow_time)
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <FSMLightModification+0x1b8>)
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	4b15      	ldr	r3, [pc, #84]	; (8000300 <FSMLightModification+0x1b4>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	441a      	add	r2, r3
 80002ae:	4b13      	ldr	r3, [pc, #76]	; (80002fc <FSMLightModification+0x1b0>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	da0a      	bge.n	80002cc <FSMLightModification+0x180>
					green_time = red_time - yellow_time;
 80002b6:	4b11      	ldr	r3, [pc, #68]	; (80002fc <FSMLightModification+0x1b0>)
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	4b11      	ldr	r3, [pc, #68]	; (8000300 <FSMLightModification+0x1b4>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	1ad3      	subs	r3, r2, r3
 80002c0:	4a10      	ldr	r2, [pc, #64]	; (8000304 <FSMLightModification+0x1b8>)
 80002c2:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 80002c4:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <FSMLightModification+0x1a8>)
 80002c6:	2215      	movs	r2, #21
 80002c8:	601a      	str	r2, [r3, #0]
		break;
 80002ca:	e010      	b.n	80002ee <FSMLightModification+0x1a2>
					red_time = green_time + yellow_time;
 80002cc:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <FSMLightModification+0x1b8>)
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <FSMLightModification+0x1b4>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4413      	add	r3, r2
 80002d6:	4a09      	ldr	r2, [pc, #36]	; (80002fc <FSMLightModification+0x1b0>)
 80002d8:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 80002da:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <FSMLightModification+0x1a8>)
 80002dc:	2215      	movs	r2, #21
 80002de:	601a      	str	r2, [r3, #0]
		break;
 80002e0:	e005      	b.n	80002ee <FSMLightModification+0x1a2>
		break;
 80002e2:	bf00      	nop
 80002e4:	e004      	b.n	80002f0 <FSMLightModification+0x1a4>
		break;
 80002e6:	bf00      	nop
 80002e8:	e002      	b.n	80002f0 <FSMLightModification+0x1a4>
		break;
 80002ea:	bf00      	nop
 80002ec:	e000      	b.n	80002f0 <FSMLightModification+0x1a4>
		break;
 80002ee:	bf00      	nop
	}
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000100 	.word	0x20000100
 80002f8:	20000120 	.word	0x20000120
 80002fc:	20000054 	.word	0x20000054
 8000300:	2000005c 	.word	0x2000005c
 8000304:	20000058 	.word	0x20000058

08000308 <FSMModificationModeRun>:
 */
#include "FSMModificationMode.h"


void FSMModificationModeRun()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	switch(status)
 800030c:	4b7c      	ldr	r3, [pc, #496]	; (8000500 <FSMModificationModeRun+0x1f8>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	3b1f      	subs	r3, #31
 8000312:	2b03      	cmp	r3, #3
 8000314:	f200 80ea 	bhi.w	80004ec <FSMModificationModeRun+0x1e4>
 8000318:	a201      	add	r2, pc, #4	; (adr r2, 8000320 <FSMModificationModeRun+0x18>)
 800031a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031e:	bf00      	nop
 8000320:	08000331 	.word	0x08000331
 8000324:	0800035d 	.word	0x0800035d
 8000328:	08000445 	.word	0x08000445
 800032c:	080003d3 	.word	0x080003d3
	{
	case MODIFICATION_MODE:
		resetInitialState();	// reset all all the varialbles thats affect FSMModificationModeRun
 8000330:	f000 fed2 	bl	80010d8 <resetInitialState>

		UARTSendMode(2);
 8000334:	2002      	movs	r0, #2
 8000336:	f000 fb47 	bl	80009c8 <UARTSendMode>

		status = MODIFY_RED;	// next mode
 800033a:	4b71      	ldr	r3, [pc, #452]	; (8000500 <FSMModificationModeRun+0x1f8>)
 800033c:	2220      	movs	r2, #32
 800033e:	601a      	str	r2, [r3, #0]

		//led blinky for 2hz
		setTimer4(25);
 8000340:	2019      	movs	r0, #25
 8000342:	f001 f9d1 	bl	80016e8 <setTimer4>

		// initial setting led 7 seg
		setLedBuffer(0, 1);
 8000346:	2101      	movs	r1, #1
 8000348:	2000      	movs	r0, #0
 800034a:	f000 fe5d 	bl	8001008 <setLedBuffer>

		//uart
		UARTSendMode(2);
 800034e:	2002      	movs	r0, #2
 8000350:	f000 fb3a 	bl	80009c8 <UARTSendMode>
		UARTSendBufferRed(0);
 8000354:	2000      	movs	r0, #0
 8000356:	f000 fb75 	bl	8000a44 <UARTSendBufferRed>

		break;
 800035a:	e0ce      	b.n	80004fa <FSMModificationModeRun+0x1f2>

	case MODIFY_RED:

		if(timer4_flag == 1)
 800035c:	4b69      	ldr	r3, [pc, #420]	; (8000504 <FSMModificationModeRun+0x1fc>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b01      	cmp	r3, #1
 8000362:	d104      	bne.n	800036e <FSMModificationModeRun+0x66>
		{
			setTimer4(25);
 8000364:	2019      	movs	r0, #25
 8000366:	f001 f9bf 	bl	80016e8 <setTimer4>
			toggleTrafficRed();
 800036a:	f000 fe13 	bl	8000f94 <toggleTrafficRed>
		}

		if(isButton1Pressed() == 1)
 800036e:	f000 fbc3 	bl	8000af8 <isButton1Pressed>
 8000372:	4603      	mov	r3, r0
 8000374:	2b01      	cmp	r3, #1
 8000376:	d10e      	bne.n	8000396 <FSMModificationModeRun+0x8e>
		{
			resetInitialState();
 8000378:	f000 feae 	bl	80010d8 <resetInitialState>

			status = MODIFY_YELLOW;	//next mode
 800037c:	4b60      	ldr	r3, [pc, #384]	; (8000500 <FSMModificationModeRun+0x1f8>)
 800037e:	2222      	movs	r2, #34	; 0x22
 8000380:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 8000382:	2019      	movs	r0, #25
 8000384:	f001 f9b0 	bl	80016e8 <setTimer4>

			// initial setting led 7 seg
			setLedBuffer(0, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2000      	movs	r0, #0
 800038c:	f000 fe3c 	bl	8001008 <setLedBuffer>

			//uart
			UARTSendBufferYellow(0);
 8000390:	2000      	movs	r0, #0
 8000392:	f000 fb93 	bl	8000abc <UARTSendBufferYellow>
		}

		if(isButton2Pressed() == 1)
 8000396:	f000 fbcd 	bl	8000b34 <isButton2Pressed>
 800039a:	4603      	mov	r3, r0
 800039c:	2b01      	cmp	r3, #1
 800039e:	f040 80a7 	bne.w	80004f0 <FSMModificationModeRun+0x1e8>
		{
			resetInitialState();
 80003a2:	f000 fe99 	bl	80010d8 <resetInitialState>

			status = MODIFY_TIME_RED; //next mode
 80003a6:	4b56      	ldr	r3, [pc, #344]	; (8000500 <FSMModificationModeRun+0x1f8>)
 80003a8:	222a      	movs	r2, #42	; 0x2a
 80003aa:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 80003ac:	2019      	movs	r0, #25
 80003ae:	f001 f99b 	bl	80016e8 <setTimer4>

			red_time = 1;
 80003b2:	4b55      	ldr	r3, [pc, #340]	; (8000508 <FSMModificationModeRun+0x200>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	601a      	str	r2, [r3, #0]
			setLedBuffer(red_time, 1);
 80003b8:	4b53      	ldr	r3, [pc, #332]	; (8000508 <FSMModificationModeRun+0x200>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2101      	movs	r1, #1
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 fe22 	bl	8001008 <setLedBuffer>

			//uart
			UARTSendBufferRed(red_time);
 80003c4:	4b50      	ldr	r3, [pc, #320]	; (8000508 <FSMModificationModeRun+0x200>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 fb3a 	bl	8000a44 <UARTSendBufferRed>
		}
		break;
 80003d0:	e08e      	b.n	80004f0 <FSMModificationModeRun+0x1e8>

	case MODIFY_YELLOW:

		if(timer4_flag == 1)
 80003d2:	4b4c      	ldr	r3, [pc, #304]	; (8000504 <FSMModificationModeRun+0x1fc>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d104      	bne.n	80003e4 <FSMModificationModeRun+0xdc>
		{
			setTimer4(25);
 80003da:	2019      	movs	r0, #25
 80003dc:	f001 f984 	bl	80016e8 <setTimer4>

			toggleTrafficYellow();
 80003e0:	f000 fdea 	bl	8000fb8 <toggleTrafficYellow>
		}

		if(isButton1Pressed() == 1)
 80003e4:	f000 fb88 	bl	8000af8 <isButton1Pressed>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d10e      	bne.n	800040c <FSMModificationModeRun+0x104>
		{
			resetInitialState();
 80003ee:	f000 fe73 	bl	80010d8 <resetInitialState>

			status = MODIFY_GREEN;
 80003f2:	4b43      	ldr	r3, [pc, #268]	; (8000500 <FSMModificationModeRun+0x1f8>)
 80003f4:	2221      	movs	r2, #33	; 0x21
 80003f6:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 80003f8:	2019      	movs	r0, #25
 80003fa:	f001 f975 	bl	80016e8 <setTimer4>

			setLedBuffer(0, 3);
 80003fe:	2103      	movs	r1, #3
 8000400:	2000      	movs	r0, #0
 8000402:	f000 fe01 	bl	8001008 <setLedBuffer>

			//uart
			UARTSendBufferGreen(0);
 8000406:	2000      	movs	r0, #0
 8000408:	f000 fb3a 	bl	8000a80 <UARTSendBufferGreen>
		}

		if(isButton2Pressed() == 1)
 800040c:	f000 fb92 	bl	8000b34 <isButton2Pressed>
 8000410:	4603      	mov	r3, r0
 8000412:	2b01      	cmp	r3, #1
 8000414:	d16e      	bne.n	80004f4 <FSMModificationModeRun+0x1ec>
		{
			resetInitialState();
 8000416:	f000 fe5f 	bl	80010d8 <resetInitialState>

			status = MODIFY_TIME_YELLOW;
 800041a:	4b39      	ldr	r3, [pc, #228]	; (8000500 <FSMModificationModeRun+0x1f8>)
 800041c:	222c      	movs	r2, #44	; 0x2c
 800041e:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 8000420:	2019      	movs	r0, #25
 8000422:	f001 f961 	bl	80016e8 <setTimer4>

			yellow_time = 1;
 8000426:	4b39      	ldr	r3, [pc, #228]	; (800050c <FSMModificationModeRun+0x204>)
 8000428:	2201      	movs	r2, #1
 800042a:	601a      	str	r2, [r3, #0]
			setLedBuffer(yellow_time, 2);
 800042c:	4b37      	ldr	r3, [pc, #220]	; (800050c <FSMModificationModeRun+0x204>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2102      	movs	r1, #2
 8000432:	4618      	mov	r0, r3
 8000434:	f000 fde8 	bl	8001008 <setLedBuffer>

			//uart
			UARTSendBufferYellow(yellow_time);
 8000438:	4b34      	ldr	r3, [pc, #208]	; (800050c <FSMModificationModeRun+0x204>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4618      	mov	r0, r3
 800043e:	f000 fb3d 	bl	8000abc <UARTSendBufferYellow>

		}
		break;
 8000442:	e057      	b.n	80004f4 <FSMModificationModeRun+0x1ec>

	case MODIFY_GREEN:

		if(timer4_flag == 1)
 8000444:	4b2f      	ldr	r3, [pc, #188]	; (8000504 <FSMModificationModeRun+0x1fc>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d104      	bne.n	8000456 <FSMModificationModeRun+0x14e>
		{
			setTimer4(25);
 800044c:	2019      	movs	r0, #25
 800044e:	f001 f94b 	bl	80016e8 <setTimer4>

			toggleTrafficGreen();
 8000452:	f000 fdcb 	bl	8000fec <toggleTrafficGreen>
		}

		if(isButton1Pressed() == 1)
 8000456:	f000 fb4f 	bl	8000af8 <isButton1Pressed>
 800045a:	4603      	mov	r3, r0
 800045c:	2b01      	cmp	r3, #1
 800045e:	d12c      	bne.n	80004ba <FSMModificationModeRun+0x1b2>
		{
			resetInitialState();
 8000460:	f000 fe3a 	bl	80010d8 <resetInitialState>
			if(red_time == green_time+yellow_time)
 8000464:	4b2a      	ldr	r3, [pc, #168]	; (8000510 <FSMModificationModeRun+0x208>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4b28      	ldr	r3, [pc, #160]	; (800050c <FSMModificationModeRun+0x204>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	441a      	add	r2, r3
 800046e:	4b26      	ldr	r3, [pc, #152]	; (8000508 <FSMModificationModeRun+0x200>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	429a      	cmp	r2, r3
 8000474:	d103      	bne.n	800047e <FSMModificationModeRun+0x176>
			{
				status = NORMAL_MODE;
 8000476:	4b22      	ldr	r3, [pc, #136]	; (8000500 <FSMModificationModeRun+0x1f8>)
 8000478:	2215      	movs	r2, #21
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	e01d      	b.n	80004ba <FSMModificationModeRun+0x1b2>
			}
			else
			{
				if(red_time > green_time+yellow_time)
 800047e:	4b24      	ldr	r3, [pc, #144]	; (8000510 <FSMModificationModeRun+0x208>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	4b22      	ldr	r3, [pc, #136]	; (800050c <FSMModificationModeRun+0x204>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	441a      	add	r2, r3
 8000488:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <FSMModificationModeRun+0x200>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	429a      	cmp	r2, r3
 800048e:	da0a      	bge.n	80004a6 <FSMModificationModeRun+0x19e>
				{
					green_time = red_time - yellow_time;
 8000490:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <FSMModificationModeRun+0x200>)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	4b1d      	ldr	r3, [pc, #116]	; (800050c <FSMModificationModeRun+0x204>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	4a1d      	ldr	r2, [pc, #116]	; (8000510 <FSMModificationModeRun+0x208>)
 800049c:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <FSMModificationModeRun+0x1f8>)
 80004a0:	2215      	movs	r2, #21
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	e009      	b.n	80004ba <FSMModificationModeRun+0x1b2>
				}
				else
				{
					red_time = green_time + yellow_time;
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <FSMModificationModeRun+0x208>)
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	4b18      	ldr	r3, [pc, #96]	; (800050c <FSMModificationModeRun+0x204>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4413      	add	r3, r2
 80004b0:	4a15      	ldr	r2, [pc, #84]	; (8000508 <FSMModificationModeRun+0x200>)
 80004b2:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <FSMModificationModeRun+0x1f8>)
 80004b6:	2215      	movs	r2, #21
 80004b8:	601a      	str	r2, [r3, #0]
				}
			}
		}

		if(isButton2Pressed() == 1)
 80004ba:	f000 fb3b 	bl	8000b34 <isButton2Pressed>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d119      	bne.n	80004f8 <FSMModificationModeRun+0x1f0>
		{
			resetInitialState();
 80004c4:	f000 fe08 	bl	80010d8 <resetInitialState>

			status = MODIFY_TIME_GREEN;
 80004c8:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <FSMModificationModeRun+0x1f8>)
 80004ca:	222b      	movs	r2, #43	; 0x2b
 80004cc:	601a      	str	r2, [r3, #0]
			green_time = 1;
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <FSMModificationModeRun+0x208>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	601a      	str	r2, [r3, #0]
			setLedBuffer(green_time, 3);
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <FSMModificationModeRun+0x208>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2103      	movs	r1, #3
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 fd94 	bl	8001008 <setLedBuffer>

			//uart
			UARTSendBufferGreen(green_time);
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <FSMModificationModeRun+0x208>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 facb 	bl	8000a80 <UARTSendBufferGreen>
		}
		break;
 80004ea:	e005      	b.n	80004f8 <FSMModificationModeRun+0x1f0>

	default:
		break;
 80004ec:	bf00      	nop
 80004ee:	e004      	b.n	80004fa <FSMModificationModeRun+0x1f2>
		break;
 80004f0:	bf00      	nop
 80004f2:	e002      	b.n	80004fa <FSMModificationModeRun+0x1f2>
		break;
 80004f4:	bf00      	nop
 80004f6:	e000      	b.n	80004fa <FSMModificationModeRun+0x1f2>
		break;
 80004f8:	bf00      	nop
	}
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000100 	.word	0x20000100
 8000504:	20000120 	.word	0x20000120
 8000508:	20000054 	.word	0x20000054
 800050c:	2000005c 	.word	0x2000005c
 8000510:	20000058 	.word	0x20000058

08000514 <FSMNormalModeRun>:

#include "FSMNormalMode.h"


void FSMNormalModeRun()
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	switch(status)
 8000518:	4b9e      	ldr	r3, [pc, #632]	; (8000794 <FSMNormalModeRun+0x280>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	3b15      	subs	r3, #21
 800051e:	2b04      	cmp	r3, #4
 8000520:	f200 81a2 	bhi.w	8000868 <FSMNormalModeRun+0x354>
 8000524:	a201      	add	r2, pc, #4	; (adr r2, 800052c <FSMNormalModeRun+0x18>)
 8000526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052a:	bf00      	nop
 800052c:	08000541 	.word	0x08000541
 8000530:	0800057f 	.word	0x0800057f
 8000534:	08000631 	.word	0x08000631
 8000538:	080006e3 	.word	0x080006e3
 800053c:	080007b9 	.word	0x080007b9
	{
	case NORMAL_MODE:
		resetInitialState(); 	// reset all all the varialbles thats affect FSMNormalModeRun
 8000540:	f000 fdca 	bl	80010d8 <resetInitialState>

		status = RED0_GREEN1; 	//next mode
 8000544:	4b93      	ldr	r3, [pc, #588]	; (8000794 <FSMNormalModeRun+0x280>)
 8000546:	2216      	movs	r2, #22
 8000548:	601a      	str	r2, [r3, #0]
		setTimer1(green_time);	//set timer for next state
 800054a:	4b93      	ldr	r3, [pc, #588]	; (8000798 <FSMNormalModeRun+0x284>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4618      	mov	r0, r3
 8000550:	f001 f88c 	bl	800166c <setTimer1>
		setTimer2(100);
 8000554:	2064      	movs	r0, #100	; 0x64
 8000556:	f001 f89f 	bl	8001698 <setTimer2>
		timer2_flag = 1;
 800055a:	4b90      	ldr	r3, [pc, #576]	; (800079c <FSMNormalModeRun+0x288>)
 800055c:	2201      	movs	r2, #1
 800055e:	601a      	str	r2, [r3, #0]
		setTimer3(100);
 8000560:	2064      	movs	r0, #100	; 0x64
 8000562:	f001 f8ad 	bl	80016c0 <setTimer3>
		setLedBuffer(red_time, green_time);
 8000566:	4b8e      	ldr	r3, [pc, #568]	; (80007a0 <FSMNormalModeRun+0x28c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a8b      	ldr	r2, [pc, #556]	; (8000798 <FSMNormalModeRun+0x284>)
 800056c:	6812      	ldr	r2, [r2, #0]
 800056e:	4611      	mov	r1, r2
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fd49 	bl	8001008 <setLedBuffer>

		// uart
		UARTSendMode(1);
 8000576:	2001      	movs	r0, #1
 8000578:	f000 fa26 	bl	80009c8 <UARTSendMode>
		break;
 800057c:	e17d      	b.n	800087a <FSMNormalModeRun+0x366>
	case RED0_GREEN1:
		setTrafficRed();
 800057e:	f000 fc4d 	bl	8000e1c <setTrafficRed>
		setTrafficGreen1();
 8000582:	f000 fc97 	bl	8000eb4 <setTrafficGreen1>

		if(timer3_flag == 1)	//update buffer every second
 8000586:	4b87      	ldr	r3, [pc, #540]	; (80007a4 <FSMNormalModeRun+0x290>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d104      	bne.n	8000598 <FSMNormalModeRun+0x84>
		{
			updateLedBuffer();
 800058e:	f000 fd77 	bl	8001080 <updateLedBuffer>
			setTimer3(100);
 8000592:	2064      	movs	r0, #100	; 0x64
 8000594:	f001 f894 	bl	80016c0 <setTimer3>
		}

		//uart
		if(timer2_flag == 1)
 8000598:	4b80      	ldr	r3, [pc, #512]	; (800079c <FSMNormalModeRun+0x288>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d124      	bne.n	80005ea <FSMNormalModeRun+0xd6>
		{
			UARTCountdownTrafficTime(1, (led_buffer[0] * 10) + led_buffer[1]);
 80005a0:	4b81      	ldr	r3, [pc, #516]	; (80007a8 <FSMNormalModeRun+0x294>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	0092      	lsls	r2, r2, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	4b7d      	ldr	r3, [pc, #500]	; (80007a8 <FSMNormalModeRun+0x294>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	4413      	add	r3, r2
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	4619      	mov	r1, r3
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 fa21 	bl	8000a04 <UARTCountdownTrafficTime>
			UARTCountdownTrafficTime(2, (led_buffer[2] * 10) + led_buffer[3]);
 80005c2:	4b79      	ldr	r3, [pc, #484]	; (80007a8 <FSMNormalModeRun+0x294>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	461a      	mov	r2, r3
 80005ca:	0092      	lsls	r2, r2, #2
 80005cc:	4413      	add	r3, r2
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	4b75      	ldr	r3, [pc, #468]	; (80007a8 <FSMNormalModeRun+0x294>)
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	4413      	add	r3, r2
 80005da:	b29b      	uxth	r3, r3
 80005dc:	4619      	mov	r1, r3
 80005de:	2002      	movs	r0, #2
 80005e0:	f000 fa10 	bl	8000a04 <UARTCountdownTrafficTime>
			setTimer2(100);
 80005e4:	2064      	movs	r0, #100	; 0x64
 80005e6:	f001 f857 	bl	8001698 <setTimer2>
		}

		if(timer1_flag == 1)
 80005ea:	4b70      	ldr	r3, [pc, #448]	; (80007ac <FSMNormalModeRun+0x298>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d10f      	bne.n	8000612 <FSMNormalModeRun+0xfe>
		{
			status = RED0_YELLOW1;	//next mode
 80005f2:	4b68      	ldr	r3, [pc, #416]	; (8000794 <FSMNormalModeRun+0x280>)
 80005f4:	2217      	movs	r2, #23
 80005f6:	601a      	str	r2, [r3, #0]
			setTimer1(yellow_time);
 80005f8:	4b6d      	ldr	r3, [pc, #436]	; (80007b0 <FSMNormalModeRun+0x29c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 f835 	bl	800166c <setTimer1>

			setLedBuffer(yellow_time, yellow_time); // set buffer for led 7 seg
 8000602:	4b6b      	ldr	r3, [pc, #428]	; (80007b0 <FSMNormalModeRun+0x29c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a6a      	ldr	r2, [pc, #424]	; (80007b0 <FSMNormalModeRun+0x29c>)
 8000608:	6812      	ldr	r2, [r2, #0]
 800060a:	4611      	mov	r1, r2
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fcfb 	bl	8001008 <setLedBuffer>

		}

		if(isButton1Pressed() == 1)
 8000612:	f000 fa71 	bl	8000af8 <isButton1Pressed>
 8000616:	4603      	mov	r3, r0
 8000618:	2b01      	cmp	r3, #1
 800061a:	f040 8127 	bne.w	800086c <FSMNormalModeRun+0x358>
		{
			status = MODIFICATION_MODE;
 800061e:	4b5d      	ldr	r3, [pc, #372]	; (8000794 <FSMNormalModeRun+0x280>)
 8000620:	221f      	movs	r2, #31
 8000622:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(FSMModificationModeRun, 0, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	4862      	ldr	r0, [pc, #392]	; (80007b4 <FSMNormalModeRun+0x2a0>)
 800062a:	f000 ff59 	bl	80014e0 <SCH_Add_Task>
		}
		break;
 800062e:	e11d      	b.n	800086c <FSMNormalModeRun+0x358>

	case RED0_YELLOW1:
		setTrafficRed();
 8000630:	f000 fbf4 	bl	8000e1c <setTrafficRed>
		setTrafficYellow1();
 8000634:	f000 fc4e 	bl	8000ed4 <setTrafficYellow1>

		if(timer3_flag == 1)	//update buffer every second
 8000638:	4b5a      	ldr	r3, [pc, #360]	; (80007a4 <FSMNormalModeRun+0x290>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d104      	bne.n	800064a <FSMNormalModeRun+0x136>
		{
			updateLedBuffer();
 8000640:	f000 fd1e 	bl	8001080 <updateLedBuffer>
			setTimer3(100);
 8000644:	2064      	movs	r0, #100	; 0x64
 8000646:	f001 f83b 	bl	80016c0 <setTimer3>
		}

		//uart
		if(timer2_flag == 1)
 800064a:	4b54      	ldr	r3, [pc, #336]	; (800079c <FSMNormalModeRun+0x288>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d124      	bne.n	800069c <FSMNormalModeRun+0x188>
		{
			UARTCountdownTrafficTime(1, (led_buffer[0] * 10) + led_buffer[1]);
 8000652:	4b55      	ldr	r3, [pc, #340]	; (80007a8 <FSMNormalModeRun+0x294>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	b29b      	uxth	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	0092      	lsls	r2, r2, #2
 800065c:	4413      	add	r3, r2
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	b29a      	uxth	r2, r3
 8000662:	4b51      	ldr	r3, [pc, #324]	; (80007a8 <FSMNormalModeRun+0x294>)
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	b29b      	uxth	r3, r3
 8000668:	4413      	add	r3, r2
 800066a:	b29b      	uxth	r3, r3
 800066c:	4619      	mov	r1, r3
 800066e:	2001      	movs	r0, #1
 8000670:	f000 f9c8 	bl	8000a04 <UARTCountdownTrafficTime>
			UARTCountdownTrafficTime(2, (led_buffer[2] * 10) + led_buffer[3]);
 8000674:	4b4c      	ldr	r3, [pc, #304]	; (80007a8 <FSMNormalModeRun+0x294>)
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	b29b      	uxth	r3, r3
 800067a:	461a      	mov	r2, r3
 800067c:	0092      	lsls	r2, r2, #2
 800067e:	4413      	add	r3, r2
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b48      	ldr	r3, [pc, #288]	; (80007a8 <FSMNormalModeRun+0x294>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	b29b      	uxth	r3, r3
 800068a:	4413      	add	r3, r2
 800068c:	b29b      	uxth	r3, r3
 800068e:	4619      	mov	r1, r3
 8000690:	2002      	movs	r0, #2
 8000692:	f000 f9b7 	bl	8000a04 <UARTCountdownTrafficTime>
			setTimer2(100);
 8000696:	2064      	movs	r0, #100	; 0x64
 8000698:	f000 fffe 	bl	8001698 <setTimer2>
		}

		if(timer1_flag == 1)
 800069c:	4b43      	ldr	r3, [pc, #268]	; (80007ac <FSMNormalModeRun+0x298>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d10f      	bne.n	80006c4 <FSMNormalModeRun+0x1b0>
		{
			status = GREEN0_RED1;	//next mode
 80006a4:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <FSMNormalModeRun+0x280>)
 80006a6:	2218      	movs	r2, #24
 80006a8:	601a      	str	r2, [r3, #0]
			setTimer1(green_time);	//set_timer for next mode
 80006aa:	4b3b      	ldr	r3, [pc, #236]	; (8000798 <FSMNormalModeRun+0x284>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 ffdc 	bl	800166c <setTimer1>

			setLedBuffer(green_time, red_time); // set buffer for led 7 seg
 80006b4:	4b38      	ldr	r3, [pc, #224]	; (8000798 <FSMNormalModeRun+0x284>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a39      	ldr	r2, [pc, #228]	; (80007a0 <FSMNormalModeRun+0x28c>)
 80006ba:	6812      	ldr	r2, [r2, #0]
 80006bc:	4611      	mov	r1, r2
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fca2 	bl	8001008 <setLedBuffer>
		}

		if(isButton1Pressed() == 1)
 80006c4:	f000 fa18 	bl	8000af8 <isButton1Pressed>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	f040 80d0 	bne.w	8000870 <FSMNormalModeRun+0x35c>
		{
			status = MODIFICATION_MODE;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <FSMNormalModeRun+0x280>)
 80006d2:	221f      	movs	r2, #31
 80006d4:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(FSMModificationModeRun, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	4836      	ldr	r0, [pc, #216]	; (80007b4 <FSMNormalModeRun+0x2a0>)
 80006dc:	f000 ff00 	bl	80014e0 <SCH_Add_Task>
		}
		break;
 80006e0:	e0c6      	b.n	8000870 <FSMNormalModeRun+0x35c>

	case GREEN0_RED1:
		setTrafficGreen();
 80006e2:	f000 fbaf 	bl	8000e44 <setTrafficGreen>
		setTrafficRed1();
 80006e6:	f000 fbd5 	bl	8000e94 <setTrafficRed1>

		if(timer3_flag == 1)
 80006ea:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <FSMNormalModeRun+0x290>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d104      	bne.n	80006fc <FSMNormalModeRun+0x1e8>
		{
			updateLedBuffer();
 80006f2:	f000 fcc5 	bl	8001080 <updateLedBuffer>
			setTimer3(100);
 80006f6:	2064      	movs	r0, #100	; 0x64
 80006f8:	f000 ffe2 	bl	80016c0 <setTimer3>

		}

		//uart
		if(timer2_flag == 1)
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <FSMNormalModeRun+0x288>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d124      	bne.n	800074e <FSMNormalModeRun+0x23a>
		{
			UARTCountdownTrafficTime(1, (led_buffer[0] * 10) + led_buffer[1]);
 8000704:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <FSMNormalModeRun+0x294>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	b29b      	uxth	r3, r3
 800070a:	461a      	mov	r2, r3
 800070c:	0092      	lsls	r2, r2, #2
 800070e:	4413      	add	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	b29a      	uxth	r2, r3
 8000714:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <FSMNormalModeRun+0x294>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	b29b      	uxth	r3, r3
 800071a:	4413      	add	r3, r2
 800071c:	b29b      	uxth	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	2001      	movs	r0, #1
 8000722:	f000 f96f 	bl	8000a04 <UARTCountdownTrafficTime>
			UARTCountdownTrafficTime(2, (led_buffer[2] * 10) + led_buffer[3]);
 8000726:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <FSMNormalModeRun+0x294>)
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	b29b      	uxth	r3, r3
 800072c:	461a      	mov	r2, r3
 800072e:	0092      	lsls	r2, r2, #2
 8000730:	4413      	add	r3, r2
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	b29a      	uxth	r2, r3
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <FSMNormalModeRun+0x294>)
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	b29b      	uxth	r3, r3
 800073c:	4413      	add	r3, r2
 800073e:	b29b      	uxth	r3, r3
 8000740:	4619      	mov	r1, r3
 8000742:	2002      	movs	r0, #2
 8000744:	f000 f95e 	bl	8000a04 <UARTCountdownTrafficTime>
			setTimer2(100);
 8000748:	2064      	movs	r0, #100	; 0x64
 800074a:	f000 ffa5 	bl	8001698 <setTimer2>
		}

		if(timer1_flag==1)
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <FSMNormalModeRun+0x298>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d10f      	bne.n	8000776 <FSMNormalModeRun+0x262>
		{
			status = YELLOW0_RED1;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <FSMNormalModeRun+0x280>)
 8000758:	2219      	movs	r2, #25
 800075a:	601a      	str	r2, [r3, #0]
			setTimer1(yellow_time);
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <FSMNormalModeRun+0x29c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f000 ff83 	bl	800166c <setTimer1>

			setLedBuffer(yellow_time, yellow_time);	// set buffer for led 7 seg
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <FSMNormalModeRun+0x29c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a11      	ldr	r2, [pc, #68]	; (80007b0 <FSMNormalModeRun+0x29c>)
 800076c:	6812      	ldr	r2, [r2, #0]
 800076e:	4611      	mov	r1, r2
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fc49 	bl	8001008 <setLedBuffer>
		}

		if(isButton1Pressed() == 1)
 8000776:	f000 f9bf 	bl	8000af8 <isButton1Pressed>
 800077a:	4603      	mov	r3, r0
 800077c:	2b01      	cmp	r3, #1
 800077e:	d179      	bne.n	8000874 <FSMNormalModeRun+0x360>
		{
			status = MODIFICATION_MODE;
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <FSMNormalModeRun+0x280>)
 8000782:	221f      	movs	r2, #31
 8000784:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(FSMModificationModeRun, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	480a      	ldr	r0, [pc, #40]	; (80007b4 <FSMNormalModeRun+0x2a0>)
 800078c:	f000 fea8 	bl	80014e0 <SCH_Add_Task>
		}
		break;
 8000790:	e070      	b.n	8000874 <FSMNormalModeRun+0x360>
 8000792:	bf00      	nop
 8000794:	20000100 	.word	0x20000100
 8000798:	20000058 	.word	0x20000058
 800079c:	20000118 	.word	0x20000118
 80007a0:	20000054 	.word	0x20000054
 80007a4:	2000011c 	.word	0x2000011c
 80007a8:	20000044 	.word	0x20000044
 80007ac:	20000114 	.word	0x20000114
 80007b0:	2000005c 	.word	0x2000005c
 80007b4:	08000309 	.word	0x08000309

	case YELLOW0_RED1:
		setTrafficYellow();
 80007b8:	f000 fb58 	bl	8000e6c <setTrafficYellow>
		setTrafficRed1();
 80007bc:	f000 fb6a 	bl	8000e94 <setTrafficRed1>

		if(timer3_flag == 1)
 80007c0:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <FSMNormalModeRun+0x36c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d104      	bne.n	80007d2 <FSMNormalModeRun+0x2be>
		{
			updateLedBuffer();
 80007c8:	f000 fc5a 	bl	8001080 <updateLedBuffer>
			setTimer3(100);
 80007cc:	2064      	movs	r0, #100	; 0x64
 80007ce:	f000 ff77 	bl	80016c0 <setTimer3>
		}

		//uart
		if(timer2_flag == 1)
 80007d2:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <FSMNormalModeRun+0x370>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d124      	bne.n	8000824 <FSMNormalModeRun+0x310>
		{
			UARTCountdownTrafficTime(1, (led_buffer[0] * 10) + led_buffer[1]);
 80007da:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <FSMNormalModeRun+0x374>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	461a      	mov	r2, r3
 80007e2:	0092      	lsls	r2, r2, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b27      	ldr	r3, [pc, #156]	; (8000888 <FSMNormalModeRun+0x374>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	4413      	add	r3, r2
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	4619      	mov	r1, r3
 80007f6:	2001      	movs	r0, #1
 80007f8:	f000 f904 	bl	8000a04 <UARTCountdownTrafficTime>
			UARTCountdownTrafficTime(2, (led_buffer[2] * 10) + led_buffer[3]);
 80007fc:	4b22      	ldr	r3, [pc, #136]	; (8000888 <FSMNormalModeRun+0x374>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	b29b      	uxth	r3, r3
 8000802:	461a      	mov	r2, r3
 8000804:	0092      	lsls	r2, r2, #2
 8000806:	4413      	add	r3, r2
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	b29a      	uxth	r2, r3
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <FSMNormalModeRun+0x374>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	b29b      	uxth	r3, r3
 8000812:	4413      	add	r3, r2
 8000814:	b29b      	uxth	r3, r3
 8000816:	4619      	mov	r1, r3
 8000818:	2002      	movs	r0, #2
 800081a:	f000 f8f3 	bl	8000a04 <UARTCountdownTrafficTime>
			setTimer2(100);
 800081e:	2064      	movs	r0, #100	; 0x64
 8000820:	f000 ff3a 	bl	8001698 <setTimer2>
		}

		if(timer1_flag == 1)
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <FSMNormalModeRun+0x378>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d10f      	bne.n	800084c <FSMNormalModeRun+0x338>
		{
			status = RED0_GREEN1;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <FSMNormalModeRun+0x37c>)
 800082e:	2216      	movs	r2, #22
 8000830:	601a      	str	r2, [r3, #0]
			setTimer1(green_time);
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <FSMNormalModeRun+0x380>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f000 ff18 	bl	800166c <setTimer1>

			setLedBuffer(red_time, green_time); // set buffer for led 7 seg
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <FSMNormalModeRun+0x384>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a14      	ldr	r2, [pc, #80]	; (8000894 <FSMNormalModeRun+0x380>)
 8000842:	6812      	ldr	r2, [r2, #0]
 8000844:	4611      	mov	r1, r2
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fbde 	bl	8001008 <setLedBuffer>
		}
		if(isButton1Pressed() == 1)
 800084c:	f000 f954 	bl	8000af8 <isButton1Pressed>
 8000850:	4603      	mov	r3, r0
 8000852:	2b01      	cmp	r3, #1
 8000854:	d110      	bne.n	8000878 <FSMNormalModeRun+0x364>
		{
			status = MODIFICATION_MODE;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <FSMNormalModeRun+0x37c>)
 8000858:	221f      	movs	r2, #31
 800085a:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(FSMModificationModeRun, 0, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2100      	movs	r1, #0
 8000860:	480e      	ldr	r0, [pc, #56]	; (800089c <FSMNormalModeRun+0x388>)
 8000862:	f000 fe3d 	bl	80014e0 <SCH_Add_Task>
		}
		break;
 8000866:	e007      	b.n	8000878 <FSMNormalModeRun+0x364>

	default:
		break;
 8000868:	bf00      	nop
 800086a:	e006      	b.n	800087a <FSMNormalModeRun+0x366>
		break;
 800086c:	bf00      	nop
 800086e:	e004      	b.n	800087a <FSMNormalModeRun+0x366>
		break;
 8000870:	bf00      	nop
 8000872:	e002      	b.n	800087a <FSMNormalModeRun+0x366>
		break;
 8000874:	bf00      	nop
 8000876:	e000      	b.n	800087a <FSMNormalModeRun+0x366>
		break;
 8000878:	bf00      	nop
	}
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000011c 	.word	0x2000011c
 8000884:	20000118 	.word	0x20000118
 8000888:	20000044 	.word	0x20000044
 800088c:	20000114 	.word	0x20000114
 8000890:	20000100 	.word	0x20000100
 8000894:	20000058 	.word	0x20000058
 8000898:	20000054 	.word	0x20000054
 800089c:	08000309 	.word	0x08000309

080008a0 <SetPedDuration>:
#include "FSMPedestrianMode.h"

int PED_PRESSED = 0;

void SetPedDuration()
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
	PED_PRESSED = PED_LIGHT_DURATION * (red_time+green_time+yellow_time);
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <SetPedDuration+0x24>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <SetPedDuration+0x28>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	441a      	add	r2, r3
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <SetPedDuration+0x2c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <SetPedDuration+0x30>)
 80008b8:	6013      	str	r3, [r2, #0]
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000054 	.word	0x20000054
 80008c8:	20000058 	.word	0x20000058
 80008cc:	2000005c 	.word	0x2000005c
 80008d0:	200000ec 	.word	0x200000ec

080008d4 <PedDurationCount>:

void PedDurationCount()
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
	if(PED_PRESSED > 0)
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <PedDurationCount+0x20>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	dd04      	ble.n	80008ea <PedDurationCount+0x16>
	{
		PED_PRESSED--;
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <PedDurationCount+0x20>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3b01      	subs	r3, #1
 80008e6:	4a03      	ldr	r2, [pc, #12]	; (80008f4 <PedDurationCount+0x20>)
 80008e8:	6013      	str	r3, [r2, #0]
	}
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	200000ec 	.word	0x200000ec

080008f8 <FSMPedestrianRun>:

void FSMPedestrianRun()
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	switch(status)
 80008fc:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <FSMPedestrianRun+0xbc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3b15      	subs	r3, #21
 8000902:	2b04      	cmp	r3, #4
 8000904:	d853      	bhi.n	80009ae <FSMPedestrianRun+0xb6>
 8000906:	a201      	add	r2, pc, #4	; (adr r2, 800090c <FSMPedestrianRun+0x14>)
 8000908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090c:	08000921 	.word	0x08000921
 8000910:	08000927 	.word	0x08000927
 8000914:	08000949 	.word	0x08000949
 8000918:	0800096b 	.word	0x0800096b
 800091c:	0800098d 	.word	0x0800098d
	{
	case NORMAL_MODE:
		resetInitialState();
 8000920:	f000 fbda 	bl	80010d8 <resetInitialState>
		break;
 8000924:	e044      	b.n	80009b0 <FSMPedestrianRun+0xb8>
	case RED0_GREEN1:
		if(isButton4Pressed())
 8000926:	f000 f941 	bl	8000bac <isButton4Pressed>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <FSMPedestrianRun+0x3c>
		{
			SetPedDuration(); // turn on PED light
 8000930:	f7ff ffb6 	bl	80008a0 <SetPedDuration>
		}

		if(PED_PRESSED > 0)
 8000934:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <FSMPedestrianRun+0xc0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	dd02      	ble.n	8000942 <FSMPedestrianRun+0x4a>
		{
			setPedLightRed();
 800093c:	f000 fada 	bl	8000ef4 <setPedLightRed>
		}
		else
		{
			setPedLightOff();
		}
		break;
 8000940:	e036      	b.n	80009b0 <FSMPedestrianRun+0xb8>
			setPedLightOff();
 8000942:	f000 fb13 	bl	8000f6c <setPedLightOff>
		break;
 8000946:	e033      	b.n	80009b0 <FSMPedestrianRun+0xb8>
	case RED0_YELLOW1:
		if(isButton4Pressed())
 8000948:	f000 f930 	bl	8000bac <isButton4Pressed>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <FSMPedestrianRun+0x5e>
		{
			SetPedDuration(); // turn on PED light
 8000952:	f7ff ffa5 	bl	80008a0 <SetPedDuration>
		}

		if(PED_PRESSED > 0)
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <FSMPedestrianRun+0xc0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	dd02      	ble.n	8000964 <FSMPedestrianRun+0x6c>
		{
			setPedLightRed();
 800095e:	f000 fac9 	bl	8000ef4 <setPedLightRed>
		}
		else
		{
			setPedLightOff();
		}
		break;
 8000962:	e025      	b.n	80009b0 <FSMPedestrianRun+0xb8>
			setPedLightOff();
 8000964:	f000 fb02 	bl	8000f6c <setPedLightOff>
		break;
 8000968:	e022      	b.n	80009b0 <FSMPedestrianRun+0xb8>
	case GREEN0_RED1:
		if(isButton4Pressed())
 800096a:	f000 f91f 	bl	8000bac <isButton4Pressed>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <FSMPedestrianRun+0x80>
		{
			SetPedDuration(); // turn on PED light
 8000974:	f7ff ff94 	bl	80008a0 <SetPedDuration>
		}

		if(PED_PRESSED > 0)
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <FSMPedestrianRun+0xc0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	dd02      	ble.n	8000986 <FSMPedestrianRun+0x8e>
		{
			setPedLightGreen();
 8000980:	f000 fae0 	bl	8000f44 <setPedLightGreen>
		}
		else
		{
			setPedLightOff();
		}
		break;
 8000984:	e014      	b.n	80009b0 <FSMPedestrianRun+0xb8>
			setPedLightOff();
 8000986:	f000 faf1 	bl	8000f6c <setPedLightOff>
		break;
 800098a:	e011      	b.n	80009b0 <FSMPedestrianRun+0xb8>
	case YELLOW0_RED1:
		if(isButton4Pressed())
 800098c:	f000 f90e 	bl	8000bac <isButton4Pressed>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <FSMPedestrianRun+0xa2>
		{
			SetPedDuration(); // turn on PED light
 8000996:	f7ff ff83 	bl	80008a0 <SetPedDuration>
		}

		if(PED_PRESSED > 0)
 800099a:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <FSMPedestrianRun+0xc0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	dd02      	ble.n	80009a8 <FSMPedestrianRun+0xb0>
		{
			setPedLightYellow();
 80009a2:	f000 fabb 	bl	8000f1c <setPedLightYellow>
		}
		else
		{
			setPedLightOff();
		}
		break;
 80009a6:	e003      	b.n	80009b0 <FSMPedestrianRun+0xb8>
			setPedLightOff();
 80009a8:	f000 fae0 	bl	8000f6c <setPedLightOff>
		break;
 80009ac:	e000      	b.n	80009b0 <FSMPedestrianRun+0xb8>
	default:
		break;
 80009ae:	bf00      	nop
	}
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000100 	.word	0x20000100
 80009b8:	200000ec 	.word	0x200000ec

080009bc <uart_Init>:

/*brief: init uart interrupt if the system received data
 * para: none
 * retval: none
 * */
void uart_Init(void) {
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	return;
 80009c0:	bf00      	nop
}
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <UARTSendMode>:
/*brief: send the current mode once.
 * para: mode - the current number mode
 * retval: none
 * */
void UARTSendMode(uint8_t mode)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08e      	sub	sp, #56	; 0x38
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
	char str[45];
	uint16_t len = sprintf(str, "!MODE:%d#\n", mode);
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	4908      	ldr	r1, [pc, #32]	; (80009fc <UARTSendMode+0x34>)
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 fde2 	bl	80045a4 <siprintf>
 80009e0:	4603      	mov	r3, r0
 80009e2:	86fb      	strh	r3, [r7, #54]	; 0x36
	HAL_UART_Transmit(&huart2, (uint8_t*) str, len, 10);
 80009e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80009e6:	f107 0108 	add.w	r1, r7, #8
 80009ea:	230a      	movs	r3, #10
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <UARTSendMode+0x38>)
 80009ee:	f002 ff0d 	bl	800380c <HAL_UART_Transmit>
}
 80009f2:	bf00      	nop
 80009f4:	3738      	adds	r7, #56	; 0x38
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08004cc4 	.word	0x08004cc4
 8000a00:	200001c0 	.word	0x200001c0

08000a04 <UARTCountdownTrafficTime>:
 * para: 	id - the index of traffic light 0 or 1
 * 			number - the value of timers
 * retval: none
 * */
void UARTCountdownTrafficTime(uint8_t id,uint16_t time)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	460a      	mov	r2, r1
 8000a0e:	71fb      	strb	r3, [r7, #7]
 8000a10:	4613      	mov	r3, r2
 8000a12:	80bb      	strh	r3, [r7, #4]
	char str[20];
	uint16_t len = sprintf(str, "!7SEG%d:%d#\n", id, time);
 8000a14:	79fa      	ldrb	r2, [r7, #7]
 8000a16:	88bb      	ldrh	r3, [r7, #4]
 8000a18:	f107 0008 	add.w	r0, r7, #8
 8000a1c:	4907      	ldr	r1, [pc, #28]	; (8000a3c <UARTCountdownTrafficTime+0x38>)
 8000a1e:	f003 fdc1 	bl	80045a4 <siprintf>
 8000a22:	4603      	mov	r3, r0
 8000a24:	83fb      	strh	r3, [r7, #30]
	HAL_UART_Transmit(&huart2, (uint8_t*) str, len, 10);
 8000a26:	8bfa      	ldrh	r2, [r7, #30]
 8000a28:	f107 0108 	add.w	r1, r7, #8
 8000a2c:	230a      	movs	r3, #10
 8000a2e:	4804      	ldr	r0, [pc, #16]	; (8000a40 <UARTCountdownTrafficTime+0x3c>)
 8000a30:	f002 feec 	bl	800380c <HAL_UART_Transmit>
}
 8000a34:	bf00      	nop
 8000a36:	3720      	adds	r7, #32
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	08004cd0 	.word	0x08004cd0
 8000a40:	200001c0 	.word	0x200001c0

08000a44 <UARTSendBufferRed>:
/*brief: send the red buffer in RED_ADJUSTMENT
 * para:	number - the value of buffers
 * retval: none
 * */
void UARTSendBufferRed(uint16_t number)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
	char str[20];
	uint16_t len = sprintf(str, "!RED:%d#\n", number);
 8000a4e:	88fa      	ldrh	r2, [r7, #6]
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	4908      	ldr	r1, [pc, #32]	; (8000a78 <UARTSendBufferRed+0x34>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	f003 fda4 	bl	80045a4 <siprintf>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	83fb      	strh	r3, [r7, #30]
	HAL_UART_Transmit(&huart2, (uint8_t*) str, len, 10);
 8000a60:	8bfa      	ldrh	r2, [r7, #30]
 8000a62:	f107 0108 	add.w	r1, r7, #8
 8000a66:	230a      	movs	r3, #10
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <UARTSendBufferRed+0x38>)
 8000a6a:	f002 fecf 	bl	800380c <HAL_UART_Transmit>
}
 8000a6e:	bf00      	nop
 8000a70:	3720      	adds	r7, #32
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	08004ce0 	.word	0x08004ce0
 8000a7c:	200001c0 	.word	0x200001c0

08000a80 <UARTSendBufferGreen>:
/*brief: send the green buffer in GREEN_ADJUSTMENT
 * para:	number - the value of buffers
 * retval: none
 * */
void UARTSendBufferGreen(uint16_t number) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	80fb      	strh	r3, [r7, #6]
	char str[20];
	uint16_t len = sprintf(str, "!GREEN:%d#\n", number);
 8000a8a:	88fa      	ldrh	r2, [r7, #6]
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	4908      	ldr	r1, [pc, #32]	; (8000ab4 <UARTSendBufferGreen+0x34>)
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 fd86 	bl	80045a4 <siprintf>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	83fb      	strh	r3, [r7, #30]
	HAL_UART_Transmit(&huart2, (uint8_t*) str, len, 10);
 8000a9c:	8bfa      	ldrh	r2, [r7, #30]
 8000a9e:	f107 0108 	add.w	r1, r7, #8
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <UARTSendBufferGreen+0x38>)
 8000aa6:	f002 feb1 	bl	800380c <HAL_UART_Transmit>
}
 8000aaa:	bf00      	nop
 8000aac:	3720      	adds	r7, #32
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	08004cec 	.word	0x08004cec
 8000ab8:	200001c0 	.word	0x200001c0

08000abc <UARTSendBufferYellow>:
/*brief: send the yellow buffer in YELLOW_ADJUSTMENT
 * para:	number - the value of buffers
 * retval: none
 * */
void UARTSendBufferYellow(uint16_t number) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80fb      	strh	r3, [r7, #6]
	char str[20];
	uint16_t len = sprintf(str, "!YELLOW:%d#\n", number);
 8000ac6:	88fa      	ldrh	r2, [r7, #6]
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	4908      	ldr	r1, [pc, #32]	; (8000af0 <UARTSendBufferYellow+0x34>)
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f003 fd68 	bl	80045a4 <siprintf>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	83fb      	strh	r3, [r7, #30]
	HAL_UART_Transmit(&huart2, (uint8_t*) str, len, 10);
 8000ad8:	8bfa      	ldrh	r2, [r7, #30]
 8000ada:	f107 0108 	add.w	r1, r7, #8
 8000ade:	230a      	movs	r3, #10
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <UARTSendBufferYellow+0x38>)
 8000ae2:	f002 fe93 	bl	800380c <HAL_UART_Transmit>
}
 8000ae6:	bf00      	nop
 8000ae8:	3720      	adds	r7, #32
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	08004cf8 	.word	0x08004cf8
 8000af4:	200001c0 	.word	0x200001c0

08000af8 <isButton1Pressed>:
int button2_flag = 0;
int button3_flag = 0;
int button4_flag = 0;
// PROCESS BUTTON 1 FUNCTION
int isButton1Pressed() // nếu nút được nhấn thì hàm trả về 1
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <isButton1Pressed+0x20>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d104      	bne.n	8000b0e <isButton1Pressed+0x16>
		button1_flag = 0;
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <isButton1Pressed+0x20>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
		return 1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e000      	b.n	8000b10 <isButton1Pressed+0x18>
	}
	else return 0;
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	200000f0 	.word	0x200000f0

08000b1c <flag1Process>:
void flag1Process() // hàm này chỉ đề set cờ khi mà nút được nhấn
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
	button1_flag = 1; // set flag để xử lý trên while(1)
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <flag1Process+0x14>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	601a      	str	r2, [r3, #0]
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200000f0 	.word	0x200000f0

08000b34 <isButton2Pressed>:

// PROCESS BUTTON 2 FUNCTION
int isButton2Pressed()
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <isButton2Pressed+0x20>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d104      	bne.n	8000b4a <isButton2Pressed+0x16>
	{
		button2_flag = 0;
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <isButton2Pressed+0x20>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
		return 1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <isButton2Pressed+0x18>
	}
	else return 0;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	200000f4 	.word	0x200000f4

08000b58 <flag2Process>:
void flag2Process()
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	button2_flag = 1;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <flag2Process+0x14>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	601a      	str	r2, [r3, #0]
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200000f4 	.word	0x200000f4

08000b70 <isButton3Pressed>:

//PROCESS BUTTON 3 FUNCTION
int isButton3Pressed()
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <isButton3Pressed+0x20>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d104      	bne.n	8000b86 <isButton3Pressed+0x16>
	{
		button3_flag = 0;
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <isButton3Pressed+0x20>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
		return 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e000      	b.n	8000b88 <isButton3Pressed+0x18>
	}
	else return 0;
 8000b86:	2300      	movs	r3, #0
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	200000f8 	.word	0x200000f8

08000b94 <flag3Process>:
void flag3Process()
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <flag3Process+0x14>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	601a      	str	r2, [r3, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	200000f8 	.word	0x200000f8

08000bac <isButton4Pressed>:

//PROCESS BUTTON 4 FUNCTION
int isButton4Pressed()
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
	if(button4_flag == 1)
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <isButton4Pressed+0x20>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d104      	bne.n	8000bc2 <isButton4Pressed+0x16>
	{
		button4_flag = 0;
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <isButton4Pressed+0x20>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
		return 1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e000      	b.n	8000bc4 <isButton4Pressed+0x18>
	}
	else return 0;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	200000fc 	.word	0x200000fc

08000bd0 <flag4Process>:
void flag4Process()
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
	button4_flag = 1;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <flag4Process+0x14>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	601a      	str	r2, [r3, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	200000fc 	.word	0x200000fc

08000be8 <getKeyInput>:


void getKeyInput()  //goi = timer moi 10ms 1 lan
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	//BUTTON1
	key1_reg0 = key1_reg1;
 8000bec:	4b78      	ldr	r3, [pc, #480]	; (8000dd0 <getKeyInput+0x1e8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a78      	ldr	r2, [pc, #480]	; (8000dd4 <getKeyInput+0x1ec>)
 8000bf2:	6013      	str	r3, [r2, #0]
	key1_reg1 = key1_reg2;
 8000bf4:	4b78      	ldr	r3, [pc, #480]	; (8000dd8 <getKeyInput+0x1f0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a75      	ldr	r2, [pc, #468]	; (8000dd0 <getKeyInput+0x1e8>)
 8000bfa:	6013      	str	r3, [r2, #0]
	key1_reg2 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin); // key1_reg2 đọc giá trị của nút nhấn
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4877      	ldr	r0, [pc, #476]	; (8000ddc <getKeyInput+0x1f4>)
 8000c00:	f001 fadc 	bl	80021bc <HAL_GPIO_ReadPin>
 8000c04:	4603      	mov	r3, r0
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b73      	ldr	r3, [pc, #460]	; (8000dd8 <getKeyInput+0x1f0>)
 8000c0a:	601a      	str	r2, [r3, #0]
	if((key1_reg0 == key1_reg1) && (key1_reg1 == key1_reg2)) // chống rung
 8000c0c:	4b71      	ldr	r3, [pc, #452]	; (8000dd4 <getKeyInput+0x1ec>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b6f      	ldr	r3, [pc, #444]	; (8000dd0 <getKeyInput+0x1e8>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d125      	bne.n	8000c64 <getKeyInput+0x7c>
 8000c18:	4b6d      	ldr	r3, [pc, #436]	; (8000dd0 <getKeyInput+0x1e8>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b6e      	ldr	r3, [pc, #440]	; (8000dd8 <getKeyInput+0x1f0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d11f      	bne.n	8000c64 <getKeyInput+0x7c>
	{
		if(key1_reg3 != key1_reg2) // xử lý khi nhấn
 8000c24:	4b6e      	ldr	r3, [pc, #440]	; (8000de0 <getKeyInput+0x1f8>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b6b      	ldr	r3, [pc, #428]	; (8000dd8 <getKeyInput+0x1f0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d00d      	beq.n	8000c4c <getKeyInput+0x64>
		{
			key1_reg3 = key1_reg2;
 8000c30:	4b69      	ldr	r3, [pc, #420]	; (8000dd8 <getKeyInput+0x1f0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a6a      	ldr	r2, [pc, #424]	; (8000de0 <getKeyInput+0x1f8>)
 8000c36:	6013      	str	r3, [r2, #0]
			if(key1_reg2 == PRESSED_STATE)
 8000c38:	4b67      	ldr	r3, [pc, #412]	; (8000dd8 <getKeyInput+0x1f0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d111      	bne.n	8000c64 <getKeyInput+0x7c>
			{
				flag1Process();
 8000c40:	f7ff ff6c 	bl	8000b1c <flag1Process>
				timer_for_key_press = 200; // gán lại lên 2s
 8000c44:	4b67      	ldr	r3, [pc, #412]	; (8000de4 <getKeyInput+0x1fc>)
 8000c46:	22c8      	movs	r2, #200	; 0xc8
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	e00b      	b.n	8000c64 <getKeyInput+0x7c>
			}
		}
		else // xử lý nhấn đè (key1_reg3 == key1_reg2)
		{
			timer_for_key_press--;
 8000c4c:	4b65      	ldr	r3, [pc, #404]	; (8000de4 <getKeyInput+0x1fc>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	3b01      	subs	r3, #1
 8000c52:	4a64      	ldr	r2, [pc, #400]	; (8000de4 <getKeyInput+0x1fc>)
 8000c54:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 8000c56:	4b63      	ldr	r3, [pc, #396]	; (8000de4 <getKeyInput+0x1fc>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d102      	bne.n	8000c64 <getKeyInput+0x7c>
			{
				key1_reg3 = NORMAL_STATE; // gán key1_reg3 thành NORMAL_STATE sẽ reset trường hợp nhấn đè lên lại trường hợp nhấn
 8000c5e:	4b60      	ldr	r3, [pc, #384]	; (8000de0 <getKeyInput+0x1f8>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
			}
		}
	}
	//BUTTON2
	key2_reg0 = key2_reg1;
 8000c64:	4b60      	ldr	r3, [pc, #384]	; (8000de8 <getKeyInput+0x200>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a60      	ldr	r2, [pc, #384]	; (8000dec <getKeyInput+0x204>)
 8000c6a:	6013      	str	r3, [r2, #0]
	key2_reg1 = key2_reg2;
 8000c6c:	4b60      	ldr	r3, [pc, #384]	; (8000df0 <getKeyInput+0x208>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a5d      	ldr	r2, [pc, #372]	; (8000de8 <getKeyInput+0x200>)
 8000c72:	6013      	str	r3, [r2, #0]
	key2_reg2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000c74:	2120      	movs	r1, #32
 8000c76:	4859      	ldr	r0, [pc, #356]	; (8000ddc <getKeyInput+0x1f4>)
 8000c78:	f001 faa0 	bl	80021bc <HAL_GPIO_ReadPin>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b5b      	ldr	r3, [pc, #364]	; (8000df0 <getKeyInput+0x208>)
 8000c82:	601a      	str	r2, [r3, #0]
	if(key2_reg0 == key2_reg1 && key2_reg1 == key2_reg2)
 8000c84:	4b59      	ldr	r3, [pc, #356]	; (8000dec <getKeyInput+0x204>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b57      	ldr	r3, [pc, #348]	; (8000de8 <getKeyInput+0x200>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d125      	bne.n	8000cdc <getKeyInput+0xf4>
 8000c90:	4b55      	ldr	r3, [pc, #340]	; (8000de8 <getKeyInput+0x200>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b56      	ldr	r3, [pc, #344]	; (8000df0 <getKeyInput+0x208>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d11f      	bne.n	8000cdc <getKeyInput+0xf4>
	{
		if(key2_reg3 != key2_reg2)
 8000c9c:	4b55      	ldr	r3, [pc, #340]	; (8000df4 <getKeyInput+0x20c>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b53      	ldr	r3, [pc, #332]	; (8000df0 <getKeyInput+0x208>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d00d      	beq.n	8000cc4 <getKeyInput+0xdc>
		{
			key2_reg3 = key2_reg2;
 8000ca8:	4b51      	ldr	r3, [pc, #324]	; (8000df0 <getKeyInput+0x208>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a51      	ldr	r2, [pc, #324]	; (8000df4 <getKeyInput+0x20c>)
 8000cae:	6013      	str	r3, [r2, #0]
			if(key2_reg2 == PRESSED_STATE)
 8000cb0:	4b4f      	ldr	r3, [pc, #316]	; (8000df0 <getKeyInput+0x208>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d111      	bne.n	8000cdc <getKeyInput+0xf4>
			{
				flag2Process();
 8000cb8:	f7ff ff4e 	bl	8000b58 <flag2Process>
				timer_for_key_press = 200;
 8000cbc:	4b49      	ldr	r3, [pc, #292]	; (8000de4 <getKeyInput+0x1fc>)
 8000cbe:	22c8      	movs	r2, #200	; 0xc8
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	e00b      	b.n	8000cdc <getKeyInput+0xf4>
			}
		}
		else
		{
			timer_for_key_press--;
 8000cc4:	4b47      	ldr	r3, [pc, #284]	; (8000de4 <getKeyInput+0x1fc>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	4a46      	ldr	r2, [pc, #280]	; (8000de4 <getKeyInput+0x1fc>)
 8000ccc:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 8000cce:	4b45      	ldr	r3, [pc, #276]	; (8000de4 <getKeyInput+0x1fc>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d102      	bne.n	8000cdc <getKeyInput+0xf4>
			{
				key2_reg3 = NORMAL_STATE;
 8000cd6:	4b47      	ldr	r3, [pc, #284]	; (8000df4 <getKeyInput+0x20c>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	601a      	str	r2, [r3, #0]
			}
		}
	}
	//BUTTON3
	key3_reg0 = key3_reg1;
 8000cdc:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <getKeyInput+0x210>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a46      	ldr	r2, [pc, #280]	; (8000dfc <getKeyInput+0x214>)
 8000ce2:	6013      	str	r3, [r2, #0]
	key3_reg1 = key3_reg2;
 8000ce4:	4b46      	ldr	r3, [pc, #280]	; (8000e00 <getKeyInput+0x218>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a43      	ldr	r2, [pc, #268]	; (8000df8 <getKeyInput+0x210>)
 8000cea:	6013      	str	r3, [r2, #0]
	key3_reg2 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000cec:	2101      	movs	r1, #1
 8000cee:	4845      	ldr	r0, [pc, #276]	; (8000e04 <getKeyInput+0x21c>)
 8000cf0:	f001 fa64 	bl	80021bc <HAL_GPIO_ReadPin>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b41      	ldr	r3, [pc, #260]	; (8000e00 <getKeyInput+0x218>)
 8000cfa:	601a      	str	r2, [r3, #0]
	if(key3_reg0 == key3_reg1 && key3_reg1 == key3_reg2)
 8000cfc:	4b3f      	ldr	r3, [pc, #252]	; (8000dfc <getKeyInput+0x214>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <getKeyInput+0x210>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d125      	bne.n	8000d54 <getKeyInput+0x16c>
 8000d08:	4b3b      	ldr	r3, [pc, #236]	; (8000df8 <getKeyInput+0x210>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b3c      	ldr	r3, [pc, #240]	; (8000e00 <getKeyInput+0x218>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d11f      	bne.n	8000d54 <getKeyInput+0x16c>
	{
		if(key3_reg2 != key3_reg3)
 8000d14:	4b3a      	ldr	r3, [pc, #232]	; (8000e00 <getKeyInput+0x218>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <getKeyInput+0x220>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d00d      	beq.n	8000d3c <getKeyInput+0x154>
		{
			key3_reg3 = key3_reg2;
 8000d20:	4b37      	ldr	r3, [pc, #220]	; (8000e00 <getKeyInput+0x218>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a38      	ldr	r2, [pc, #224]	; (8000e08 <getKeyInput+0x220>)
 8000d26:	6013      	str	r3, [r2, #0]
			if(key3_reg2 == PRESSED_STATE)
 8000d28:	4b35      	ldr	r3, [pc, #212]	; (8000e00 <getKeyInput+0x218>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d111      	bne.n	8000d54 <getKeyInput+0x16c>
			{
				flag3Process();
 8000d30:	f7ff ff30 	bl	8000b94 <flag3Process>
				timer_for_key_press = 200;
 8000d34:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <getKeyInput+0x1fc>)
 8000d36:	22c8      	movs	r2, #200	; 0xc8
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	e00b      	b.n	8000d54 <getKeyInput+0x16c>
			}
		}

		else
		{
			timer_for_key_press--;
 8000d3c:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <getKeyInput+0x1fc>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	4a28      	ldr	r2, [pc, #160]	; (8000de4 <getKeyInput+0x1fc>)
 8000d44:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 8000d46:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <getKeyInput+0x1fc>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d102      	bne.n	8000d54 <getKeyInput+0x16c>
			{
				key3_reg3 = NORMAL_STATE;
 8000d4e:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <getKeyInput+0x220>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	601a      	str	r2, [r3, #0]
			}
		}
	}
	//PED_BUTTON
	key4_reg0 = key4_reg1;
 8000d54:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <getKeyInput+0x224>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a2d      	ldr	r2, [pc, #180]	; (8000e10 <getKeyInput+0x228>)
 8000d5a:	6013      	str	r3, [r2, #0]
	key4_reg1 = key4_reg2;
 8000d5c:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <getKeyInput+0x22c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a2a      	ldr	r2, [pc, #168]	; (8000e0c <getKeyInput+0x224>)
 8000d62:	6013      	str	r3, [r2, #0]
	key4_reg2 = HAL_GPIO_ReadPin(PED_BUTTON_GPIO_Port, PED_BUTTON_Pin);
 8000d64:	2101      	movs	r1, #1
 8000d66:	481d      	ldr	r0, [pc, #116]	; (8000ddc <getKeyInput+0x1f4>)
 8000d68:	f001 fa28 	bl	80021bc <HAL_GPIO_ReadPin>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <getKeyInput+0x22c>)
 8000d72:	601a      	str	r2, [r3, #0]
	if(key4_reg0 == key4_reg1 && key4_reg1 == key4_reg2)
 8000d74:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <getKeyInput+0x228>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <getKeyInput+0x224>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d125      	bne.n	8000dcc <getKeyInput+0x1e4>
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <getKeyInput+0x224>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <getKeyInput+0x22c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d11f      	bne.n	8000dcc <getKeyInput+0x1e4>
	{
		if(key4_reg2 != key4_reg3)
 8000d8c:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <getKeyInput+0x22c>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <getKeyInput+0x230>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d00d      	beq.n	8000db4 <getKeyInput+0x1cc>
		{
			key4_reg3 = key4_reg2;
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <getKeyInput+0x22c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <getKeyInput+0x230>)
 8000d9e:	6013      	str	r3, [r2, #0]
			if(key4_reg2 == PRESSED_STATE)
 8000da0:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <getKeyInput+0x22c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d111      	bne.n	8000dcc <getKeyInput+0x1e4>
			{
				flag4Process();
 8000da8:	f7ff ff12 	bl	8000bd0 <flag4Process>
				timer_for_key_press = 200;
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <getKeyInput+0x1fc>)
 8000dae:	22c8      	movs	r2, #200	; 0xc8
 8000db0:	601a      	str	r2, [r3, #0]
			{
				key4_reg3 = NORMAL_STATE;
			}
		}
	}
}
 8000db2:	e00b      	b.n	8000dcc <getKeyInput+0x1e4>
			timer_for_key_press--;
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <getKeyInput+0x1fc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <getKeyInput+0x1fc>)
 8000dbc:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <getKeyInput+0x1fc>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d102      	bne.n	8000dcc <getKeyInput+0x1e4>
				key4_reg3 = NORMAL_STATE;
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <getKeyInput+0x230>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	601a      	str	r2, [r3, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000004 	.word	0x20000004
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	40010800 	.word	0x40010800
 8000de0:	2000000c 	.word	0x2000000c
 8000de4:	20000040 	.word	0x20000040
 8000de8:	20000014 	.word	0x20000014
 8000dec:	20000010 	.word	0x20000010
 8000df0:	20000018 	.word	0x20000018
 8000df4:	2000001c 	.word	0x2000001c
 8000df8:	20000024 	.word	0x20000024
 8000dfc:	20000020 	.word	0x20000020
 8000e00:	20000028 	.word	0x20000028
 8000e04:	40010c00 	.word	0x40010c00
 8000e08:	2000002c 	.word	0x2000002c
 8000e0c:	20000034 	.word	0x20000034
 8000e10:	20000030 	.word	0x20000030
 8000e14:	20000038 	.word	0x20000038
 8000e18:	2000003c 	.word	0x2000003c

08000e1c <setTrafficRed>:
int green_time = 3;
int yellow_time = 2;

//SET TRAFFIC LIGHT FUNCTION
void setTrafficRed()
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_GPIO_Port, LIGHT2_Pin, RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <setTrafficRed+0x20>)
 8000e28:	f001 f9df 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT3_GPIO_Port, LIGHT3_Pin, SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2108      	movs	r1, #8
 8000e30:	4803      	ldr	r0, [pc, #12]	; (8000e40 <setTrafficRed+0x24>)
 8000e32:	f001 f9da 	bl	80021ea <HAL_GPIO_WritePin>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40010800 	.word	0x40010800
 8000e40:	40010c00 	.word	0x40010c00

08000e44 <setTrafficGreen>:
void setTrafficGreen()
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_GPIO_Port, LIGHT2_Pin, SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <setTrafficGreen+0x20>)
 8000e50:	f001 f9cb 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT3_GPIO_Port, LIGHT3_Pin, RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2108      	movs	r1, #8
 8000e58:	4803      	ldr	r0, [pc, #12]	; (8000e68 <setTrafficGreen+0x24>)
 8000e5a:	f001 f9c6 	bl	80021ea <HAL_GPIO_WritePin>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40010800 	.word	0x40010800
 8000e68:	40010c00 	.word	0x40010c00

08000e6c <setTrafficYellow>:
void setTrafficYellow()
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_GPIO_Port, LIGHT2_Pin, RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <setTrafficYellow+0x20>)
 8000e78:	f001 f9b7 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT3_GPIO_Port, LIGHT3_Pin, RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2108      	movs	r1, #8
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <setTrafficYellow+0x24>)
 8000e82:	f001 f9b2 	bl	80021ea <HAL_GPIO_WritePin>
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40010800 	.word	0x40010800
 8000e90:	40010c00 	.word	0x40010c00

08000e94 <setTrafficRed1>:

void setTrafficRed1()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT4_GPIO_Port, LIGHT4_Pin, RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2110      	movs	r1, #16
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <setTrafficRed1+0x1c>)
 8000e9e:	f001 f9a4 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT5_GPIO_Port, LIGHT5_Pin, SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <setTrafficRed1+0x1c>)
 8000ea8:	f001 f99f 	bl	80021ea <HAL_GPIO_WritePin>

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40010c00 	.word	0x40010c00

08000eb4 <setTrafficGreen1>:
void setTrafficGreen1()
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT4_GPIO_Port, LIGHT4_Pin, SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <setTrafficGreen1+0x1c>)
 8000ebe:	f001 f994 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT5_GPIO_Port, LIGHT5_Pin, RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2120      	movs	r1, #32
 8000ec6:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <setTrafficGreen1+0x1c>)
 8000ec8:	f001 f98f 	bl	80021ea <HAL_GPIO_WritePin>
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40010c00 	.word	0x40010c00

08000ed4 <setTrafficYellow1>:
void setTrafficYellow1()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT4_GPIO_Port, LIGHT4_Pin, RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2110      	movs	r1, #16
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <setTrafficYellow1+0x1c>)
 8000ede:	f001 f984 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT5_GPIO_Port, LIGHT5_Pin, RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2120      	movs	r1, #32
 8000ee6:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <setTrafficYellow1+0x1c>)
 8000ee8:	f001 f97f 	bl	80021ea <HAL_GPIO_WritePin>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40010c00 	.word	0x40010c00

08000ef4 <setPedLightRed>:
// PED CONTROL
void setPedLightRed()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_LIGHT1_GPIO_Port, PED_LIGHT1_Pin, RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <setPedLightRed+0x20>)
 8000f00:	f001 f973 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_LIGHT2_GPIO_Port, PED_LIGHT2_Pin, SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0a:	4803      	ldr	r0, [pc, #12]	; (8000f18 <setPedLightRed+0x24>)
 8000f0c:	f001 f96d 	bl	80021ea <HAL_GPIO_WritePin>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40010c00 	.word	0x40010c00
 8000f18:	40010800 	.word	0x40010800

08000f1c <setPedLightYellow>:
void setPedLightYellow()
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_LIGHT1_GPIO_Port, PED_LIGHT1_Pin, RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <setPedLightYellow+0x20>)
 8000f28:	f001 f95f 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_LIGHT2_GPIO_Port, PED_LIGHT2_Pin, RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f32:	4803      	ldr	r0, [pc, #12]	; (8000f40 <setPedLightYellow+0x24>)
 8000f34:	f001 f959 	bl	80021ea <HAL_GPIO_WritePin>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40010c00 	.word	0x40010c00
 8000f40:	40010800 	.word	0x40010800

08000f44 <setPedLightGreen>:
void setPedLightGreen()
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_LIGHT1_GPIO_Port, PED_LIGHT1_Pin, SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <setPedLightGreen+0x20>)
 8000f50:	f001 f94b 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_LIGHT2_GPIO_Port, PED_LIGHT2_Pin, RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5a:	4803      	ldr	r0, [pc, #12]	; (8000f68 <setPedLightGreen+0x24>)
 8000f5c:	f001 f945 	bl	80021ea <HAL_GPIO_WritePin>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40010c00 	.word	0x40010c00
 8000f68:	40010800 	.word	0x40010800

08000f6c <setPedLightOff>:
void setPedLightOff()
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_LIGHT1_GPIO_Port, PED_LIGHT1_Pin, SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <setPedLightOff+0x20>)
 8000f78:	f001 f937 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_LIGHT2_GPIO_Port, PED_LIGHT2_Pin, SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <setPedLightOff+0x24>)
 8000f84:	f001 f931 	bl	80021ea <HAL_GPIO_WritePin>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40010c00 	.word	0x40010c00
 8000f90:	40010800 	.word	0x40010800

08000f94 <toggleTrafficRed>:
// toggle control
void toggleTrafficRed()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LIGHT2_GPIO_Port, LIGHT2_Pin);
 8000f98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <toggleTrafficRed+0x1c>)
 8000f9e:	f001 f93c 	bl	800221a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT4_GPIO_Port, LIGHT4_Pin);
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <toggleTrafficRed+0x20>)
 8000fa6:	f001 f938 	bl	800221a <HAL_GPIO_TogglePin>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40010800 	.word	0x40010800
 8000fb4:	40010c00 	.word	0x40010c00

08000fb8 <toggleTrafficYellow>:
void toggleTrafficYellow()
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LIGHT2_GPIO_Port, LIGHT2_Pin);
 8000fbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc0:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <toggleTrafficYellow+0x2c>)
 8000fc2:	f001 f92a 	bl	800221a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT3_GPIO_Port, LIGHT3_Pin);
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <toggleTrafficYellow+0x30>)
 8000fca:	f001 f926 	bl	800221a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT4_GPIO_Port, LIGHT4_Pin);
 8000fce:	2110      	movs	r1, #16
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <toggleTrafficYellow+0x30>)
 8000fd2:	f001 f922 	bl	800221a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT5_GPIO_Port, LIGHT5_Pin);
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <toggleTrafficYellow+0x30>)
 8000fda:	f001 f91e 	bl	800221a <HAL_GPIO_TogglePin>
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40010800 	.word	0x40010800
 8000fe8:	40010c00 	.word	0x40010c00

08000fec <toggleTrafficGreen>:
void toggleTrafficGreen()
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LIGHT3_GPIO_Port, LIGHT3_Pin);
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	4804      	ldr	r0, [pc, #16]	; (8001004 <toggleTrafficGreen+0x18>)
 8000ff4:	f001 f911 	bl	800221a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT5_GPIO_Port, LIGHT5_Pin);
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	4802      	ldr	r0, [pc, #8]	; (8001004 <toggleTrafficGreen+0x18>)
 8000ffc:	f001 f90d 	bl	800221a <HAL_GPIO_TogglePin>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40010c00 	.word	0x40010c00

08001008 <setLedBuffer>:

int led_buffer[4] = {1, 2, 3, 4};
void setLedBuffer(int first_led_time, int second_led_time)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
	led_buffer[0] = first_led_time / 10;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a18      	ldr	r2, [pc, #96]	; (8001078 <setLedBuffer+0x70>)
 8001016:	fb82 1203 	smull	r1, r2, r2, r3
 800101a:	1092      	asrs	r2, r2, #2
 800101c:	17db      	asrs	r3, r3, #31
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	4a16      	ldr	r2, [pc, #88]	; (800107c <setLedBuffer+0x74>)
 8001022:	6013      	str	r3, [r2, #0]
	led_buffer[1] = first_led_time % 10;
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <setLedBuffer+0x70>)
 8001028:	fb83 2301 	smull	r2, r3, r3, r1
 800102c:	109a      	asrs	r2, r3, #2
 800102e:	17cb      	asrs	r3, r1, #31
 8001030:	1ad2      	subs	r2, r2, r3
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	1aca      	subs	r2, r1, r3
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <setLedBuffer+0x74>)
 800103e:	605a      	str	r2, [r3, #4]
	led_buffer[2] = second_led_time / 10;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <setLedBuffer+0x70>)
 8001044:	fb82 1203 	smull	r1, r2, r2, r3
 8001048:	1092      	asrs	r2, r2, #2
 800104a:	17db      	asrs	r3, r3, #31
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	4a0b      	ldr	r2, [pc, #44]	; (800107c <setLedBuffer+0x74>)
 8001050:	6093      	str	r3, [r2, #8]
	led_buffer[3] = second_led_time % 10;
 8001052:	6839      	ldr	r1, [r7, #0]
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <setLedBuffer+0x70>)
 8001056:	fb83 2301 	smull	r2, r3, r3, r1
 800105a:	109a      	asrs	r2, r3, #2
 800105c:	17cb      	asrs	r3, r1, #31
 800105e:	1ad2      	subs	r2, r2, r3
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	1aca      	subs	r2, r1, r3
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <setLedBuffer+0x74>)
 800106c:	60da      	str	r2, [r3, #12]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	66666667 	.word	0x66666667
 800107c:	20000044 	.word	0x20000044

08001080 <updateLedBuffer>:

void updateLedBuffer()
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
	//TODO
	if(led_buffer[1] <= 0)
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <updateLedBuffer+0x54>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	dc08      	bgt.n	800109e <updateLedBuffer+0x1e>
	{
		led_buffer[0]--;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <updateLedBuffer+0x54>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	3b01      	subs	r3, #1
 8001092:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <updateLedBuffer+0x54>)
 8001094:	6013      	str	r3, [r2, #0]
		led_buffer[1] = 9;
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <updateLedBuffer+0x54>)
 8001098:	2209      	movs	r2, #9
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	e004      	b.n	80010a8 <updateLedBuffer+0x28>
	}
	else
	{
		led_buffer[1]--;
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <updateLedBuffer+0x54>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <updateLedBuffer+0x54>)
 80010a6:	6053      	str	r3, [r2, #4]
	}
	if(led_buffer[3] <= 0)
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <updateLedBuffer+0x54>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	dc08      	bgt.n	80010c2 <updateLedBuffer+0x42>
	{
		led_buffer[2]--;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <updateLedBuffer+0x54>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <updateLedBuffer+0x54>)
 80010b8:	6093      	str	r3, [r2, #8]
		led_buffer[3] = 9;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <updateLedBuffer+0x54>)
 80010bc:	2209      	movs	r2, #9
 80010be:	60da      	str	r2, [r3, #12]
	}
	else
	{
		led_buffer[3]--;
	}
}
 80010c0:	e004      	b.n	80010cc <updateLedBuffer+0x4c>
		led_buffer[3]--;
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <updateLedBuffer+0x54>)
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	4a02      	ldr	r2, [pc, #8]	; (80010d4 <updateLedBuffer+0x54>)
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	20000044 	.word	0x20000044

080010d8 <resetInitialState>:

void resetInitialState()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, PED_LIGHT1_Pin|LIGHT3_Pin|LIGHT4_Pin|LIGHT5_Pin, SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80010e2:	480f      	ldr	r0, [pc, #60]	; (8001120 <resetInitialState+0x48>)
 80010e4:	f001 f881 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, PED_LIGHT2_Pin|LIGHT2_Pin, SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80010ee:	480d      	ldr	r0, [pc, #52]	; (8001124 <resetInitialState+0x4c>)
 80010f0:	f001 f87b 	bl	80021ea <HAL_GPIO_WritePin>

	timer1_flag = 0;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <resetInitialState+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <resetInitialState+0x54>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
	timer3_flag = 0;
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <resetInitialState+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
	timer4_flag = 0;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <resetInitialState+0x5c>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

	isButton1Pressed(); // delete all button_flag
 800110c:	f7ff fcf4 	bl	8000af8 <isButton1Pressed>
	isButton2Pressed();
 8001110:	f7ff fd10 	bl	8000b34 <isButton2Pressed>
	isButton3Pressed();
 8001114:	f7ff fd2c 	bl	8000b70 <isButton3Pressed>
	isButton4Pressed();
 8001118:	f7ff fd48 	bl	8000bac <isButton4Pressed>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40010c00 	.word	0x40010c00
 8001124:	40010800 	.word	0x40010800
 8001128:	20000114 	.word	0x20000114
 800112c:	20000118 	.word	0x20000118
 8001130:	2000011c 	.word	0x2000011c
 8001134:	20000120 	.word	0x20000120

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113c:	f000 fca2 	bl	8001a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001140:	f000 f836 	bl	80011b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001144:	f000 f942 	bl	80013cc <MX_GPIO_Init>
  MX_TIM2_Init();
 8001148:	f000 f874 	bl	8001234 <MX_TIM2_Init>
  MX_TIM3_Init();
 800114c:	f000 f8be 	bl	80012cc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001150:	f000 f912 	bl	8001378 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001154:	4811      	ldr	r0, [pc, #68]	; (800119c <main+0x64>)
 8001156:	f001 fcd7 	bl	8002b08 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_Base_Start_IT(&htim3);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uart_Init();
 800115a:	f7ff fc2f 	bl	80009bc <uart_Init>
  status = NORMAL_MODE;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <main+0x68>)
 8001160:	2215      	movs	r2, #21
 8001162:	601a      	str	r2, [r3, #0]
  SCH_Add_Task(timerRun, 0, 10); 	// setflag function
 8001164:	220a      	movs	r2, #10
 8001166:	2100      	movs	r1, #0
 8001168:	480e      	ldr	r0, [pc, #56]	; (80011a4 <main+0x6c>)
 800116a:	f000 f9b9 	bl	80014e0 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 10);	// read button flag function every 10 ms
 800116e:	220a      	movs	r2, #10
 8001170:	2100      	movs	r1, #0
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <main+0x70>)
 8001174:	f000 f9b4 	bl	80014e0 <SCH_Add_Task>
  SCH_Add_Task(PedDurationCount, 0, 1000); // countdown 2 period to turn off ped light
 8001178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800117c:	2100      	movs	r1, #0
 800117e:	480b      	ldr	r0, [pc, #44]	; (80011ac <main+0x74>)
 8001180:	f000 f9ae 	bl	80014e0 <SCH_Add_Task>
  while (1)
  {
	  FSMNormalModeRun();
 8001184:	f7ff f9c6 	bl	8000514 <FSMNormalModeRun>
	  FSMModificationModeRun();
 8001188:	f7ff f8be 	bl	8000308 <FSMModificationModeRun>
	  FSMLightModification();
 800118c:	f7fe ffde 	bl	800014c <FSMLightModification>
	  FSMPedestrianRun();
 8001190:	f7ff fbb2 	bl	80008f8 <FSMPedestrianRun>
	  SCH_Dispatch_Tasks();
 8001194:	f000 fa36 	bl	8001604 <SCH_Dispatch_Tasks>
  {
 8001198:	e7f4      	b.n	8001184 <main+0x4c>
 800119a:	bf00      	nop
 800119c:	20000178 	.word	0x20000178
 80011a0:	20000100 	.word	0x20000100
 80011a4:	08001711 	.word	0x08001711
 80011a8:	08000be9 	.word	0x08000be9
 80011ac:	080008d5 	.word	0x080008d5

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b090      	sub	sp, #64	; 0x40
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	f107 0318 	add.w	r3, r7, #24
 80011ba:	2228      	movs	r2, #40	; 0x28
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 f932 	bl	8004428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d6:	2301      	movs	r3, #1
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011da:	2310      	movs	r3, #16
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011de:	2302      	movs	r3, #2
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011e2:	2300      	movs	r3, #0
 80011e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011e6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ec:	f107 0318 	add.w	r3, r7, #24
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 f82b 	bl	800224c <HAL_RCC_OscConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80011fc:	f000 f96a 	bl	80014d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001200:	230f      	movs	r3, #15
 8001202:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001204:	2302      	movs	r3, #2
 8001206:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800120c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001212:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001216:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2102      	movs	r1, #2
 800121c:	4618      	mov	r0, r3
 800121e:	f001 fa95 	bl	800274c <HAL_RCC_ClockConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001228:	f000 f954 	bl	80014d4 <Error_Handler>
  }
}
 800122c:	bf00      	nop
 800122e:	3740      	adds	r7, #64	; 0x40
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	463b      	mov	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001252:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001256:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_TIM2_Init+0x94>)
 800125a:	223f      	movs	r2, #63	; 0x3f
 800125c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001266:	f240 32e7 	movw	r2, #999	; 0x3e7
 800126a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_TIM2_Init+0x94>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001278:	4813      	ldr	r0, [pc, #76]	; (80012c8 <MX_TIM2_Init+0x94>)
 800127a:	f001 fbf5 	bl	8002a68 <HAL_TIM_Base_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001284:	f000 f926 	bl	80014d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	4619      	mov	r1, r3
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001296:	f001 fe9d 	bl	8002fd4 <HAL_TIM_ConfigClockSource>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012a0:	f000 f918 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_TIM2_Init+0x94>)
 80012b2:	f002 f9f1 	bl	8003698 <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012bc:	f000 f90a 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000178 	.word	0x20000178

080012cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d2:	f107 0320 	add.w	r3, r7, #32
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]
 80012ea:	615a      	str	r2, [r3, #20]
 80012ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <MX_TIM3_Init+0xa4>)
 80012f0:	4a20      	ldr	r2, [pc, #128]	; (8001374 <MX_TIM3_Init+0xa8>)
 80012f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <MX_TIM3_Init+0xa4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_TIM3_Init+0xa4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <MX_TIM3_Init+0xa4>)
 8001302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001306:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_TIM3_Init+0xa4>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_TIM3_Init+0xa4>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001314:	4816      	ldr	r0, [pc, #88]	; (8001370 <MX_TIM3_Init+0xa4>)
 8001316:	f001 fc43 	bl	8002ba0 <HAL_TIM_PWM_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001320:	f000 f8d8 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800132c:	f107 0320 	add.w	r3, r7, #32
 8001330:	4619      	mov	r1, r3
 8001332:	480f      	ldr	r0, [pc, #60]	; (8001370 <MX_TIM3_Init+0xa4>)
 8001334:	f002 f9b0 	bl	8003698 <HAL_TIMEx_MasterConfigSynchronization>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800133e:	f000 f8c9 	bl	80014d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001342:	2360      	movs	r3, #96	; 0x60
 8001344:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2200      	movs	r2, #0
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_TIM3_Init+0xa4>)
 800135a:	f001 fd79 	bl	8002e50 <HAL_TIM_PWM_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001364:	f000 f8b6 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000130 	.word	0x20000130
 8001374:	40000400 	.word	0x40000400

08001378 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <MX_USART2_UART_Init+0x50>)
 8001380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001384:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013b0:	f002 f9dc 	bl	800376c <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ba:	f000 f88b 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200001c0 	.word	0x200001c0
 80013c8:	40004400 	.word	0x40004400

080013cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e0:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <MX_GPIO_Init+0xe8>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a33      	ldr	r2, [pc, #204]	; (80014b4 <MX_GPIO_Init+0xe8>)
 80013e6:	f043 0320 	orr.w	r3, r3, #32
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <MX_GPIO_Init+0xe8>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0320 	and.w	r3, r3, #32
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f8:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <MX_GPIO_Init+0xe8>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a2d      	ldr	r2, [pc, #180]	; (80014b4 <MX_GPIO_Init+0xe8>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <MX_GPIO_Init+0xe8>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <MX_GPIO_Init+0xe8>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a27      	ldr	r2, [pc, #156]	; (80014b4 <MX_GPIO_Init+0xe8>)
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <MX_GPIO_Init+0xe8>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PED_LIGHT1_Pin|LIGHT3_Pin|LIGHT4_Pin|LIGHT5_Pin, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800142e:	4822      	ldr	r0, [pc, #136]	; (80014b8 <MX_GPIO_Init+0xec>)
 8001430:	f000 fedb 	bl	80021ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PED_LIGHT2_Pin|LIGHT2_Pin, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800143a:	4820      	ldr	r0, [pc, #128]	; (80014bc <MX_GPIO_Init+0xf0>)
 800143c:	f000 fed5 	bl	80021ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PED_BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = PED_BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8001440:	2323      	movs	r3, #35	; 0x23
 8001442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001448:	2301      	movs	r3, #1
 800144a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	4619      	mov	r1, r3
 8001452:	481a      	ldr	r0, [pc, #104]	; (80014bc <MX_GPIO_Init+0xf0>)
 8001454:	f000 fd38 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8001458:	2301      	movs	r3, #1
 800145a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001460:	2301      	movs	r3, #1
 8001462:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	4813      	ldr	r0, [pc, #76]	; (80014b8 <MX_GPIO_Init+0xec>)
 800146c:	f000 fd2c 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_LIGHT1_Pin LIGHT3_Pin LIGHT4_Pin LIGHT5_Pin */
  GPIO_InitStruct.Pin = PED_LIGHT1_Pin|LIGHT3_Pin|LIGHT4_Pin|LIGHT5_Pin;
 8001470:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2302      	movs	r3, #2
 8001480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4619      	mov	r1, r3
 8001488:	480b      	ldr	r0, [pc, #44]	; (80014b8 <MX_GPIO_Init+0xec>)
 800148a:	f000 fd1d 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_LIGHT2_Pin LIGHT2_Pin */
  GPIO_InitStruct.Pin = PED_LIGHT2_Pin|LIGHT2_Pin;
 800148e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001494:	2301      	movs	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2302      	movs	r3, #2
 800149e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4619      	mov	r1, r3
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_GPIO_Init+0xf0>)
 80014a8:	f000 fd0e 	bl	8001ec8 <HAL_GPIO_Init>

}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010c00 	.word	0x40010c00
 80014bc:	40010800 	.word	0x40010800

080014c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80014c8:	f000 f874 	bl	80015b4 <SCH_Update>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <SCH_Add_Task>:
{
    struct task *top;
} stack_task;

void SCH_Add_Task(void (*pTask)(), uint16_t delay, uint16_t period)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	803b      	strh	r3, [r7, #0]
    struct task *my_task = (struct task *)malloc(sizeof(struct task));
 80014f0:	200c      	movs	r0, #12
 80014f2:	f002 ff89 	bl	8004408 <malloc>
 80014f6:	4603      	mov	r3, r0
 80014f8:	60fb      	str	r3, [r7, #12]
    my_task->pTask = pTask;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	601a      	str	r2, [r3, #0]
    my_task->counter = delay *FREQ_OF_TIM/1000;
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	4a2a      	ldr	r2, [pc, #168]	; (80015ac <SCH_Add_Task+0xcc>)
 8001504:	fb82 1203 	smull	r1, r2, r2, r3
 8001508:	1092      	asrs	r2, r2, #2
 800150a:	17db      	asrs	r3, r3, #31
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	b29a      	uxth	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	809a      	strh	r2, [r3, #4]
    my_task->period = period;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	883a      	ldrh	r2, [r7, #0]
 8001518:	80da      	strh	r2, [r3, #6]
    my_task->next_task = 0;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
    if (stack_task.top == 0)
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <SCH_Add_Task+0xd0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d103      	bne.n	8001530 <SCH_Add_Task+0x50>
    {
        stack_task.top = my_task;
 8001528:	4a21      	ldr	r2, [pc, #132]	; (80015b0 <SCH_Add_Task+0xd0>)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6013      	str	r3, [r2, #0]
        return;
 800152e:	e039      	b.n	80015a4 <SCH_Add_Task+0xc4>
    }
    struct task *pre = stack_task.top;
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <SCH_Add_Task+0xd0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	617b      	str	r3, [r7, #20]
    struct task *cur = stack_task.top;
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <SCH_Add_Task+0xd0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	613b      	str	r3, [r7, #16]
    while (cur && my_task->counter >= cur->counter)
 800153c:	e00c      	b.n	8001558 <SCH_Add_Task+0x78>
    {
        my_task->counter = my_task->counter - cur->counter;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	889a      	ldrh	r2, [r3, #4]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	889b      	ldrh	r3, [r3, #4]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	b29a      	uxth	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	809a      	strh	r2, [r3, #4]
        pre = cur;
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	617b      	str	r3, [r7, #20]
        cur = cur->next_task;
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	613b      	str	r3, [r7, #16]
    while (cur && my_task->counter >= cur->counter)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d005      	beq.n	800156a <SCH_Add_Task+0x8a>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	889a      	ldrh	r2, [r3, #4]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	889b      	ldrh	r3, [r3, #4]
 8001566:	429a      	cmp	r2, r3
 8001568:	d2e9      	bcs.n	800153e <SCH_Add_Task+0x5e>
    }
    if (pre != cur)
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	429a      	cmp	r2, r3
 8001570:	d006      	beq.n	8001580 <SCH_Add_Task+0xa0>
    {
        pre->next_task = my_task;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	609a      	str	r2, [r3, #8]
        my_task->next_task = cur;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	e005      	b.n	800158c <SCH_Add_Task+0xac>
    }
    else
    {
        my_task->next_task = cur;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	609a      	str	r2, [r3, #8]
        stack_task.top = my_task;
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SCH_Add_Task+0xd0>)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6013      	str	r3, [r2, #0]
    }
    if (cur)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <SCH_Add_Task+0xc2>
        cur->counter -= my_task->counter;
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	889a      	ldrh	r2, [r3, #4]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	889b      	ldrh	r3, [r3, #4]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	b29a      	uxth	r2, r3
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	809a      	strh	r2, [r3, #4]
    return;
 80015a2:	bf00      	nop
}
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	66666667 	.word	0x66666667
 80015b0:	20000208 	.word	0x20000208

080015b4 <SCH_Update>:

void SCH_Update(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
    if (stack_task.top == 0)
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <SCH_Update+0x2c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00b      	beq.n	80015d8 <SCH_Update+0x24>
        return;
    if (stack_task.top->counter > 0)
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <SCH_Update+0x2c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	889b      	ldrh	r3, [r3, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d007      	beq.n	80015da <SCH_Update+0x26>
    {
        stack_task.top->counter--;
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <SCH_Update+0x2c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	889a      	ldrh	r2, [r3, #4]
 80015d0:	3a01      	subs	r2, #1
 80015d2:	b292      	uxth	r2, r2
 80015d4:	809a      	strh	r2, [r3, #4]
 80015d6:	e000      	b.n	80015da <SCH_Update+0x26>
        return;
 80015d8:	bf00      	nop
    }
}
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	20000208 	.word	0x20000208

080015e4 <SCH_Delete_Task>:

void SCH_Delete_Task(struct task *del_task)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
    if (del_task == 0)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <SCH_Delete_Task+0x16>
    {
        return;
    }
    free(del_task);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f002 ff10 	bl	8004418 <free>
 80015f8:	e000      	b.n	80015fc <SCH_Delete_Task+0x18>
        return;
 80015fa:	bf00      	nop
}
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
    if (stack_task.top == 0)
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <SCH_Dispatch_Tasks+0x64>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d024      	beq.n	800165c <SCH_Dispatch_Tasks+0x58>
        return;
    if (stack_task.top->counter == 0)
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <SCH_Dispatch_Tasks+0x64>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	889b      	ldrh	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d121      	bne.n	8001660 <SCH_Dispatch_Tasks+0x5c>
    {
        (*stack_task.top->pTask)();
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <SCH_Dispatch_Tasks+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4798      	blx	r3
        struct task *temp = stack_task.top;
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <SCH_Dispatch_Tasks+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	607b      	str	r3, [r7, #4]
        stack_task.top = stack_task.top->next_task;
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <SCH_Dispatch_Tasks+0x64>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4a0d      	ldr	r2, [pc, #52]	; (8001668 <SCH_Dispatch_Tasks+0x64>)
 8001632:	6013      	str	r3, [r2, #0]
        temp->next_task = 0;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
        if (temp->period != 0)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	88db      	ldrh	r3, [r3, #6]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <SCH_Dispatch_Tasks+0x50>
        {
            SCH_Add_Task(temp->pTask, temp->period, temp->period);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	88d9      	ldrh	r1, [r3, #6]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	88db      	ldrh	r3, [r3, #6]
 800164e:	461a      	mov	r2, r3
 8001650:	f7ff ff46 	bl	80014e0 <SCH_Add_Task>
        }
        SCH_Delete_Task(temp);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ffc5 	bl	80015e4 <SCH_Delete_Task>
        return;
 800165a:	e002      	b.n	8001662 <SCH_Dispatch_Tasks+0x5e>
        return;
 800165c:	bf00      	nop
 800165e:	e000      	b.n	8001662 <SCH_Dispatch_Tasks+0x5e>
    }
    return;
 8001660:	bf00      	nop
}
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000208 	.word	0x20000208

0800166c <setTimer1>:


int timer1_counter = 0;
int timer1_flag = 0;
void setTimer1(int duration) // THIS TIMER ONLY USE FOR SET FLAG TRAFFICLIGHT (already multiple for 100)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	timer1_counter = duration*100;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2264      	movs	r2, #100	; 0x64
 8001678:	fb02 f303 	mul.w	r3, r2, r3
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <setTimer1+0x24>)
 800167e:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <setTimer1+0x28>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	20000104 	.word	0x20000104
 8001694:	20000114 	.word	0x20000114

08001698 <setTimer2>:

int timer2_counter = 0;
int timer2_flag = 0;
void setTimer2(int duration2)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration2;
 80016a0:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <setTimer2+0x20>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <setTimer2+0x24>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000108 	.word	0x20000108
 80016bc:	20000118 	.word	0x20000118

080016c0 <setTimer3>:

int timer3_counter = 0;
int timer3_flag = 0;
void setTimer3(int duration3) // THIS TIMER ONLY USE FOR SET FLAG TRAFFICLIGHT
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	timer3_counter = duration3;
 80016c8:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <setTimer3+0x20>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <setTimer3+0x24>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	2000010c 	.word	0x2000010c
 80016e4:	2000011c 	.word	0x2000011c

080016e8 <setTimer4>:

int timer4_counter = 0;
int timer4_flag = 0;
void setTimer4(int duration4)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	timer4_counter = duration4;
 80016f0:	4a05      	ldr	r2, [pc, #20]	; (8001708 <setTimer4+0x20>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <setTimer4+0x24>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000110 	.word	0x20000110
 800170c:	20000120 	.word	0x20000120

08001710 <timerRun>:


void timerRun()
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 8001714:	4b21      	ldr	r3, [pc, #132]	; (800179c <timerRun+0x8c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	dd0b      	ble.n	8001734 <timerRun+0x24>
	{
		timer1_counter--;
 800171c:	4b1f      	ldr	r3, [pc, #124]	; (800179c <timerRun+0x8c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3b01      	subs	r3, #1
 8001722:	4a1e      	ldr	r2, [pc, #120]	; (800179c <timerRun+0x8c>)
 8001724:	6013      	str	r3, [r2, #0]

		if(timer1_counter <= 0)
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <timerRun+0x8c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	dc02      	bgt.n	8001734 <timerRun+0x24>
		{
			timer1_flag = 1;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <timerRun+0x90>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0)
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <timerRun+0x94>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	dd0b      	ble.n	8001754 <timerRun+0x44>
	{
		timer2_counter--;//counter led 7 segment
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <timerRun+0x94>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	3b01      	subs	r3, #1
 8001742:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <timerRun+0x94>)
 8001744:	6013      	str	r3, [r2, #0]

		if(timer2_counter <= 0) // counter led 7 segment
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <timerRun+0x94>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	dc02      	bgt.n	8001754 <timerRun+0x44>
		{
			timer2_flag = 1;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <timerRun+0x98>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0)
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <timerRun+0x9c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	dd0b      	ble.n	8001774 <timerRun+0x64>
	{
		timer3_counter--;
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <timerRun+0x9c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	3b01      	subs	r3, #1
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <timerRun+0x9c>)
 8001764:	6013      	str	r3, [r2, #0]

		if(timer3_counter <= 0)
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <timerRun+0x9c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	dc02      	bgt.n	8001774 <timerRun+0x64>
		{
			timer3_flag = 1;
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <timerRun+0xa0>)
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0)
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <timerRun+0xa4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	dd0b      	ble.n	8001794 <timerRun+0x84>
	{
		timer4_counter--;
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <timerRun+0xa4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	3b01      	subs	r3, #1
 8001782:	4a0c      	ldr	r2, [pc, #48]	; (80017b4 <timerRun+0xa4>)
 8001784:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0)
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <timerRun+0xa4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	dc02      	bgt.n	8001794 <timerRun+0x84>
		{
			timer4_flag = 1;
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <timerRun+0xa8>)
 8001790:	2201      	movs	r2, #1
 8001792:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	20000104 	.word	0x20000104
 80017a0:	20000114 	.word	0x20000114
 80017a4:	20000108 	.word	0x20000108
 80017a8:	20000118 	.word	0x20000118
 80017ac:	2000010c 	.word	0x2000010c
 80017b0:	2000011c 	.word	0x2000011c
 80017b4:	20000110 	.word	0x20000110
 80017b8:	20000120 	.word	0x20000120

080017bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_MspInit+0x5c>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	4a14      	ldr	r2, [pc, #80]	; (8001818 <HAL_MspInit+0x5c>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6193      	str	r3, [r2, #24]
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_MspInit+0x5c>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <HAL_MspInit+0x5c>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <HAL_MspInit+0x5c>)
 80017e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e4:	61d3      	str	r3, [r2, #28]
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <HAL_MspInit+0x5c>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_MspInit+0x60>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_MspInit+0x60>)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	40021000 	.word	0x40021000
 800181c:	40010000 	.word	0x40010000

08001820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001830:	d113      	bne.n	800185a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_TIM_Base_MspInit+0x44>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <HAL_TIM_Base_MspInit+0x44>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_TIM_Base_MspInit+0x44>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	210a      	movs	r1, #10
 800184e:	201c      	movs	r0, #28
 8001850:	f000 fa51 	bl	8001cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001854:	201c      	movs	r0, #28
 8001856:	f000 fa6a 	bl	8001d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000

08001868 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <HAL_TIM_PWM_MspInit+0x34>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d10b      	bne.n	8001892 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_TIM_PWM_MspInit+0x38>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_TIM_PWM_MspInit+0x38>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_TIM_PWM_MspInit+0x38>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	40000400 	.word	0x40000400
 80018a0:	40021000 	.word	0x40021000

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a1f      	ldr	r2, [pc, #124]	; (800193c <HAL_UART_MspInit+0x98>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d137      	bne.n	8001934 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c4:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <HAL_UART_MspInit+0x9c>)
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	4a1d      	ldr	r2, [pc, #116]	; (8001940 <HAL_UART_MspInit+0x9c>)
 80018ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ce:	61d3      	str	r3, [r2, #28]
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_UART_MspInit+0x9c>)
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_UART_MspInit+0x9c>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a17      	ldr	r2, [pc, #92]	; (8001940 <HAL_UART_MspInit+0x9c>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_UART_MspInit+0x9c>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018f4:	2304      	movs	r3, #4
 80018f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	4619      	mov	r1, r3
 8001906:	480f      	ldr	r0, [pc, #60]	; (8001944 <HAL_UART_MspInit+0xa0>)
 8001908:	f000 fade 	bl	8001ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800190c:	2308      	movs	r3, #8
 800190e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	4619      	mov	r1, r3
 800191e:	4809      	ldr	r0, [pc, #36]	; (8001944 <HAL_UART_MspInit+0xa0>)
 8001920:	f000 fad2 	bl	8001ec8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	2026      	movs	r0, #38	; 0x26
 800192a:	f000 f9e4 	bl	8001cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800192e:	2026      	movs	r0, #38	; 0x26
 8001930:	f000 f9fd 	bl	8001d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001934:	bf00      	nop
 8001936:	3720      	adds	r7, #32
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40004400 	.word	0x40004400
 8001940:	40021000 	.word	0x40021000
 8001944:	40010800 	.word	0x40010800

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800194c:	e7fe      	b.n	800194c <NMI_Handler+0x4>

0800194e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <MemManage_Handler+0x4>

0800195a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195e:	e7fe      	b.n	800195e <BusFault_Handler+0x4>

08001960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <UsageFault_Handler+0x4>

08001966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198e:	f000 f8bf 	bl	8001b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <TIM2_IRQHandler+0x10>)
 800199e:	f001 f94e 	bl	8002c3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000178 	.word	0x20000178

080019ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <USART2_IRQHandler+0x10>)
 80019b2:	f001 ffaf 	bl	8003914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200001c0 	.word	0x200001c0

080019c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <_sbrk+0x5c>)
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <_sbrk+0x60>)
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <_sbrk+0x64>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <_sbrk+0x64>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <_sbrk+0x68>)
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d207      	bcs.n	8001a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f0:	f002 fce0 	bl	80043b4 <__errno>
 80019f4:	4603      	mov	r3, r0
 80019f6:	220c      	movs	r2, #12
 80019f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	e009      	b.n	8001a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <_sbrk+0x64>)
 8001a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a12:	68fb      	ldr	r3, [r7, #12]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20002800 	.word	0x20002800
 8001a20:	00000400 	.word	0x00000400
 8001a24:	20000124 	.word	0x20000124
 8001a28:	20000220 	.word	0x20000220

08001a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <Reset_Handler>:
 8001a38:	f7ff fff8 	bl	8001a2c <SystemInit>
 8001a3c:	480b      	ldr	r0, [pc, #44]	; (8001a6c <LoopFillZerobss+0xe>)
 8001a3e:	490c      	ldr	r1, [pc, #48]	; (8001a70 <LoopFillZerobss+0x12>)
 8001a40:	4a0c      	ldr	r2, [pc, #48]	; (8001a74 <LoopFillZerobss+0x16>)
 8001a42:	2300      	movs	r3, #0
 8001a44:	e002      	b.n	8001a4c <LoopCopyDataInit>

08001a46 <CopyDataInit>:
 8001a46:	58d4      	ldr	r4, [r2, r3]
 8001a48:	50c4      	str	r4, [r0, r3]
 8001a4a:	3304      	adds	r3, #4

08001a4c <LoopCopyDataInit>:
 8001a4c:	18c4      	adds	r4, r0, r3
 8001a4e:	428c      	cmp	r4, r1
 8001a50:	d3f9      	bcc.n	8001a46 <CopyDataInit>
 8001a52:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <LoopFillZerobss+0x1a>)
 8001a54:	4c09      	ldr	r4, [pc, #36]	; (8001a7c <LoopFillZerobss+0x1e>)
 8001a56:	2300      	movs	r3, #0
 8001a58:	e001      	b.n	8001a5e <LoopFillZerobss>

08001a5a <FillZerobss>:
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	3204      	adds	r2, #4

08001a5e <LoopFillZerobss>:
 8001a5e:	42a2      	cmp	r2, r4
 8001a60:	d3fb      	bcc.n	8001a5a <FillZerobss>
 8001a62:	f002 fcad 	bl	80043c0 <__libc_init_array>
 8001a66:	f7ff fb67 	bl	8001138 <main>
 8001a6a:	4770      	bx	lr
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	200000d0 	.word	0x200000d0
 8001a74:	08004d70 	.word	0x08004d70
 8001a78:	200000d0 	.word	0x200000d0
 8001a7c:	20000220 	.word	0x20000220

08001a80 <ADC1_2_IRQHandler>:
 8001a80:	e7fe      	b.n	8001a80 <ADC1_2_IRQHandler>
	...

08001a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_Init+0x28>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x28>)
 8001a8e:	f043 0310 	orr.w	r3, r3, #16
 8001a92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 f923 	bl	8001ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	200f      	movs	r0, #15
 8001a9c:	f000 f808 	bl	8001ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fe8c 	bl	80017bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40022000 	.word	0x40022000

08001ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_InitTick+0x54>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_InitTick+0x58>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f93b 	bl	8001d4a <HAL_SYSTICK_Config>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00e      	b.n	8001afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d80a      	bhi.n	8001afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	f000 f903 	bl	8001cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <HAL_InitTick+0x5c>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000060 	.word	0x20000060
 8001b08:	20000068 	.word	0x20000068
 8001b0c:	20000064 	.word	0x20000064

08001b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_IncTick+0x1c>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_IncTick+0x20>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a03      	ldr	r2, [pc, #12]	; (8001b30 <HAL_IncTick+0x20>)
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	20000068 	.word	0x20000068
 8001b30:	2000020c 	.word	0x2000020c

08001b34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return uwTick;
 8001b38:	4b02      	ldr	r3, [pc, #8]	; (8001b44 <HAL_GetTick+0x10>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	2000020c 	.word	0x2000020c

08001b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b64:	4013      	ands	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7a:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	60d3      	str	r3, [r2, #12]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	f003 0307 	and.w	r3, r3, #7
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	db0b      	blt.n	8001bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	f003 021f 	and.w	r2, r3, #31
 8001bc4:	4906      	ldr	r1, [pc, #24]	; (8001be0 <__NVIC_EnableIRQ+0x34>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	2001      	movs	r0, #1
 8001bce:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	e000e100 	.word	0xe000e100

08001be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	6039      	str	r1, [r7, #0]
 8001bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	db0a      	blt.n	8001c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	490c      	ldr	r1, [pc, #48]	; (8001c30 <__NVIC_SetPriority+0x4c>)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	0112      	lsls	r2, r2, #4
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	440b      	add	r3, r1
 8001c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c0c:	e00a      	b.n	8001c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4908      	ldr	r1, [pc, #32]	; (8001c34 <__NVIC_SetPriority+0x50>)
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	3b04      	subs	r3, #4
 8001c1c:	0112      	lsls	r2, r2, #4
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	440b      	add	r3, r1
 8001c22:	761a      	strb	r2, [r3, #24]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e100 	.word	0xe000e100
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	; 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f1c3 0307 	rsb	r3, r3, #7
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	bf28      	it	cs
 8001c56:	2304      	movcs	r3, #4
 8001c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	2b06      	cmp	r3, #6
 8001c60:	d902      	bls.n	8001c68 <NVIC_EncodePriority+0x30>
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3b03      	subs	r3, #3
 8001c66:	e000      	b.n	8001c6a <NVIC_EncodePriority+0x32>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43da      	mvns	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	43d9      	mvns	r1, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c90:	4313      	orrs	r3, r2
         );
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3724      	adds	r7, #36	; 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cac:	d301      	bcc.n	8001cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00f      	b.n	8001cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <SysTick_Config+0x40>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cba:	210f      	movs	r1, #15
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	f7ff ff90 	bl	8001be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <SysTick_Config+0x40>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cca:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <SysTick_Config+0x40>)
 8001ccc:	2207      	movs	r2, #7
 8001cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	e000e010 	.word	0xe000e010

08001ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff2d 	bl	8001b48 <__NVIC_SetPriorityGrouping>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d08:	f7ff ff42 	bl	8001b90 <__NVIC_GetPriorityGrouping>
 8001d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68b9      	ldr	r1, [r7, #8]
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	f7ff ff90 	bl	8001c38 <NVIC_EncodePriority>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff5f 	bl	8001be4 <__NVIC_SetPriority>
}
 8001d26:	bf00      	nop
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff35 	bl	8001bac <__NVIC_EnableIRQ>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ffa2 	bl	8001c9c <SysTick_Config>
 8001d58:	4603      	mov	r3, r0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b085      	sub	sp, #20
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d008      	beq.n	8001d8c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e020      	b.n	8001dce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 020e 	bic.w	r2, r2, #14
 8001d9a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db4:	2101      	movs	r1, #1
 8001db6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d005      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2204      	movs	r2, #4
 8001df4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
 8001dfa:	e051      	b.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 020e 	bic.w	r2, r2, #14
 8001e0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a22      	ldr	r2, [pc, #136]	; (8001eac <HAL_DMA_Abort_IT+0xd4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d029      	beq.n	8001e7a <HAL_DMA_Abort_IT+0xa2>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <HAL_DMA_Abort_IT+0xd8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d022      	beq.n	8001e76 <HAL_DMA_Abort_IT+0x9e>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <HAL_DMA_Abort_IT+0xdc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d01a      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x98>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1e      	ldr	r2, [pc, #120]	; (8001eb8 <HAL_DMA_Abort_IT+0xe0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d012      	beq.n	8001e6a <HAL_DMA_Abort_IT+0x92>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <HAL_DMA_Abort_IT+0xe4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00a      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x8c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <HAL_DMA_Abort_IT+0xe8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d102      	bne.n	8001e5e <HAL_DMA_Abort_IT+0x86>
 8001e58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e5c:	e00e      	b.n	8001e7c <HAL_DMA_Abort_IT+0xa4>
 8001e5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e62:	e00b      	b.n	8001e7c <HAL_DMA_Abort_IT+0xa4>
 8001e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e68:	e008      	b.n	8001e7c <HAL_DMA_Abort_IT+0xa4>
 8001e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6e:	e005      	b.n	8001e7c <HAL_DMA_Abort_IT+0xa4>
 8001e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e74:	e002      	b.n	8001e7c <HAL_DMA_Abort_IT+0xa4>
 8001e76:	2310      	movs	r3, #16
 8001e78:	e000      	b.n	8001e7c <HAL_DMA_Abort_IT+0xa4>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4a11      	ldr	r2, [pc, #68]	; (8001ec4 <HAL_DMA_Abort_IT+0xec>)
 8001e7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	4798      	blx	r3
    } 
  }
  return status;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40020008 	.word	0x40020008
 8001eb0:	4002001c 	.word	0x4002001c
 8001eb4:	40020030 	.word	0x40020030
 8001eb8:	40020044 	.word	0x40020044
 8001ebc:	40020058 	.word	0x40020058
 8001ec0:	4002006c 	.word	0x4002006c
 8001ec4:	40020000 	.word	0x40020000

08001ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b08b      	sub	sp, #44	; 0x2c
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eda:	e148      	b.n	800216e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001edc:	2201      	movs	r2, #1
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	f040 8137 	bne.w	8002168 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4aa3      	ldr	r2, [pc, #652]	; (800218c <HAL_GPIO_Init+0x2c4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d05e      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f04:	4aa1      	ldr	r2, [pc, #644]	; (800218c <HAL_GPIO_Init+0x2c4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d875      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f0a:	4aa1      	ldr	r2, [pc, #644]	; (8002190 <HAL_GPIO_Init+0x2c8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d058      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f10:	4a9f      	ldr	r2, [pc, #636]	; (8002190 <HAL_GPIO_Init+0x2c8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d86f      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f16:	4a9f      	ldr	r2, [pc, #636]	; (8002194 <HAL_GPIO_Init+0x2cc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d052      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f1c:	4a9d      	ldr	r2, [pc, #628]	; (8002194 <HAL_GPIO_Init+0x2cc>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d869      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f22:	4a9d      	ldr	r2, [pc, #628]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d04c      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f28:	4a9b      	ldr	r2, [pc, #620]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d863      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f2e:	4a9b      	ldr	r2, [pc, #620]	; (800219c <HAL_GPIO_Init+0x2d4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d046      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f34:	4a99      	ldr	r2, [pc, #612]	; (800219c <HAL_GPIO_Init+0x2d4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d85d      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f3a:	2b12      	cmp	r3, #18
 8001f3c:	d82a      	bhi.n	8001f94 <HAL_GPIO_Init+0xcc>
 8001f3e:	2b12      	cmp	r3, #18
 8001f40:	d859      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f42:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <HAL_GPIO_Init+0x80>)
 8001f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f48:	08001fc3 	.word	0x08001fc3
 8001f4c:	08001f9d 	.word	0x08001f9d
 8001f50:	08001faf 	.word	0x08001faf
 8001f54:	08001ff1 	.word	0x08001ff1
 8001f58:	08001ff7 	.word	0x08001ff7
 8001f5c:	08001ff7 	.word	0x08001ff7
 8001f60:	08001ff7 	.word	0x08001ff7
 8001f64:	08001ff7 	.word	0x08001ff7
 8001f68:	08001ff7 	.word	0x08001ff7
 8001f6c:	08001ff7 	.word	0x08001ff7
 8001f70:	08001ff7 	.word	0x08001ff7
 8001f74:	08001ff7 	.word	0x08001ff7
 8001f78:	08001ff7 	.word	0x08001ff7
 8001f7c:	08001ff7 	.word	0x08001ff7
 8001f80:	08001ff7 	.word	0x08001ff7
 8001f84:	08001ff7 	.word	0x08001ff7
 8001f88:	08001ff7 	.word	0x08001ff7
 8001f8c:	08001fa5 	.word	0x08001fa5
 8001f90:	08001fb9 	.word	0x08001fb9
 8001f94:	4a82      	ldr	r2, [pc, #520]	; (80021a0 <HAL_GPIO_Init+0x2d8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f9a:	e02c      	b.n	8001ff6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	623b      	str	r3, [r7, #32]
          break;
 8001fa2:	e029      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	623b      	str	r3, [r7, #32]
          break;
 8001fac:	e024      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	3308      	adds	r3, #8
 8001fb4:	623b      	str	r3, [r7, #32]
          break;
 8001fb6:	e01f      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	330c      	adds	r3, #12
 8001fbe:	623b      	str	r3, [r7, #32]
          break;
 8001fc0:	e01a      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fca:	2304      	movs	r3, #4
 8001fcc:	623b      	str	r3, [r7, #32]
          break;
 8001fce:	e013      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d105      	bne.n	8001fe4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd8:	2308      	movs	r3, #8
 8001fda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	611a      	str	r2, [r3, #16]
          break;
 8001fe2:	e009      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	615a      	str	r2, [r3, #20]
          break;
 8001fee:	e003      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	623b      	str	r3, [r7, #32]
          break;
 8001ff4:	e000      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          break;
 8001ff6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	2bff      	cmp	r3, #255	; 0xff
 8001ffc:	d801      	bhi.n	8002002 <HAL_GPIO_Init+0x13a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	e001      	b.n	8002006 <HAL_GPIO_Init+0x13e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3304      	adds	r3, #4
 8002006:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2bff      	cmp	r3, #255	; 0xff
 800200c:	d802      	bhi.n	8002014 <HAL_GPIO_Init+0x14c>
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	e002      	b.n	800201a <HAL_GPIO_Init+0x152>
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	3b08      	subs	r3, #8
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	210f      	movs	r1, #15
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	401a      	ands	r2, r3
 800202c:	6a39      	ldr	r1, [r7, #32]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	431a      	orrs	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 8090 	beq.w	8002168 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002048:	4b56      	ldr	r3, [pc, #344]	; (80021a4 <HAL_GPIO_Init+0x2dc>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4a55      	ldr	r2, [pc, #340]	; (80021a4 <HAL_GPIO_Init+0x2dc>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6193      	str	r3, [r2, #24]
 8002054:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HAL_GPIO_Init+0x2dc>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002060:	4a51      	ldr	r2, [pc, #324]	; (80021a8 <HAL_GPIO_Init+0x2e0>)
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	220f      	movs	r2, #15
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4013      	ands	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a49      	ldr	r2, [pc, #292]	; (80021ac <HAL_GPIO_Init+0x2e4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00d      	beq.n	80020a8 <HAL_GPIO_Init+0x1e0>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a48      	ldr	r2, [pc, #288]	; (80021b0 <HAL_GPIO_Init+0x2e8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <HAL_GPIO_Init+0x1dc>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a47      	ldr	r2, [pc, #284]	; (80021b4 <HAL_GPIO_Init+0x2ec>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_GPIO_Init+0x1d8>
 800209c:	2302      	movs	r3, #2
 800209e:	e004      	b.n	80020aa <HAL_GPIO_Init+0x1e2>
 80020a0:	2303      	movs	r3, #3
 80020a2:	e002      	b.n	80020aa <HAL_GPIO_Init+0x1e2>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_GPIO_Init+0x1e2>
 80020a8:	2300      	movs	r3, #0
 80020aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ac:	f002 0203 	and.w	r2, r2, #3
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	4093      	lsls	r3, r2
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020ba:	493b      	ldr	r1, [pc, #236]	; (80021a8 <HAL_GPIO_Init+0x2e0>)
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3302      	adds	r3, #2
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020d4:	4b38      	ldr	r3, [pc, #224]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	4937      	ldr	r1, [pc, #220]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020e2:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	4933      	ldr	r1, [pc, #204]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020fc:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	492d      	ldr	r1, [pc, #180]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	60cb      	str	r3, [r1, #12]
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800210a:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	43db      	mvns	r3, r3
 8002112:	4929      	ldr	r1, [pc, #164]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 8002114:	4013      	ands	r3, r2
 8002116:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002124:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4923      	ldr	r1, [pc, #140]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
 8002130:	e006      	b.n	8002140 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002132:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	43db      	mvns	r3, r3
 800213a:	491f      	ldr	r1, [pc, #124]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 800213c:	4013      	ands	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d006      	beq.n	800215a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4919      	ldr	r1, [pc, #100]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]
 8002158:	e006      	b.n	8002168 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800215a:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	43db      	mvns	r3, r3
 8002162:	4915      	ldr	r1, [pc, #84]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 8002164:	4013      	ands	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	3301      	adds	r3, #1
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	f47f aeaf 	bne.w	8001edc <HAL_GPIO_Init+0x14>
  }
}
 800217e:	bf00      	nop
 8002180:	bf00      	nop
 8002182:	372c      	adds	r7, #44	; 0x2c
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	10320000 	.word	0x10320000
 8002190:	10310000 	.word	0x10310000
 8002194:	10220000 	.word	0x10220000
 8002198:	10210000 	.word	0x10210000
 800219c:	10120000 	.word	0x10120000
 80021a0:	10110000 	.word	0x10110000
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40010000 	.word	0x40010000
 80021ac:	40010800 	.word	0x40010800
 80021b0:	40010c00 	.word	0x40010c00
 80021b4:	40011000 	.word	0x40011000
 80021b8:	40010400 	.word	0x40010400

080021bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	887b      	ldrh	r3, [r7, #2]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	e001      	b.n	80021de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	807b      	strh	r3, [r7, #2]
 80021f6:	4613      	mov	r3, r2
 80021f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021fa:	787b      	ldrb	r3, [r7, #1]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002200:	887a      	ldrh	r2, [r7, #2]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002206:	e003      	b.n	8002210 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002208:	887b      	ldrh	r3, [r7, #2]
 800220a:	041a      	lsls	r2, r3, #16
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	611a      	str	r2, [r3, #16]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr

0800221a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800222c:	887a      	ldrh	r2, [r7, #2]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4013      	ands	r3, r2
 8002232:	041a      	lsls	r2, r3, #16
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43d9      	mvns	r1, r3
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	400b      	ands	r3, r1
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	611a      	str	r2, [r3, #16]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e26c      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8087 	beq.w	800237a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800226c:	4b92      	ldr	r3, [pc, #584]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b04      	cmp	r3, #4
 8002276:	d00c      	beq.n	8002292 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002278:	4b8f      	ldr	r3, [pc, #572]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b08      	cmp	r3, #8
 8002282:	d112      	bne.n	80022aa <HAL_RCC_OscConfig+0x5e>
 8002284:	4b8c      	ldr	r3, [pc, #560]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002290:	d10b      	bne.n	80022aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002292:	4b89      	ldr	r3, [pc, #548]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d06c      	beq.n	8002378 <HAL_RCC_OscConfig+0x12c>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d168      	bne.n	8002378 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e246      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x76>
 80022b4:	4b80      	ldr	r3, [pc, #512]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a7f      	ldr	r2, [pc, #508]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	e02e      	b.n	8002320 <HAL_RCC_OscConfig+0xd4>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x98>
 80022ca:	4b7b      	ldr	r3, [pc, #492]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7a      	ldr	r2, [pc, #488]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b78      	ldr	r3, [pc, #480]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a77      	ldr	r2, [pc, #476]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e01d      	b.n	8002320 <HAL_RCC_OscConfig+0xd4>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0xbc>
 80022ee:	4b72      	ldr	r3, [pc, #456]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a71      	ldr	r2, [pc, #452]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b6f      	ldr	r3, [pc, #444]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a6e      	ldr	r2, [pc, #440]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e00b      	b.n	8002320 <HAL_RCC_OscConfig+0xd4>
 8002308:	4b6b      	ldr	r3, [pc, #428]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a6a      	ldr	r2, [pc, #424]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800230e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b68      	ldr	r3, [pc, #416]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a67      	ldr	r2, [pc, #412]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800231a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d013      	beq.n	8002350 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7ff fc04 	bl	8001b34 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002330:	f7ff fc00 	bl	8001b34 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e1fa      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	4b5d      	ldr	r3, [pc, #372]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0xe4>
 800234e:	e014      	b.n	800237a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7ff fbf0 	bl	8001b34 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7ff fbec 	bl	8001b34 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e1e6      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236a:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x10c>
 8002376:	e000      	b.n	800237a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d063      	beq.n	800244e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002386:	4b4c      	ldr	r3, [pc, #304]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00b      	beq.n	80023aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002392:	4b49      	ldr	r3, [pc, #292]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b08      	cmp	r3, #8
 800239c:	d11c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x18c>
 800239e:	4b46      	ldr	r3, [pc, #280]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d116      	bne.n	80023d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023aa:	4b43      	ldr	r3, [pc, #268]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_RCC_OscConfig+0x176>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d001      	beq.n	80023c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e1ba      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c2:	4b3d      	ldr	r3, [pc, #244]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4939      	ldr	r1, [pc, #228]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d6:	e03a      	b.n	800244e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d020      	beq.n	8002422 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e0:	4b36      	ldr	r3, [pc, #216]	; (80024bc <HAL_RCC_OscConfig+0x270>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7ff fba5 	bl	8001b34 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ee:	f7ff fba1 	bl	8001b34 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e19b      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002400:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240c:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4927      	ldr	r1, [pc, #156]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800241c:	4313      	orrs	r3, r2
 800241e:	600b      	str	r3, [r1, #0]
 8002420:	e015      	b.n	800244e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002422:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_RCC_OscConfig+0x270>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7ff fb84 	bl	8001b34 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002430:	f7ff fb80 	bl	8001b34 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e17a      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d03a      	beq.n	80024d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d019      	beq.n	8002496 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <HAL_RCC_OscConfig+0x274>)
 8002464:	2201      	movs	r2, #1
 8002466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002468:	f7ff fb64 	bl	8001b34 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002470:	f7ff fb60 	bl	8001b34 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e15a      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800248e:	2001      	movs	r0, #1
 8002490:	f000 facc 	bl	8002a2c <RCC_Delay>
 8002494:	e01c      	b.n	80024d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_RCC_OscConfig+0x274>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249c:	f7ff fb4a 	bl	8001b34 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a2:	e00f      	b.n	80024c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a4:	f7ff fb46 	bl	8001b34 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d908      	bls.n	80024c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e140      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	42420000 	.word	0x42420000
 80024c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c4:	4b9e      	ldr	r3, [pc, #632]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1e9      	bne.n	80024a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80a6 	beq.w	800262a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e2:	4b97      	ldr	r3, [pc, #604]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10d      	bne.n	800250a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	4b94      	ldr	r3, [pc, #592]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	4a93      	ldr	r2, [pc, #588]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f8:	61d3      	str	r3, [r2, #28]
 80024fa:	4b91      	ldr	r3, [pc, #580]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002506:	2301      	movs	r3, #1
 8002508:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250a:	4b8e      	ldr	r3, [pc, #568]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d118      	bne.n	8002548 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002516:	4b8b      	ldr	r3, [pc, #556]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a8a      	ldr	r2, [pc, #552]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 800251c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002522:	f7ff fb07 	bl	8001b34 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252a:	f7ff fb03 	bl	8001b34 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b64      	cmp	r3, #100	; 0x64
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0fd      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253c:	4b81      	ldr	r3, [pc, #516]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x312>
 8002550:	4b7b      	ldr	r3, [pc, #492]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4a7a      	ldr	r2, [pc, #488]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6213      	str	r3, [r2, #32]
 800255c:	e02d      	b.n	80025ba <HAL_RCC_OscConfig+0x36e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0x334>
 8002566:	4b76      	ldr	r3, [pc, #472]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4a75      	ldr	r2, [pc, #468]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6213      	str	r3, [r2, #32]
 8002572:	4b73      	ldr	r3, [pc, #460]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a72      	ldr	r2, [pc, #456]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6213      	str	r3, [r2, #32]
 800257e:	e01c      	b.n	80025ba <HAL_RCC_OscConfig+0x36e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b05      	cmp	r3, #5
 8002586:	d10c      	bne.n	80025a2 <HAL_RCC_OscConfig+0x356>
 8002588:	4b6d      	ldr	r3, [pc, #436]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4a6c      	ldr	r2, [pc, #432]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800258e:	f043 0304 	orr.w	r3, r3, #4
 8002592:	6213      	str	r3, [r2, #32]
 8002594:	4b6a      	ldr	r3, [pc, #424]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4a69      	ldr	r2, [pc, #420]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6213      	str	r3, [r2, #32]
 80025a0:	e00b      	b.n	80025ba <HAL_RCC_OscConfig+0x36e>
 80025a2:	4b67      	ldr	r3, [pc, #412]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4a66      	ldr	r2, [pc, #408]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6213      	str	r3, [r2, #32]
 80025ae:	4b64      	ldr	r3, [pc, #400]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4a63      	ldr	r2, [pc, #396]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	f023 0304 	bic.w	r3, r3, #4
 80025b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d015      	beq.n	80025ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c2:	f7ff fab7 	bl	8001b34 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7ff fab3 	bl	8001b34 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e0ab      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e0:	4b57      	ldr	r3, [pc, #348]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0ee      	beq.n	80025ca <HAL_RCC_OscConfig+0x37e>
 80025ec:	e014      	b.n	8002618 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7ff faa1 	bl	8001b34 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7ff fa9d 	bl	8001b34 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	; 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e095      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260c:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1ee      	bne.n	80025f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002618:	7dfb      	ldrb	r3, [r7, #23]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d105      	bne.n	800262a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261e:	4b48      	ldr	r3, [pc, #288]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4a47      	ldr	r2, [pc, #284]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002628:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8081 	beq.w	8002736 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002634:	4b42      	ldr	r3, [pc, #264]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b08      	cmp	r3, #8
 800263e:	d061      	beq.n	8002704 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d146      	bne.n	80026d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002648:	4b3f      	ldr	r3, [pc, #252]	; (8002748 <HAL_RCC_OscConfig+0x4fc>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264e:	f7ff fa71 	bl	8001b34 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002656:	f7ff fa6d 	bl	8001b34 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e067      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002668:	4b35      	ldr	r3, [pc, #212]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267c:	d108      	bne.n	8002690 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800267e:	4b30      	ldr	r3, [pc, #192]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	492d      	ldr	r1, [pc, #180]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a19      	ldr	r1, [r3, #32]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	430b      	orrs	r3, r1
 80026a2:	4927      	ldr	r1, [pc, #156]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a8:	4b27      	ldr	r3, [pc, #156]	; (8002748 <HAL_RCC_OscConfig+0x4fc>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7ff fa41 	bl	8001b34 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b6:	f7ff fa3d 	bl	8001b34 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e037      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x46a>
 80026d4:	e02f      	b.n	8002736 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d6:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <HAL_RCC_OscConfig+0x4fc>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7ff fa2a 	bl	8001b34 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e4:	f7ff fa26 	bl	8001b34 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e020      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x498>
 8002702:	e018      	b.n	8002736 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e013      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	429a      	cmp	r2, r3
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	40007000 	.word	0x40007000
 8002748:	42420060 	.word	0x42420060

0800274c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0d0      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002760:	4b6a      	ldr	r3, [pc, #424]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d910      	bls.n	8002790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b67      	ldr	r3, [pc, #412]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 0207 	bic.w	r2, r3, #7
 8002776:	4965      	ldr	r1, [pc, #404]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b63      	ldr	r3, [pc, #396]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0b8      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a8:	4b59      	ldr	r3, [pc, #356]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a58      	ldr	r2, [pc, #352]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c0:	4b53      	ldr	r3, [pc, #332]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a52      	ldr	r2, [pc, #328]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027cc:	4b50      	ldr	r3, [pc, #320]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	494d      	ldr	r1, [pc, #308]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d040      	beq.n	800286c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d115      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e07f      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280a:	4b41      	ldr	r3, [pc, #260]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e073      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281a:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e06b      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282a:	4b39      	ldr	r3, [pc, #228]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f023 0203 	bic.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4936      	ldr	r1, [pc, #216]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800283c:	f7ff f97a 	bl	8001b34 <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	e00a      	b.n	800285a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002844:	f7ff f976 	bl	8001b34 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e053      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	4b2d      	ldr	r3, [pc, #180]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 020c 	and.w	r2, r3, #12
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	429a      	cmp	r2, r3
 800286a:	d1eb      	bne.n	8002844 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d210      	bcs.n	800289c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 0207 	bic.w	r2, r3, #7
 8002882:	4922      	ldr	r1, [pc, #136]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b20      	ldr	r3, [pc, #128]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e032      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a8:	4b19      	ldr	r3, [pc, #100]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4916      	ldr	r1, [pc, #88]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	490e      	ldr	r1, [pc, #56]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028da:	f000 f821 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80028de:	4602      	mov	r2, r0
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	490a      	ldr	r1, [pc, #40]	; (8002914 <HAL_RCC_ClockConfig+0x1c8>)
 80028ec:	5ccb      	ldrb	r3, [r1, r3]
 80028ee:	fa22 f303 	lsr.w	r3, r2, r3
 80028f2:	4a09      	ldr	r2, [pc, #36]	; (8002918 <HAL_RCC_ClockConfig+0x1cc>)
 80028f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_RCC_ClockConfig+0x1d0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff f8d8 	bl	8001ab0 <HAL_InitTick>

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40022000 	.word	0x40022000
 8002910:	40021000 	.word	0x40021000
 8002914:	08004d08 	.word	0x08004d08
 8002918:	20000060 	.word	0x20000060
 800291c:	20000064 	.word	0x20000064

08002920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800293a:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b04      	cmp	r3, #4
 8002948:	d002      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x30>
 800294a:	2b08      	cmp	r3, #8
 800294c:	d003      	beq.n	8002956 <HAL_RCC_GetSysClockFreq+0x36>
 800294e:	e027      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002952:	613b      	str	r3, [r7, #16]
      break;
 8002954:	e027      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	0c9b      	lsrs	r3, r3, #18
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	4a17      	ldr	r2, [pc, #92]	; (80029bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002960:	5cd3      	ldrb	r3, [r2, r3]
 8002962:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d010      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	0c5b      	lsrs	r3, r3, #17
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	4a11      	ldr	r2, [pc, #68]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800297a:	5cd3      	ldrb	r3, [r2, r3]
 800297c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a0d      	ldr	r2, [pc, #52]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002982:	fb02 f203 	mul.w	r2, r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	e004      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a0c      	ldr	r2, [pc, #48]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002994:	fb02 f303 	mul.w	r3, r2, r3
 8002998:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	613b      	str	r3, [r7, #16]
      break;
 800299e:	e002      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80029a2:	613b      	str	r3, [r7, #16]
      break;
 80029a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029a6:	693b      	ldr	r3, [r7, #16]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	007a1200 	.word	0x007a1200
 80029bc:	08004d20 	.word	0x08004d20
 80029c0:	08004d30 	.word	0x08004d30
 80029c4:	003d0900 	.word	0x003d0900

080029c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029cc:	4b02      	ldr	r3, [pc, #8]	; (80029d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	20000060 	.word	0x20000060

080029dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029e0:	f7ff fff2 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80029e4:	4602      	mov	r2, r0
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	4903      	ldr	r1, [pc, #12]	; (8002a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f2:	5ccb      	ldrb	r3, [r1, r3]
 80029f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000
 8002a00:	08004d18 	.word	0x08004d18

08002a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a08:	f7ff ffde 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	0adb      	lsrs	r3, r3, #11
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	4903      	ldr	r1, [pc, #12]	; (8002a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a1a:	5ccb      	ldrb	r3, [r1, r3]
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	08004d18 	.word	0x08004d18

08002a2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a34:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <RCC_Delay+0x34>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <RCC_Delay+0x38>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0a5b      	lsrs	r3, r3, #9
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a48:	bf00      	nop
  }
  while (Delay --);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1e5a      	subs	r2, r3, #1
 8002a4e:	60fa      	str	r2, [r7, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f9      	bne.n	8002a48 <RCC_Delay+0x1c>
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	20000060 	.word	0x20000060
 8002a64:	10624dd3 	.word	0x10624dd3

08002a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e041      	b.n	8002afe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe fec6 	bl	8001820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f000 fb80 	bl	80031ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d001      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e035      	b.n	8002b8c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <HAL_TIM_Base_Start_IT+0x90>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d009      	beq.n	8002b56 <HAL_TIM_Base_Start_IT+0x4e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4a:	d004      	beq.n	8002b56 <HAL_TIM_Base_Start_IT+0x4e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <HAL_TIM_Base_Start_IT+0x94>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d111      	bne.n	8002b7a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b06      	cmp	r3, #6
 8002b66:	d010      	beq.n	8002b8a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b78:	e007      	b.n	8002b8a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0201 	orr.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40012c00 	.word	0x40012c00
 8002b9c:	40000400 	.word	0x40000400

08002ba0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e041      	b.n	8002c36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe fe4e 	bl	8001868 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4610      	mov	r0, r2
 8002be0:	f000 fae4 	bl	80031ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d122      	bne.n	8002c9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d11b      	bne.n	8002c9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f06f 0202 	mvn.w	r2, #2
 8002c6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fa77 	bl	8003174 <HAL_TIM_IC_CaptureCallback>
 8002c86:	e005      	b.n	8002c94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fa6a 	bl	8003162 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fa79 	bl	8003186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d122      	bne.n	8002cee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d11b      	bne.n	8002cee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f06f 0204 	mvn.w	r2, #4
 8002cbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fa4d 	bl	8003174 <HAL_TIM_IC_CaptureCallback>
 8002cda:	e005      	b.n	8002ce8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fa40 	bl	8003162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fa4f 	bl	8003186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d122      	bne.n	8002d42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d11b      	bne.n	8002d42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f06f 0208 	mvn.w	r2, #8
 8002d12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2204      	movs	r2, #4
 8002d18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fa23 	bl	8003174 <HAL_TIM_IC_CaptureCallback>
 8002d2e:	e005      	b.n	8002d3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fa16 	bl	8003162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fa25 	bl	8003186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d122      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d11b      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f06f 0210 	mvn.w	r2, #16
 8002d66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f9f9 	bl	8003174 <HAL_TIM_IC_CaptureCallback>
 8002d82:	e005      	b.n	8002d90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f9ec 	bl	8003162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f9fb 	bl	8003186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d10e      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d107      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f06f 0201 	mvn.w	r2, #1
 8002dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7fe fb7f 	bl	80014c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	d10e      	bne.n	8002dee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dda:	2b80      	cmp	r3, #128	; 0x80
 8002ddc:	d107      	bne.n	8002dee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fcb6 	bl	800375a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d10e      	bne.n	8002e1a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e06:	2b40      	cmp	r3, #64	; 0x40
 8002e08:	d107      	bne.n	8002e1a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f9bf 	bl	8003198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d10e      	bne.n	8002e46 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	d107      	bne.n	8002e46 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f06f 0220 	mvn.w	r2, #32
 8002e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fc81 	bl	8003748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e0ae      	b.n	8002fcc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b0c      	cmp	r3, #12
 8002e7a:	f200 809f 	bhi.w	8002fbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e7e:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e84:	08002eb9 	.word	0x08002eb9
 8002e88:	08002fbd 	.word	0x08002fbd
 8002e8c:	08002fbd 	.word	0x08002fbd
 8002e90:	08002fbd 	.word	0x08002fbd
 8002e94:	08002ef9 	.word	0x08002ef9
 8002e98:	08002fbd 	.word	0x08002fbd
 8002e9c:	08002fbd 	.word	0x08002fbd
 8002ea0:	08002fbd 	.word	0x08002fbd
 8002ea4:	08002f3b 	.word	0x08002f3b
 8002ea8:	08002fbd 	.word	0x08002fbd
 8002eac:	08002fbd 	.word	0x08002fbd
 8002eb0:	08002fbd 	.word	0x08002fbd
 8002eb4:	08002f7b 	.word	0x08002f7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 f9cc 	bl	800325c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0208 	orr.w	r2, r2, #8
 8002ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0204 	bic.w	r2, r2, #4
 8002ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6999      	ldr	r1, [r3, #24]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	619a      	str	r2, [r3, #24]
      break;
 8002ef6:	e064      	b.n	8002fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fa12 	bl	8003328 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6999      	ldr	r1, [r3, #24]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	021a      	lsls	r2, r3, #8
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	619a      	str	r2, [r3, #24]
      break;
 8002f38:	e043      	b.n	8002fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68b9      	ldr	r1, [r7, #8]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 fa5b 	bl	80033fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69da      	ldr	r2, [r3, #28]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0208 	orr.w	r2, r2, #8
 8002f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0204 	bic.w	r2, r2, #4
 8002f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69d9      	ldr	r1, [r3, #28]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	61da      	str	r2, [r3, #28]
      break;
 8002f78:	e023      	b.n	8002fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68b9      	ldr	r1, [r7, #8]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 faa5 	bl	80034d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69da      	ldr	r2, [r3, #28]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69d9      	ldr	r1, [r3, #28]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	021a      	lsls	r2, r3, #8
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	61da      	str	r2, [r3, #28]
      break;
 8002fba:	e002      	b.n	8002fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <HAL_TIM_ConfigClockSource+0x1c>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e0b4      	b.n	800315a <HAL_TIM_ConfigClockSource+0x186>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800300e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003016:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003028:	d03e      	beq.n	80030a8 <HAL_TIM_ConfigClockSource+0xd4>
 800302a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302e:	f200 8087 	bhi.w	8003140 <HAL_TIM_ConfigClockSource+0x16c>
 8003032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003036:	f000 8086 	beq.w	8003146 <HAL_TIM_ConfigClockSource+0x172>
 800303a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303e:	d87f      	bhi.n	8003140 <HAL_TIM_ConfigClockSource+0x16c>
 8003040:	2b70      	cmp	r3, #112	; 0x70
 8003042:	d01a      	beq.n	800307a <HAL_TIM_ConfigClockSource+0xa6>
 8003044:	2b70      	cmp	r3, #112	; 0x70
 8003046:	d87b      	bhi.n	8003140 <HAL_TIM_ConfigClockSource+0x16c>
 8003048:	2b60      	cmp	r3, #96	; 0x60
 800304a:	d050      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x11a>
 800304c:	2b60      	cmp	r3, #96	; 0x60
 800304e:	d877      	bhi.n	8003140 <HAL_TIM_ConfigClockSource+0x16c>
 8003050:	2b50      	cmp	r3, #80	; 0x50
 8003052:	d03c      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0xfa>
 8003054:	2b50      	cmp	r3, #80	; 0x50
 8003056:	d873      	bhi.n	8003140 <HAL_TIM_ConfigClockSource+0x16c>
 8003058:	2b40      	cmp	r3, #64	; 0x40
 800305a:	d058      	beq.n	800310e <HAL_TIM_ConfigClockSource+0x13a>
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	d86f      	bhi.n	8003140 <HAL_TIM_ConfigClockSource+0x16c>
 8003060:	2b30      	cmp	r3, #48	; 0x30
 8003062:	d064      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x15a>
 8003064:	2b30      	cmp	r3, #48	; 0x30
 8003066:	d86b      	bhi.n	8003140 <HAL_TIM_ConfigClockSource+0x16c>
 8003068:	2b20      	cmp	r3, #32
 800306a:	d060      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x15a>
 800306c:	2b20      	cmp	r3, #32
 800306e:	d867      	bhi.n	8003140 <HAL_TIM_ConfigClockSource+0x16c>
 8003070:	2b00      	cmp	r3, #0
 8003072:	d05c      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x15a>
 8003074:	2b10      	cmp	r3, #16
 8003076:	d05a      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x15a>
 8003078:	e062      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	6899      	ldr	r1, [r3, #8]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f000 fae6 	bl	800365a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800309c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	609a      	str	r2, [r3, #8]
      break;
 80030a6:	e04f      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	6899      	ldr	r1, [r3, #8]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f000 facf 	bl	800365a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ca:	609a      	str	r2, [r3, #8]
      break;
 80030cc:	e03c      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6859      	ldr	r1, [r3, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	461a      	mov	r2, r3
 80030dc:	f000 fa46 	bl	800356c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2150      	movs	r1, #80	; 0x50
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fa9d 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 80030ec:	e02c      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6859      	ldr	r1, [r3, #4]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f000 fa64 	bl	80035c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2160      	movs	r1, #96	; 0x60
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fa8d 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 800310c:	e01c      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	6859      	ldr	r1, [r3, #4]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	461a      	mov	r2, r3
 800311c:	f000 fa26 	bl	800356c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2140      	movs	r1, #64	; 0x40
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fa7d 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 800312c:	e00c      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4619      	mov	r1, r3
 8003138:	4610      	mov	r0, r2
 800313a:	f000 fa74 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 800313e:	e003      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
      break;
 8003144:	e000      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003158:	7bfb      	ldrb	r3, [r7, #15]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr
	...

080031ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a25      	ldr	r2, [pc, #148]	; (8003254 <TIM_Base_SetConfig+0xa8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d007      	beq.n	80031d4 <TIM_Base_SetConfig+0x28>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ca:	d003      	beq.n	80031d4 <TIM_Base_SetConfig+0x28>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a22      	ldr	r2, [pc, #136]	; (8003258 <TIM_Base_SetConfig+0xac>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d108      	bne.n	80031e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a1a      	ldr	r2, [pc, #104]	; (8003254 <TIM_Base_SetConfig+0xa8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <TIM_Base_SetConfig+0x52>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f4:	d003      	beq.n	80031fe <TIM_Base_SetConfig+0x52>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a17      	ldr	r2, [pc, #92]	; (8003258 <TIM_Base_SetConfig+0xac>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d108      	bne.n	8003210 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a07      	ldr	r2, [pc, #28]	; (8003254 <TIM_Base_SetConfig+0xa8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d103      	bne.n	8003244 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	615a      	str	r2, [r3, #20]
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40000400 	.word	0x40000400

0800325c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f023 0201 	bic.w	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0303 	bic.w	r3, r3, #3
 8003292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f023 0302 	bic.w	r3, r3, #2
 80032a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <TIM_OC1_SetConfig+0xc8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d10c      	bne.n	80032d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f023 0308 	bic.w	r3, r3, #8
 80032be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f023 0304 	bic.w	r3, r3, #4
 80032d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a13      	ldr	r2, [pc, #76]	; (8003324 <TIM_OC1_SetConfig+0xc8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d111      	bne.n	80032fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	621a      	str	r2, [r3, #32]
}
 8003318:	bf00      	nop
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40012c00 	.word	0x40012c00

08003328 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f023 0210 	bic.w	r2, r3, #16
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800335e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f023 0320 	bic.w	r3, r3, #32
 8003372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a1d      	ldr	r2, [pc, #116]	; (80033f8 <TIM_OC2_SetConfig+0xd0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d10d      	bne.n	80033a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800338e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <TIM_OC2_SetConfig+0xd0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d113      	bne.n	80033d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	621a      	str	r2, [r3, #32]
}
 80033ee:	bf00      	nop
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	40012c00 	.word	0x40012c00

080033fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 0303 	bic.w	r3, r3, #3
 8003432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4313      	orrs	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	021b      	lsls	r3, r3, #8
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a1d      	ldr	r2, [pc, #116]	; (80034cc <TIM_OC3_SetConfig+0xd0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d10d      	bne.n	8003476 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a14      	ldr	r2, [pc, #80]	; (80034cc <TIM_OC3_SetConfig+0xd0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d113      	bne.n	80034a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800348c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	621a      	str	r2, [r3, #32]
}
 80034c0:	bf00      	nop
 80034c2:	371c      	adds	r7, #28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40012c00 	.word	0x40012c00

080034d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800351a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	031b      	lsls	r3, r3, #12
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a0f      	ldr	r2, [pc, #60]	; (8003568 <TIM_OC4_SetConfig+0x98>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d109      	bne.n	8003544 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003536:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	019b      	lsls	r3, r3, #6
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4313      	orrs	r3, r2
 8003542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	621a      	str	r2, [r3, #32]
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr
 8003568:	40012c00 	.word	0x40012c00

0800356c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	f023 0201 	bic.w	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f023 030a 	bic.w	r3, r3, #10
 80035a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f023 0210 	bic.w	r2, r3, #16
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	031b      	lsls	r3, r3, #12
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003604:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	621a      	str	r2, [r3, #32]
}
 800361c:	bf00      	nop
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr

08003626 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003626:	b480      	push	{r7}
 8003628:	b085      	sub	sp, #20
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	f043 0307 	orr.w	r3, r3, #7
 8003648:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800365a:	b480      	push	{r7}
 800365c:	b087      	sub	sp, #28
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003674:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	021a      	lsls	r2, r3, #8
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	431a      	orrs	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4313      	orrs	r3, r2
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	609a      	str	r2, [r3, #8]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr

08003698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e041      	b.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a14      	ldr	r2, [pc, #80]	; (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d009      	beq.n	8003708 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fc:	d004      	beq.n	8003708 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a10      	ldr	r2, [pc, #64]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d10c      	bne.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800370e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	4313      	orrs	r3, r2
 8003718:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40012c00 	.word	0x40012c00
 8003744:	40000400 	.word	0x40000400

08003748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e042      	b.n	8003804 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fe f886 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2224      	movs	r2, #36	; 0x24
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fd71 	bl	8004298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695a      	ldr	r2, [r3, #20]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	; 0x28
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b20      	cmp	r3, #32
 800382a:	d16d      	bne.n	8003908 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_UART_Transmit+0x2c>
 8003832:	88fb      	ldrh	r3, [r7, #6]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e066      	b.n	800390a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2221      	movs	r2, #33	; 0x21
 8003846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800384a:	f7fe f973 	bl	8001b34 <HAL_GetTick>
 800384e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	88fa      	ldrh	r2, [r7, #6]
 8003854:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	88fa      	ldrh	r2, [r7, #6]
 800385a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003864:	d108      	bne.n	8003878 <HAL_UART_Transmit+0x6c>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	e003      	b.n	8003880 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800387c:	2300      	movs	r3, #0
 800387e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003880:	e02a      	b.n	80038d8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2200      	movs	r2, #0
 800388a:	2180      	movs	r1, #128	; 0x80
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 faf9 	bl	8003e84 <UART_WaitOnFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e036      	b.n	800390a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10b      	bne.n	80038ba <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	3302      	adds	r3, #2
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	e007      	b.n	80038ca <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	781a      	ldrb	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	3301      	adds	r3, #1
 80038c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1cf      	bne.n	8003882 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2200      	movs	r2, #0
 80038ea:	2140      	movs	r1, #64	; 0x40
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 fac9 	bl	8003e84 <UART_WaitOnFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e006      	b.n	800390a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	e000      	b.n	800390a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003908:	2302      	movs	r3, #2
  }
}
 800390a:	4618      	mov	r0, r3
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b0ba      	sub	sp, #232	; 0xe8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800393a:	2300      	movs	r3, #0
 800393c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003940:	2300      	movs	r3, #0
 8003942:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10f      	bne.n	800397a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800395a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_UART_IRQHandler+0x66>
 8003966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fbd1 	bl	800411a <UART_Receive_IT>
      return;
 8003978:	e25b      	b.n	8003e32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800397a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80de 	beq.w	8003b40 <HAL_UART_IRQHandler+0x22c>
 8003984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d106      	bne.n	800399e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003994:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80d1 	beq.w	8003b40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800399e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <HAL_UART_IRQHandler+0xae>
 80039aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f043 0201 	orr.w	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <HAL_UART_IRQHandler+0xd2>
 80039ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f043 0202 	orr.w	r2, r3, #2
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <HAL_UART_IRQHandler+0xf6>
 80039f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d005      	beq.n	8003a0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f043 0204 	orr.w	r2, r3, #4
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d011      	beq.n	8003a3a <HAL_UART_IRQHandler+0x126>
 8003a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d105      	bne.n	8003a2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d005      	beq.n	8003a3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f043 0208 	orr.w	r2, r3, #8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 81f2 	beq.w	8003e28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_UART_IRQHandler+0x14e>
 8003a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fb5c 	bl	800411a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d103      	bne.n	8003a8e <HAL_UART_IRQHandler+0x17a>
 8003a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d04f      	beq.n	8003b2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fa66 	bl	8003f60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d041      	beq.n	8003b26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3314      	adds	r3, #20
 8003aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3314      	adds	r3, #20
 8003aca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ace:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ada:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1d9      	bne.n	8003aa2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d013      	beq.n	8003b1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afa:	4a7e      	ldr	r2, [pc, #504]	; (8003cf4 <HAL_UART_IRQHandler+0x3e0>)
 8003afc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe f968 	bl	8001dd8 <HAL_DMA_Abort_IT>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d016      	beq.n	8003b3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	e00e      	b.n	8003b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f99c 	bl	8003e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	e00a      	b.n	8003b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f998 	bl	8003e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2c:	e006      	b.n	8003b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f994 	bl	8003e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b3a:	e175      	b.n	8003e28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3c:	bf00      	nop
    return;
 8003b3e:	e173      	b.n	8003e28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	f040 814f 	bne.w	8003de8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8148 	beq.w	8003de8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8141 	beq.w	8003de8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b66:	2300      	movs	r3, #0
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80b6 	beq.w	8003cf8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8145 	beq.w	8003e2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003baa:	429a      	cmp	r2, r3
 8003bac:	f080 813e 	bcs.w	8003e2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	f000 8088 	beq.w	8003cd4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	330c      	adds	r3, #12
 8003bca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003be2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	330c      	adds	r3, #12
 8003bec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003bf0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bfc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1d9      	bne.n	8003bc4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3314      	adds	r3, #20
 8003c16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c1a:	e853 3f00 	ldrex	r3, [r3]
 8003c1e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3314      	adds	r3, #20
 8003c30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c34:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c38:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e1      	bne.n	8003c10 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3314      	adds	r3, #20
 8003c52:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3314      	adds	r3, #20
 8003c6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c70:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e3      	bne.n	8003c4c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	330c      	adds	r3, #12
 8003c98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca4:	f023 0310 	bic.w	r3, r3, #16
 8003ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cb6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cb8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e3      	bne.n	8003c92 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe f847 	bl	8001d62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	4619      	mov	r1, r3
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f8bf 	bl	8003e6e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cf0:	e09c      	b.n	8003e2c <HAL_UART_IRQHandler+0x518>
 8003cf2:	bf00      	nop
 8003cf4:	08004025 	.word	0x08004025
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 808e 	beq.w	8003e30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 8089 	beq.w	8003e30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	330c      	adds	r3, #12
 8003d24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	330c      	adds	r3, #12
 8003d3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d42:	647a      	str	r2, [r7, #68]	; 0x44
 8003d44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e3      	bne.n	8003d1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3314      	adds	r3, #20
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	623b      	str	r3, [r7, #32]
   return(result);
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	f023 0301 	bic.w	r3, r3, #1
 8003d6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3314      	adds	r3, #20
 8003d76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d7a:	633a      	str	r2, [r7, #48]	; 0x30
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e3      	bne.n	8003d56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	330c      	adds	r3, #12
 8003da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0310 	bic.w	r3, r3, #16
 8003db2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003dc0:	61fa      	str	r2, [r7, #28]
 8003dc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc4:	69b9      	ldr	r1, [r7, #24]
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e3      	bne.n	8003d9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dde:	4619      	mov	r1, r3
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f844 	bl	8003e6e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003de6:	e023      	b.n	8003e30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d009      	beq.n	8003e08 <HAL_UART_IRQHandler+0x4f4>
 8003df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f923 	bl	800404c <UART_Transmit_IT>
    return;
 8003e06:	e014      	b.n	8003e32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00e      	beq.n	8003e32 <HAL_UART_IRQHandler+0x51e>
 8003e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f962 	bl	80040ea <UART_EndTransmit_IT>
    return;
 8003e26:	e004      	b.n	8003e32 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e28:	bf00      	nop
 8003e2a:	e002      	b.n	8003e32 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e2c:	bf00      	nop
 8003e2e:	e000      	b.n	8003e32 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e30:	bf00      	nop
  }
}
 8003e32:	37e8      	adds	r7, #232	; 0xe8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr

08003e4a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr

08003e5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	460b      	mov	r3, r1
 8003e78:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b090      	sub	sp, #64	; 0x40
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	4613      	mov	r3, r2
 8003e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e94:	e050      	b.n	8003f38 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9c:	d04c      	beq.n	8003f38 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d007      	beq.n	8003eb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ea4:	f7fd fe46 	bl	8001b34 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d241      	bcs.n	8003f38 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ed4:	637a      	str	r2, [r7, #52]	; 0x34
 8003ed6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e5      	bne.n	8003eb4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3314      	adds	r3, #20
 8003eee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3314      	adds	r3, #20
 8003f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f08:	623a      	str	r2, [r7, #32]
 8003f0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	69f9      	ldr	r1, [r7, #28]
 8003f0e:	6a3a      	ldr	r2, [r7, #32]
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e5      	bne.n	8003ee8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e00f      	b.n	8003f58 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	4013      	ands	r3, r2
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	bf0c      	ite	eq
 8003f48:	2301      	moveq	r3, #1
 8003f4a:	2300      	movne	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d09f      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3740      	adds	r7, #64	; 0x40
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b095      	sub	sp, #84	; 0x54
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f88:	643a      	str	r2, [r7, #64]	; 0x40
 8003f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f90:	e841 2300 	strex	r3, r2, [r1]
 8003f94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e5      	bne.n	8003f68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3314      	adds	r3, #20
 8003fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f023 0301 	bic.w	r3, r3, #1
 8003fb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3314      	adds	r3, #20
 8003fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e5      	bne.n	8003f9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d119      	bne.n	800400c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	330c      	adds	r3, #12
 8003fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f023 0310 	bic.w	r3, r3, #16
 8003fee:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	330c      	adds	r3, #12
 8003ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ff8:	61ba      	str	r2, [r7, #24]
 8003ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	6979      	ldr	r1, [r7, #20]
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	613b      	str	r3, [r7, #16]
   return(result);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e5      	bne.n	8003fd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	; 0x30
}
 800401a:	bf00      	nop
 800401c:	3754      	adds	r7, #84	; 0x54
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr

08004024 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7ff ff0c 	bl	8003e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004044:	bf00      	nop
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b21      	cmp	r3, #33	; 0x21
 800405e:	d13e      	bne.n	80040de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004068:	d114      	bne.n	8004094 <UART_Transmit_IT+0x48>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d110      	bne.n	8004094 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004086:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	1c9a      	adds	r2, r3, #2
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	621a      	str	r2, [r3, #32]
 8004092:	e008      	b.n	80040a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	1c59      	adds	r1, r3, #1
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6211      	str	r1, [r2, #32]
 800409e:	781a      	ldrb	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	4619      	mov	r1, r3
 80040b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10f      	bne.n	80040da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	e000      	b.n	80040e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040de:	2302      	movs	r3, #2
  }
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr

080040ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004100:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff fe94 	bl	8003e38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b08c      	sub	sp, #48	; 0x30
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b22      	cmp	r3, #34	; 0x22
 800412c:	f040 80ae 	bne.w	800428c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004138:	d117      	bne.n	800416a <UART_Receive_IT+0x50>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d113      	bne.n	800416a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004142:	2300      	movs	r3, #0
 8004144:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	b29b      	uxth	r3, r3
 8004154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004158:	b29a      	uxth	r2, r3
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	1c9a      	adds	r2, r3, #2
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	629a      	str	r2, [r3, #40]	; 0x28
 8004168:	e026      	b.n	80041b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417c:	d007      	beq.n	800418e <UART_Receive_IT+0x74>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10a      	bne.n	800419c <UART_Receive_IT+0x82>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	e008      	b.n	80041ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4619      	mov	r1, r3
 80041c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d15d      	bne.n	8004288 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0220 	bic.w	r2, r2, #32
 80041da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0201 	bic.w	r2, r2, #1
 80041fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	2b01      	cmp	r3, #1
 8004210:	d135      	bne.n	800427e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	330c      	adds	r3, #12
 800421e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	e853 3f00 	ldrex	r3, [r3]
 8004226:	613b      	str	r3, [r7, #16]
   return(result);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f023 0310 	bic.w	r3, r3, #16
 800422e:	627b      	str	r3, [r7, #36]	; 0x24
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	330c      	adds	r3, #12
 8004236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004238:	623a      	str	r2, [r7, #32]
 800423a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	69f9      	ldr	r1, [r7, #28]
 800423e:	6a3a      	ldr	r2, [r7, #32]
 8004240:	e841 2300 	strex	r3, r2, [r1]
 8004244:	61bb      	str	r3, [r7, #24]
   return(result);
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e5      	bne.n	8004218 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b10      	cmp	r3, #16
 8004258:	d10a      	bne.n	8004270 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004274:	4619      	mov	r1, r3
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff fdf9 	bl	8003e6e <HAL_UARTEx_RxEventCallback>
 800427c:	e002      	b.n	8004284 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff fde3 	bl	8003e4a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	e002      	b.n	800428e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	e000      	b.n	800428e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800428c:	2302      	movs	r3, #2
  }
}
 800428e:	4618      	mov	r0, r3
 8004290:	3730      	adds	r7, #48	; 0x30
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042d2:	f023 030c 	bic.w	r3, r3, #12
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	68b9      	ldr	r1, [r7, #8]
 80042dc:	430b      	orrs	r3, r1
 80042de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a2c      	ldr	r2, [pc, #176]	; (80043ac <UART_SetConfig+0x114>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d103      	bne.n	8004308 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004300:	f7fe fb80 	bl	8002a04 <HAL_RCC_GetPCLK2Freq>
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	e002      	b.n	800430e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004308:	f7fe fb68 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
 800430c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	009a      	lsls	r2, r3, #2
 8004318:	441a      	add	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	fbb2 f3f3 	udiv	r3, r2, r3
 8004324:	4a22      	ldr	r2, [pc, #136]	; (80043b0 <UART_SetConfig+0x118>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	0119      	lsls	r1, r3, #4
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	009a      	lsls	r2, r3, #2
 8004338:	441a      	add	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	fbb2 f2f3 	udiv	r2, r2, r3
 8004344:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <UART_SetConfig+0x118>)
 8004346:	fba3 0302 	umull	r0, r3, r3, r2
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	2064      	movs	r0, #100	; 0x64
 800434e:	fb00 f303 	mul.w	r3, r0, r3
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	3332      	adds	r3, #50	; 0x32
 8004358:	4a15      	ldr	r2, [pc, #84]	; (80043b0 <UART_SetConfig+0x118>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004364:	4419      	add	r1, r3
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	009a      	lsls	r2, r3, #2
 8004370:	441a      	add	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	fbb2 f2f3 	udiv	r2, r2, r3
 800437c:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <UART_SetConfig+0x118>)
 800437e:	fba3 0302 	umull	r0, r3, r3, r2
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2064      	movs	r0, #100	; 0x64
 8004386:	fb00 f303 	mul.w	r3, r0, r3
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	3332      	adds	r3, #50	; 0x32
 8004390:	4a07      	ldr	r2, [pc, #28]	; (80043b0 <UART_SetConfig+0x118>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	f003 020f 	and.w	r2, r3, #15
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	440a      	add	r2, r1
 80043a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043a4:	bf00      	nop
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40013800 	.word	0x40013800
 80043b0:	51eb851f 	.word	0x51eb851f

080043b4 <__errno>:
 80043b4:	4b01      	ldr	r3, [pc, #4]	; (80043bc <__errno+0x8>)
 80043b6:	6818      	ldr	r0, [r3, #0]
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	2000006c 	.word	0x2000006c

080043c0 <__libc_init_array>:
 80043c0:	b570      	push	{r4, r5, r6, lr}
 80043c2:	2600      	movs	r6, #0
 80043c4:	4d0c      	ldr	r5, [pc, #48]	; (80043f8 <__libc_init_array+0x38>)
 80043c6:	4c0d      	ldr	r4, [pc, #52]	; (80043fc <__libc_init_array+0x3c>)
 80043c8:	1b64      	subs	r4, r4, r5
 80043ca:	10a4      	asrs	r4, r4, #2
 80043cc:	42a6      	cmp	r6, r4
 80043ce:	d109      	bne.n	80043e4 <__libc_init_array+0x24>
 80043d0:	f000 fc6c 	bl	8004cac <_init>
 80043d4:	2600      	movs	r6, #0
 80043d6:	4d0a      	ldr	r5, [pc, #40]	; (8004400 <__libc_init_array+0x40>)
 80043d8:	4c0a      	ldr	r4, [pc, #40]	; (8004404 <__libc_init_array+0x44>)
 80043da:	1b64      	subs	r4, r4, r5
 80043dc:	10a4      	asrs	r4, r4, #2
 80043de:	42a6      	cmp	r6, r4
 80043e0:	d105      	bne.n	80043ee <__libc_init_array+0x2e>
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
 80043e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e8:	4798      	blx	r3
 80043ea:	3601      	adds	r6, #1
 80043ec:	e7ee      	b.n	80043cc <__libc_init_array+0xc>
 80043ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f2:	4798      	blx	r3
 80043f4:	3601      	adds	r6, #1
 80043f6:	e7f2      	b.n	80043de <__libc_init_array+0x1e>
 80043f8:	08004d68 	.word	0x08004d68
 80043fc:	08004d68 	.word	0x08004d68
 8004400:	08004d68 	.word	0x08004d68
 8004404:	08004d6c 	.word	0x08004d6c

08004408 <malloc>:
 8004408:	4b02      	ldr	r3, [pc, #8]	; (8004414 <malloc+0xc>)
 800440a:	4601      	mov	r1, r0
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	f000 b85f 	b.w	80044d0 <_malloc_r>
 8004412:	bf00      	nop
 8004414:	2000006c 	.word	0x2000006c

08004418 <free>:
 8004418:	4b02      	ldr	r3, [pc, #8]	; (8004424 <free+0xc>)
 800441a:	4601      	mov	r1, r0
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	f000 b80b 	b.w	8004438 <_free_r>
 8004422:	bf00      	nop
 8004424:	2000006c 	.word	0x2000006c

08004428 <memset>:
 8004428:	4603      	mov	r3, r0
 800442a:	4402      	add	r2, r0
 800442c:	4293      	cmp	r3, r2
 800442e:	d100      	bne.n	8004432 <memset+0xa>
 8004430:	4770      	bx	lr
 8004432:	f803 1b01 	strb.w	r1, [r3], #1
 8004436:	e7f9      	b.n	800442c <memset+0x4>

08004438 <_free_r>:
 8004438:	b538      	push	{r3, r4, r5, lr}
 800443a:	4605      	mov	r5, r0
 800443c:	2900      	cmp	r1, #0
 800443e:	d043      	beq.n	80044c8 <_free_r+0x90>
 8004440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004444:	1f0c      	subs	r4, r1, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	bfb8      	it	lt
 800444a:	18e4      	addlt	r4, r4, r3
 800444c:	f000 f8ca 	bl	80045e4 <__malloc_lock>
 8004450:	4a1e      	ldr	r2, [pc, #120]	; (80044cc <_free_r+0x94>)
 8004452:	6813      	ldr	r3, [r2, #0]
 8004454:	4610      	mov	r0, r2
 8004456:	b933      	cbnz	r3, 8004466 <_free_r+0x2e>
 8004458:	6063      	str	r3, [r4, #4]
 800445a:	6014      	str	r4, [r2, #0]
 800445c:	4628      	mov	r0, r5
 800445e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004462:	f000 b8c5 	b.w	80045f0 <__malloc_unlock>
 8004466:	42a3      	cmp	r3, r4
 8004468:	d90a      	bls.n	8004480 <_free_r+0x48>
 800446a:	6821      	ldr	r1, [r4, #0]
 800446c:	1862      	adds	r2, r4, r1
 800446e:	4293      	cmp	r3, r2
 8004470:	bf01      	itttt	eq
 8004472:	681a      	ldreq	r2, [r3, #0]
 8004474:	685b      	ldreq	r3, [r3, #4]
 8004476:	1852      	addeq	r2, r2, r1
 8004478:	6022      	streq	r2, [r4, #0]
 800447a:	6063      	str	r3, [r4, #4]
 800447c:	6004      	str	r4, [r0, #0]
 800447e:	e7ed      	b.n	800445c <_free_r+0x24>
 8004480:	461a      	mov	r2, r3
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	b10b      	cbz	r3, 800448a <_free_r+0x52>
 8004486:	42a3      	cmp	r3, r4
 8004488:	d9fa      	bls.n	8004480 <_free_r+0x48>
 800448a:	6811      	ldr	r1, [r2, #0]
 800448c:	1850      	adds	r0, r2, r1
 800448e:	42a0      	cmp	r0, r4
 8004490:	d10b      	bne.n	80044aa <_free_r+0x72>
 8004492:	6820      	ldr	r0, [r4, #0]
 8004494:	4401      	add	r1, r0
 8004496:	1850      	adds	r0, r2, r1
 8004498:	4283      	cmp	r3, r0
 800449a:	6011      	str	r1, [r2, #0]
 800449c:	d1de      	bne.n	800445c <_free_r+0x24>
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4401      	add	r1, r0
 80044a4:	6011      	str	r1, [r2, #0]
 80044a6:	6053      	str	r3, [r2, #4]
 80044a8:	e7d8      	b.n	800445c <_free_r+0x24>
 80044aa:	d902      	bls.n	80044b2 <_free_r+0x7a>
 80044ac:	230c      	movs	r3, #12
 80044ae:	602b      	str	r3, [r5, #0]
 80044b0:	e7d4      	b.n	800445c <_free_r+0x24>
 80044b2:	6820      	ldr	r0, [r4, #0]
 80044b4:	1821      	adds	r1, r4, r0
 80044b6:	428b      	cmp	r3, r1
 80044b8:	bf01      	itttt	eq
 80044ba:	6819      	ldreq	r1, [r3, #0]
 80044bc:	685b      	ldreq	r3, [r3, #4]
 80044be:	1809      	addeq	r1, r1, r0
 80044c0:	6021      	streq	r1, [r4, #0]
 80044c2:	6063      	str	r3, [r4, #4]
 80044c4:	6054      	str	r4, [r2, #4]
 80044c6:	e7c9      	b.n	800445c <_free_r+0x24>
 80044c8:	bd38      	pop	{r3, r4, r5, pc}
 80044ca:	bf00      	nop
 80044cc:	20000128 	.word	0x20000128

080044d0 <_malloc_r>:
 80044d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d2:	1ccd      	adds	r5, r1, #3
 80044d4:	f025 0503 	bic.w	r5, r5, #3
 80044d8:	3508      	adds	r5, #8
 80044da:	2d0c      	cmp	r5, #12
 80044dc:	bf38      	it	cc
 80044de:	250c      	movcc	r5, #12
 80044e0:	2d00      	cmp	r5, #0
 80044e2:	4606      	mov	r6, r0
 80044e4:	db01      	blt.n	80044ea <_malloc_r+0x1a>
 80044e6:	42a9      	cmp	r1, r5
 80044e8:	d903      	bls.n	80044f2 <_malloc_r+0x22>
 80044ea:	230c      	movs	r3, #12
 80044ec:	6033      	str	r3, [r6, #0]
 80044ee:	2000      	movs	r0, #0
 80044f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044f2:	f000 f877 	bl	80045e4 <__malloc_lock>
 80044f6:	4921      	ldr	r1, [pc, #132]	; (800457c <_malloc_r+0xac>)
 80044f8:	680a      	ldr	r2, [r1, #0]
 80044fa:	4614      	mov	r4, r2
 80044fc:	b99c      	cbnz	r4, 8004526 <_malloc_r+0x56>
 80044fe:	4f20      	ldr	r7, [pc, #128]	; (8004580 <_malloc_r+0xb0>)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	b923      	cbnz	r3, 800450e <_malloc_r+0x3e>
 8004504:	4621      	mov	r1, r4
 8004506:	4630      	mov	r0, r6
 8004508:	f000 f83c 	bl	8004584 <_sbrk_r>
 800450c:	6038      	str	r0, [r7, #0]
 800450e:	4629      	mov	r1, r5
 8004510:	4630      	mov	r0, r6
 8004512:	f000 f837 	bl	8004584 <_sbrk_r>
 8004516:	1c43      	adds	r3, r0, #1
 8004518:	d123      	bne.n	8004562 <_malloc_r+0x92>
 800451a:	230c      	movs	r3, #12
 800451c:	4630      	mov	r0, r6
 800451e:	6033      	str	r3, [r6, #0]
 8004520:	f000 f866 	bl	80045f0 <__malloc_unlock>
 8004524:	e7e3      	b.n	80044ee <_malloc_r+0x1e>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	1b5b      	subs	r3, r3, r5
 800452a:	d417      	bmi.n	800455c <_malloc_r+0x8c>
 800452c:	2b0b      	cmp	r3, #11
 800452e:	d903      	bls.n	8004538 <_malloc_r+0x68>
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	441c      	add	r4, r3
 8004534:	6025      	str	r5, [r4, #0]
 8004536:	e004      	b.n	8004542 <_malloc_r+0x72>
 8004538:	6863      	ldr	r3, [r4, #4]
 800453a:	42a2      	cmp	r2, r4
 800453c:	bf0c      	ite	eq
 800453e:	600b      	streq	r3, [r1, #0]
 8004540:	6053      	strne	r3, [r2, #4]
 8004542:	4630      	mov	r0, r6
 8004544:	f000 f854 	bl	80045f0 <__malloc_unlock>
 8004548:	f104 000b 	add.w	r0, r4, #11
 800454c:	1d23      	adds	r3, r4, #4
 800454e:	f020 0007 	bic.w	r0, r0, #7
 8004552:	1ac2      	subs	r2, r0, r3
 8004554:	d0cc      	beq.n	80044f0 <_malloc_r+0x20>
 8004556:	1a1b      	subs	r3, r3, r0
 8004558:	50a3      	str	r3, [r4, r2]
 800455a:	e7c9      	b.n	80044f0 <_malloc_r+0x20>
 800455c:	4622      	mov	r2, r4
 800455e:	6864      	ldr	r4, [r4, #4]
 8004560:	e7cc      	b.n	80044fc <_malloc_r+0x2c>
 8004562:	1cc4      	adds	r4, r0, #3
 8004564:	f024 0403 	bic.w	r4, r4, #3
 8004568:	42a0      	cmp	r0, r4
 800456a:	d0e3      	beq.n	8004534 <_malloc_r+0x64>
 800456c:	1a21      	subs	r1, r4, r0
 800456e:	4630      	mov	r0, r6
 8004570:	f000 f808 	bl	8004584 <_sbrk_r>
 8004574:	3001      	adds	r0, #1
 8004576:	d1dd      	bne.n	8004534 <_malloc_r+0x64>
 8004578:	e7cf      	b.n	800451a <_malloc_r+0x4a>
 800457a:	bf00      	nop
 800457c:	20000128 	.word	0x20000128
 8004580:	2000012c 	.word	0x2000012c

08004584 <_sbrk_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	2300      	movs	r3, #0
 8004588:	4d05      	ldr	r5, [pc, #20]	; (80045a0 <_sbrk_r+0x1c>)
 800458a:	4604      	mov	r4, r0
 800458c:	4608      	mov	r0, r1
 800458e:	602b      	str	r3, [r5, #0]
 8004590:	f7fd fa16 	bl	80019c0 <_sbrk>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	d102      	bne.n	800459e <_sbrk_r+0x1a>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	b103      	cbz	r3, 800459e <_sbrk_r+0x1a>
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	20000210 	.word	0x20000210

080045a4 <siprintf>:
 80045a4:	b40e      	push	{r1, r2, r3}
 80045a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045aa:	b500      	push	{lr}
 80045ac:	b09c      	sub	sp, #112	; 0x70
 80045ae:	ab1d      	add	r3, sp, #116	; 0x74
 80045b0:	9002      	str	r0, [sp, #8]
 80045b2:	9006      	str	r0, [sp, #24]
 80045b4:	9107      	str	r1, [sp, #28]
 80045b6:	9104      	str	r1, [sp, #16]
 80045b8:	4808      	ldr	r0, [pc, #32]	; (80045dc <siprintf+0x38>)
 80045ba:	4909      	ldr	r1, [pc, #36]	; (80045e0 <siprintf+0x3c>)
 80045bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80045c0:	9105      	str	r1, [sp, #20]
 80045c2:	6800      	ldr	r0, [r0, #0]
 80045c4:	a902      	add	r1, sp, #8
 80045c6:	9301      	str	r3, [sp, #4]
 80045c8:	f000 f874 	bl	80046b4 <_svfiprintf_r>
 80045cc:	2200      	movs	r2, #0
 80045ce:	9b02      	ldr	r3, [sp, #8]
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	b01c      	add	sp, #112	; 0x70
 80045d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80045d8:	b003      	add	sp, #12
 80045da:	4770      	bx	lr
 80045dc:	2000006c 	.word	0x2000006c
 80045e0:	ffff0208 	.word	0xffff0208

080045e4 <__malloc_lock>:
 80045e4:	4801      	ldr	r0, [pc, #4]	; (80045ec <__malloc_lock+0x8>)
 80045e6:	f000 bafb 	b.w	8004be0 <__retarget_lock_acquire_recursive>
 80045ea:	bf00      	nop
 80045ec:	20000218 	.word	0x20000218

080045f0 <__malloc_unlock>:
 80045f0:	4801      	ldr	r0, [pc, #4]	; (80045f8 <__malloc_unlock+0x8>)
 80045f2:	f000 baf6 	b.w	8004be2 <__retarget_lock_release_recursive>
 80045f6:	bf00      	nop
 80045f8:	20000218 	.word	0x20000218

080045fc <__ssputs_r>:
 80045fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004600:	688e      	ldr	r6, [r1, #8]
 8004602:	4682      	mov	sl, r0
 8004604:	429e      	cmp	r6, r3
 8004606:	460c      	mov	r4, r1
 8004608:	4690      	mov	r8, r2
 800460a:	461f      	mov	r7, r3
 800460c:	d838      	bhi.n	8004680 <__ssputs_r+0x84>
 800460e:	898a      	ldrh	r2, [r1, #12]
 8004610:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004614:	d032      	beq.n	800467c <__ssputs_r+0x80>
 8004616:	6825      	ldr	r5, [r4, #0]
 8004618:	6909      	ldr	r1, [r1, #16]
 800461a:	3301      	adds	r3, #1
 800461c:	eba5 0901 	sub.w	r9, r5, r1
 8004620:	6965      	ldr	r5, [r4, #20]
 8004622:	444b      	add	r3, r9
 8004624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004628:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800462c:	106d      	asrs	r5, r5, #1
 800462e:	429d      	cmp	r5, r3
 8004630:	bf38      	it	cc
 8004632:	461d      	movcc	r5, r3
 8004634:	0553      	lsls	r3, r2, #21
 8004636:	d531      	bpl.n	800469c <__ssputs_r+0xa0>
 8004638:	4629      	mov	r1, r5
 800463a:	f7ff ff49 	bl	80044d0 <_malloc_r>
 800463e:	4606      	mov	r6, r0
 8004640:	b950      	cbnz	r0, 8004658 <__ssputs_r+0x5c>
 8004642:	230c      	movs	r3, #12
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	f8ca 3000 	str.w	r3, [sl]
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004652:	81a3      	strh	r3, [r4, #12]
 8004654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004658:	464a      	mov	r2, r9
 800465a:	6921      	ldr	r1, [r4, #16]
 800465c:	f000 fad0 	bl	8004c00 <memcpy>
 8004660:	89a3      	ldrh	r3, [r4, #12]
 8004662:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466a:	81a3      	strh	r3, [r4, #12]
 800466c:	6126      	str	r6, [r4, #16]
 800466e:	444e      	add	r6, r9
 8004670:	6026      	str	r6, [r4, #0]
 8004672:	463e      	mov	r6, r7
 8004674:	6165      	str	r5, [r4, #20]
 8004676:	eba5 0509 	sub.w	r5, r5, r9
 800467a:	60a5      	str	r5, [r4, #8]
 800467c:	42be      	cmp	r6, r7
 800467e:	d900      	bls.n	8004682 <__ssputs_r+0x86>
 8004680:	463e      	mov	r6, r7
 8004682:	4632      	mov	r2, r6
 8004684:	4641      	mov	r1, r8
 8004686:	6820      	ldr	r0, [r4, #0]
 8004688:	f000 fac8 	bl	8004c1c <memmove>
 800468c:	68a3      	ldr	r3, [r4, #8]
 800468e:	6822      	ldr	r2, [r4, #0]
 8004690:	1b9b      	subs	r3, r3, r6
 8004692:	4432      	add	r2, r6
 8004694:	2000      	movs	r0, #0
 8004696:	60a3      	str	r3, [r4, #8]
 8004698:	6022      	str	r2, [r4, #0]
 800469a:	e7db      	b.n	8004654 <__ssputs_r+0x58>
 800469c:	462a      	mov	r2, r5
 800469e:	f000 fad7 	bl	8004c50 <_realloc_r>
 80046a2:	4606      	mov	r6, r0
 80046a4:	2800      	cmp	r0, #0
 80046a6:	d1e1      	bne.n	800466c <__ssputs_r+0x70>
 80046a8:	4650      	mov	r0, sl
 80046aa:	6921      	ldr	r1, [r4, #16]
 80046ac:	f7ff fec4 	bl	8004438 <_free_r>
 80046b0:	e7c7      	b.n	8004642 <__ssputs_r+0x46>
	...

080046b4 <_svfiprintf_r>:
 80046b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b8:	4698      	mov	r8, r3
 80046ba:	898b      	ldrh	r3, [r1, #12]
 80046bc:	4607      	mov	r7, r0
 80046be:	061b      	lsls	r3, r3, #24
 80046c0:	460d      	mov	r5, r1
 80046c2:	4614      	mov	r4, r2
 80046c4:	b09d      	sub	sp, #116	; 0x74
 80046c6:	d50e      	bpl.n	80046e6 <_svfiprintf_r+0x32>
 80046c8:	690b      	ldr	r3, [r1, #16]
 80046ca:	b963      	cbnz	r3, 80046e6 <_svfiprintf_r+0x32>
 80046cc:	2140      	movs	r1, #64	; 0x40
 80046ce:	f7ff feff 	bl	80044d0 <_malloc_r>
 80046d2:	6028      	str	r0, [r5, #0]
 80046d4:	6128      	str	r0, [r5, #16]
 80046d6:	b920      	cbnz	r0, 80046e2 <_svfiprintf_r+0x2e>
 80046d8:	230c      	movs	r3, #12
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	f04f 30ff 	mov.w	r0, #4294967295
 80046e0:	e0d1      	b.n	8004886 <_svfiprintf_r+0x1d2>
 80046e2:	2340      	movs	r3, #64	; 0x40
 80046e4:	616b      	str	r3, [r5, #20]
 80046e6:	2300      	movs	r3, #0
 80046e8:	9309      	str	r3, [sp, #36]	; 0x24
 80046ea:	2320      	movs	r3, #32
 80046ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046f0:	2330      	movs	r3, #48	; 0x30
 80046f2:	f04f 0901 	mov.w	r9, #1
 80046f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80046fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80048a0 <_svfiprintf_r+0x1ec>
 80046fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004702:	4623      	mov	r3, r4
 8004704:	469a      	mov	sl, r3
 8004706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800470a:	b10a      	cbz	r2, 8004710 <_svfiprintf_r+0x5c>
 800470c:	2a25      	cmp	r2, #37	; 0x25
 800470e:	d1f9      	bne.n	8004704 <_svfiprintf_r+0x50>
 8004710:	ebba 0b04 	subs.w	fp, sl, r4
 8004714:	d00b      	beq.n	800472e <_svfiprintf_r+0x7a>
 8004716:	465b      	mov	r3, fp
 8004718:	4622      	mov	r2, r4
 800471a:	4629      	mov	r1, r5
 800471c:	4638      	mov	r0, r7
 800471e:	f7ff ff6d 	bl	80045fc <__ssputs_r>
 8004722:	3001      	adds	r0, #1
 8004724:	f000 80aa 	beq.w	800487c <_svfiprintf_r+0x1c8>
 8004728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800472a:	445a      	add	r2, fp
 800472c:	9209      	str	r2, [sp, #36]	; 0x24
 800472e:	f89a 3000 	ldrb.w	r3, [sl]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80a2 	beq.w	800487c <_svfiprintf_r+0x1c8>
 8004738:	2300      	movs	r3, #0
 800473a:	f04f 32ff 	mov.w	r2, #4294967295
 800473e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004742:	f10a 0a01 	add.w	sl, sl, #1
 8004746:	9304      	str	r3, [sp, #16]
 8004748:	9307      	str	r3, [sp, #28]
 800474a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800474e:	931a      	str	r3, [sp, #104]	; 0x68
 8004750:	4654      	mov	r4, sl
 8004752:	2205      	movs	r2, #5
 8004754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004758:	4851      	ldr	r0, [pc, #324]	; (80048a0 <_svfiprintf_r+0x1ec>)
 800475a:	f000 fa43 	bl	8004be4 <memchr>
 800475e:	9a04      	ldr	r2, [sp, #16]
 8004760:	b9d8      	cbnz	r0, 800479a <_svfiprintf_r+0xe6>
 8004762:	06d0      	lsls	r0, r2, #27
 8004764:	bf44      	itt	mi
 8004766:	2320      	movmi	r3, #32
 8004768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800476c:	0711      	lsls	r1, r2, #28
 800476e:	bf44      	itt	mi
 8004770:	232b      	movmi	r3, #43	; 0x2b
 8004772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004776:	f89a 3000 	ldrb.w	r3, [sl]
 800477a:	2b2a      	cmp	r3, #42	; 0x2a
 800477c:	d015      	beq.n	80047aa <_svfiprintf_r+0xf6>
 800477e:	4654      	mov	r4, sl
 8004780:	2000      	movs	r0, #0
 8004782:	f04f 0c0a 	mov.w	ip, #10
 8004786:	9a07      	ldr	r2, [sp, #28]
 8004788:	4621      	mov	r1, r4
 800478a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800478e:	3b30      	subs	r3, #48	; 0x30
 8004790:	2b09      	cmp	r3, #9
 8004792:	d94e      	bls.n	8004832 <_svfiprintf_r+0x17e>
 8004794:	b1b0      	cbz	r0, 80047c4 <_svfiprintf_r+0x110>
 8004796:	9207      	str	r2, [sp, #28]
 8004798:	e014      	b.n	80047c4 <_svfiprintf_r+0x110>
 800479a:	eba0 0308 	sub.w	r3, r0, r8
 800479e:	fa09 f303 	lsl.w	r3, r9, r3
 80047a2:	4313      	orrs	r3, r2
 80047a4:	46a2      	mov	sl, r4
 80047a6:	9304      	str	r3, [sp, #16]
 80047a8:	e7d2      	b.n	8004750 <_svfiprintf_r+0x9c>
 80047aa:	9b03      	ldr	r3, [sp, #12]
 80047ac:	1d19      	adds	r1, r3, #4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	9103      	str	r1, [sp, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bfbb      	ittet	lt
 80047b6:	425b      	neglt	r3, r3
 80047b8:	f042 0202 	orrlt.w	r2, r2, #2
 80047bc:	9307      	strge	r3, [sp, #28]
 80047be:	9307      	strlt	r3, [sp, #28]
 80047c0:	bfb8      	it	lt
 80047c2:	9204      	strlt	r2, [sp, #16]
 80047c4:	7823      	ldrb	r3, [r4, #0]
 80047c6:	2b2e      	cmp	r3, #46	; 0x2e
 80047c8:	d10c      	bne.n	80047e4 <_svfiprintf_r+0x130>
 80047ca:	7863      	ldrb	r3, [r4, #1]
 80047cc:	2b2a      	cmp	r3, #42	; 0x2a
 80047ce:	d135      	bne.n	800483c <_svfiprintf_r+0x188>
 80047d0:	9b03      	ldr	r3, [sp, #12]
 80047d2:	3402      	adds	r4, #2
 80047d4:	1d1a      	adds	r2, r3, #4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	9203      	str	r2, [sp, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bfb8      	it	lt
 80047de:	f04f 33ff 	movlt.w	r3, #4294967295
 80047e2:	9305      	str	r3, [sp, #20]
 80047e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80048b0 <_svfiprintf_r+0x1fc>
 80047e8:	2203      	movs	r2, #3
 80047ea:	4650      	mov	r0, sl
 80047ec:	7821      	ldrb	r1, [r4, #0]
 80047ee:	f000 f9f9 	bl	8004be4 <memchr>
 80047f2:	b140      	cbz	r0, 8004806 <_svfiprintf_r+0x152>
 80047f4:	2340      	movs	r3, #64	; 0x40
 80047f6:	eba0 000a 	sub.w	r0, r0, sl
 80047fa:	fa03 f000 	lsl.w	r0, r3, r0
 80047fe:	9b04      	ldr	r3, [sp, #16]
 8004800:	3401      	adds	r4, #1
 8004802:	4303      	orrs	r3, r0
 8004804:	9304      	str	r3, [sp, #16]
 8004806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800480a:	2206      	movs	r2, #6
 800480c:	4825      	ldr	r0, [pc, #148]	; (80048a4 <_svfiprintf_r+0x1f0>)
 800480e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004812:	f000 f9e7 	bl	8004be4 <memchr>
 8004816:	2800      	cmp	r0, #0
 8004818:	d038      	beq.n	800488c <_svfiprintf_r+0x1d8>
 800481a:	4b23      	ldr	r3, [pc, #140]	; (80048a8 <_svfiprintf_r+0x1f4>)
 800481c:	bb1b      	cbnz	r3, 8004866 <_svfiprintf_r+0x1b2>
 800481e:	9b03      	ldr	r3, [sp, #12]
 8004820:	3307      	adds	r3, #7
 8004822:	f023 0307 	bic.w	r3, r3, #7
 8004826:	3308      	adds	r3, #8
 8004828:	9303      	str	r3, [sp, #12]
 800482a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800482c:	4433      	add	r3, r6
 800482e:	9309      	str	r3, [sp, #36]	; 0x24
 8004830:	e767      	b.n	8004702 <_svfiprintf_r+0x4e>
 8004832:	460c      	mov	r4, r1
 8004834:	2001      	movs	r0, #1
 8004836:	fb0c 3202 	mla	r2, ip, r2, r3
 800483a:	e7a5      	b.n	8004788 <_svfiprintf_r+0xd4>
 800483c:	2300      	movs	r3, #0
 800483e:	f04f 0c0a 	mov.w	ip, #10
 8004842:	4619      	mov	r1, r3
 8004844:	3401      	adds	r4, #1
 8004846:	9305      	str	r3, [sp, #20]
 8004848:	4620      	mov	r0, r4
 800484a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800484e:	3a30      	subs	r2, #48	; 0x30
 8004850:	2a09      	cmp	r2, #9
 8004852:	d903      	bls.n	800485c <_svfiprintf_r+0x1a8>
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0c5      	beq.n	80047e4 <_svfiprintf_r+0x130>
 8004858:	9105      	str	r1, [sp, #20]
 800485a:	e7c3      	b.n	80047e4 <_svfiprintf_r+0x130>
 800485c:	4604      	mov	r4, r0
 800485e:	2301      	movs	r3, #1
 8004860:	fb0c 2101 	mla	r1, ip, r1, r2
 8004864:	e7f0      	b.n	8004848 <_svfiprintf_r+0x194>
 8004866:	ab03      	add	r3, sp, #12
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	462a      	mov	r2, r5
 800486c:	4638      	mov	r0, r7
 800486e:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <_svfiprintf_r+0x1f8>)
 8004870:	a904      	add	r1, sp, #16
 8004872:	f3af 8000 	nop.w
 8004876:	1c42      	adds	r2, r0, #1
 8004878:	4606      	mov	r6, r0
 800487a:	d1d6      	bne.n	800482a <_svfiprintf_r+0x176>
 800487c:	89ab      	ldrh	r3, [r5, #12]
 800487e:	065b      	lsls	r3, r3, #25
 8004880:	f53f af2c 	bmi.w	80046dc <_svfiprintf_r+0x28>
 8004884:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004886:	b01d      	add	sp, #116	; 0x74
 8004888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800488c:	ab03      	add	r3, sp, #12
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	462a      	mov	r2, r5
 8004892:	4638      	mov	r0, r7
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <_svfiprintf_r+0x1f8>)
 8004896:	a904      	add	r1, sp, #16
 8004898:	f000 f87c 	bl	8004994 <_printf_i>
 800489c:	e7eb      	b.n	8004876 <_svfiprintf_r+0x1c2>
 800489e:	bf00      	nop
 80048a0:	08004d32 	.word	0x08004d32
 80048a4:	08004d3c 	.word	0x08004d3c
 80048a8:	00000000 	.word	0x00000000
 80048ac:	080045fd 	.word	0x080045fd
 80048b0:	08004d38 	.word	0x08004d38

080048b4 <_printf_common>:
 80048b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b8:	4616      	mov	r6, r2
 80048ba:	4699      	mov	r9, r3
 80048bc:	688a      	ldr	r2, [r1, #8]
 80048be:	690b      	ldr	r3, [r1, #16]
 80048c0:	4607      	mov	r7, r0
 80048c2:	4293      	cmp	r3, r2
 80048c4:	bfb8      	it	lt
 80048c6:	4613      	movlt	r3, r2
 80048c8:	6033      	str	r3, [r6, #0]
 80048ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048ce:	460c      	mov	r4, r1
 80048d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048d4:	b10a      	cbz	r2, 80048da <_printf_common+0x26>
 80048d6:	3301      	adds	r3, #1
 80048d8:	6033      	str	r3, [r6, #0]
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	0699      	lsls	r1, r3, #26
 80048de:	bf42      	ittt	mi
 80048e0:	6833      	ldrmi	r3, [r6, #0]
 80048e2:	3302      	addmi	r3, #2
 80048e4:	6033      	strmi	r3, [r6, #0]
 80048e6:	6825      	ldr	r5, [r4, #0]
 80048e8:	f015 0506 	ands.w	r5, r5, #6
 80048ec:	d106      	bne.n	80048fc <_printf_common+0x48>
 80048ee:	f104 0a19 	add.w	sl, r4, #25
 80048f2:	68e3      	ldr	r3, [r4, #12]
 80048f4:	6832      	ldr	r2, [r6, #0]
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	42ab      	cmp	r3, r5
 80048fa:	dc28      	bgt.n	800494e <_printf_common+0x9a>
 80048fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004900:	1e13      	subs	r3, r2, #0
 8004902:	6822      	ldr	r2, [r4, #0]
 8004904:	bf18      	it	ne
 8004906:	2301      	movne	r3, #1
 8004908:	0692      	lsls	r2, r2, #26
 800490a:	d42d      	bmi.n	8004968 <_printf_common+0xb4>
 800490c:	4649      	mov	r1, r9
 800490e:	4638      	mov	r0, r7
 8004910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004914:	47c0      	blx	r8
 8004916:	3001      	adds	r0, #1
 8004918:	d020      	beq.n	800495c <_printf_common+0xa8>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	68e5      	ldr	r5, [r4, #12]
 800491e:	f003 0306 	and.w	r3, r3, #6
 8004922:	2b04      	cmp	r3, #4
 8004924:	bf18      	it	ne
 8004926:	2500      	movne	r5, #0
 8004928:	6832      	ldr	r2, [r6, #0]
 800492a:	f04f 0600 	mov.w	r6, #0
 800492e:	68a3      	ldr	r3, [r4, #8]
 8004930:	bf08      	it	eq
 8004932:	1aad      	subeq	r5, r5, r2
 8004934:	6922      	ldr	r2, [r4, #16]
 8004936:	bf08      	it	eq
 8004938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800493c:	4293      	cmp	r3, r2
 800493e:	bfc4      	itt	gt
 8004940:	1a9b      	subgt	r3, r3, r2
 8004942:	18ed      	addgt	r5, r5, r3
 8004944:	341a      	adds	r4, #26
 8004946:	42b5      	cmp	r5, r6
 8004948:	d11a      	bne.n	8004980 <_printf_common+0xcc>
 800494a:	2000      	movs	r0, #0
 800494c:	e008      	b.n	8004960 <_printf_common+0xac>
 800494e:	2301      	movs	r3, #1
 8004950:	4652      	mov	r2, sl
 8004952:	4649      	mov	r1, r9
 8004954:	4638      	mov	r0, r7
 8004956:	47c0      	blx	r8
 8004958:	3001      	adds	r0, #1
 800495a:	d103      	bne.n	8004964 <_printf_common+0xb0>
 800495c:	f04f 30ff 	mov.w	r0, #4294967295
 8004960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004964:	3501      	adds	r5, #1
 8004966:	e7c4      	b.n	80048f2 <_printf_common+0x3e>
 8004968:	2030      	movs	r0, #48	; 0x30
 800496a:	18e1      	adds	r1, r4, r3
 800496c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004976:	4422      	add	r2, r4
 8004978:	3302      	adds	r3, #2
 800497a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800497e:	e7c5      	b.n	800490c <_printf_common+0x58>
 8004980:	2301      	movs	r3, #1
 8004982:	4622      	mov	r2, r4
 8004984:	4649      	mov	r1, r9
 8004986:	4638      	mov	r0, r7
 8004988:	47c0      	blx	r8
 800498a:	3001      	adds	r0, #1
 800498c:	d0e6      	beq.n	800495c <_printf_common+0xa8>
 800498e:	3601      	adds	r6, #1
 8004990:	e7d9      	b.n	8004946 <_printf_common+0x92>
	...

08004994 <_printf_i>:
 8004994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004998:	460c      	mov	r4, r1
 800499a:	7e27      	ldrb	r7, [r4, #24]
 800499c:	4691      	mov	r9, r2
 800499e:	2f78      	cmp	r7, #120	; 0x78
 80049a0:	4680      	mov	r8, r0
 80049a2:	469a      	mov	sl, r3
 80049a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80049a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049aa:	d807      	bhi.n	80049bc <_printf_i+0x28>
 80049ac:	2f62      	cmp	r7, #98	; 0x62
 80049ae:	d80a      	bhi.n	80049c6 <_printf_i+0x32>
 80049b0:	2f00      	cmp	r7, #0
 80049b2:	f000 80d9 	beq.w	8004b68 <_printf_i+0x1d4>
 80049b6:	2f58      	cmp	r7, #88	; 0x58
 80049b8:	f000 80a4 	beq.w	8004b04 <_printf_i+0x170>
 80049bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049c4:	e03a      	b.n	8004a3c <_printf_i+0xa8>
 80049c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049ca:	2b15      	cmp	r3, #21
 80049cc:	d8f6      	bhi.n	80049bc <_printf_i+0x28>
 80049ce:	a001      	add	r0, pc, #4	; (adr r0, 80049d4 <_printf_i+0x40>)
 80049d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80049d4:	08004a2d 	.word	0x08004a2d
 80049d8:	08004a41 	.word	0x08004a41
 80049dc:	080049bd 	.word	0x080049bd
 80049e0:	080049bd 	.word	0x080049bd
 80049e4:	080049bd 	.word	0x080049bd
 80049e8:	080049bd 	.word	0x080049bd
 80049ec:	08004a41 	.word	0x08004a41
 80049f0:	080049bd 	.word	0x080049bd
 80049f4:	080049bd 	.word	0x080049bd
 80049f8:	080049bd 	.word	0x080049bd
 80049fc:	080049bd 	.word	0x080049bd
 8004a00:	08004b4f 	.word	0x08004b4f
 8004a04:	08004a71 	.word	0x08004a71
 8004a08:	08004b31 	.word	0x08004b31
 8004a0c:	080049bd 	.word	0x080049bd
 8004a10:	080049bd 	.word	0x080049bd
 8004a14:	08004b71 	.word	0x08004b71
 8004a18:	080049bd 	.word	0x080049bd
 8004a1c:	08004a71 	.word	0x08004a71
 8004a20:	080049bd 	.word	0x080049bd
 8004a24:	080049bd 	.word	0x080049bd
 8004a28:	08004b39 	.word	0x08004b39
 8004a2c:	680b      	ldr	r3, [r1, #0]
 8004a2e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a32:	1d1a      	adds	r2, r3, #4
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	600a      	str	r2, [r1, #0]
 8004a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0a4      	b.n	8004b8a <_printf_i+0x1f6>
 8004a40:	6825      	ldr	r5, [r4, #0]
 8004a42:	6808      	ldr	r0, [r1, #0]
 8004a44:	062e      	lsls	r6, r5, #24
 8004a46:	f100 0304 	add.w	r3, r0, #4
 8004a4a:	d50a      	bpl.n	8004a62 <_printf_i+0xce>
 8004a4c:	6805      	ldr	r5, [r0, #0]
 8004a4e:	600b      	str	r3, [r1, #0]
 8004a50:	2d00      	cmp	r5, #0
 8004a52:	da03      	bge.n	8004a5c <_printf_i+0xc8>
 8004a54:	232d      	movs	r3, #45	; 0x2d
 8004a56:	426d      	negs	r5, r5
 8004a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a5c:	230a      	movs	r3, #10
 8004a5e:	485e      	ldr	r0, [pc, #376]	; (8004bd8 <_printf_i+0x244>)
 8004a60:	e019      	b.n	8004a96 <_printf_i+0x102>
 8004a62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a66:	6805      	ldr	r5, [r0, #0]
 8004a68:	600b      	str	r3, [r1, #0]
 8004a6a:	bf18      	it	ne
 8004a6c:	b22d      	sxthne	r5, r5
 8004a6e:	e7ef      	b.n	8004a50 <_printf_i+0xbc>
 8004a70:	680b      	ldr	r3, [r1, #0]
 8004a72:	6825      	ldr	r5, [r4, #0]
 8004a74:	1d18      	adds	r0, r3, #4
 8004a76:	6008      	str	r0, [r1, #0]
 8004a78:	0628      	lsls	r0, r5, #24
 8004a7a:	d501      	bpl.n	8004a80 <_printf_i+0xec>
 8004a7c:	681d      	ldr	r5, [r3, #0]
 8004a7e:	e002      	b.n	8004a86 <_printf_i+0xf2>
 8004a80:	0669      	lsls	r1, r5, #25
 8004a82:	d5fb      	bpl.n	8004a7c <_printf_i+0xe8>
 8004a84:	881d      	ldrh	r5, [r3, #0]
 8004a86:	2f6f      	cmp	r7, #111	; 0x6f
 8004a88:	bf0c      	ite	eq
 8004a8a:	2308      	moveq	r3, #8
 8004a8c:	230a      	movne	r3, #10
 8004a8e:	4852      	ldr	r0, [pc, #328]	; (8004bd8 <_printf_i+0x244>)
 8004a90:	2100      	movs	r1, #0
 8004a92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a96:	6866      	ldr	r6, [r4, #4]
 8004a98:	2e00      	cmp	r6, #0
 8004a9a:	bfa8      	it	ge
 8004a9c:	6821      	ldrge	r1, [r4, #0]
 8004a9e:	60a6      	str	r6, [r4, #8]
 8004aa0:	bfa4      	itt	ge
 8004aa2:	f021 0104 	bicge.w	r1, r1, #4
 8004aa6:	6021      	strge	r1, [r4, #0]
 8004aa8:	b90d      	cbnz	r5, 8004aae <_printf_i+0x11a>
 8004aaa:	2e00      	cmp	r6, #0
 8004aac:	d04d      	beq.n	8004b4a <_printf_i+0x1b6>
 8004aae:	4616      	mov	r6, r2
 8004ab0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ab4:	fb03 5711 	mls	r7, r3, r1, r5
 8004ab8:	5dc7      	ldrb	r7, [r0, r7]
 8004aba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004abe:	462f      	mov	r7, r5
 8004ac0:	42bb      	cmp	r3, r7
 8004ac2:	460d      	mov	r5, r1
 8004ac4:	d9f4      	bls.n	8004ab0 <_printf_i+0x11c>
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d10b      	bne.n	8004ae2 <_printf_i+0x14e>
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	07df      	lsls	r7, r3, #31
 8004ace:	d508      	bpl.n	8004ae2 <_printf_i+0x14e>
 8004ad0:	6923      	ldr	r3, [r4, #16]
 8004ad2:	6861      	ldr	r1, [r4, #4]
 8004ad4:	4299      	cmp	r1, r3
 8004ad6:	bfde      	ittt	le
 8004ad8:	2330      	movle	r3, #48	; 0x30
 8004ada:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ade:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ae2:	1b92      	subs	r2, r2, r6
 8004ae4:	6122      	str	r2, [r4, #16]
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	4621      	mov	r1, r4
 8004aea:	4640      	mov	r0, r8
 8004aec:	f8cd a000 	str.w	sl, [sp]
 8004af0:	aa03      	add	r2, sp, #12
 8004af2:	f7ff fedf 	bl	80048b4 <_printf_common>
 8004af6:	3001      	adds	r0, #1
 8004af8:	d14c      	bne.n	8004b94 <_printf_i+0x200>
 8004afa:	f04f 30ff 	mov.w	r0, #4294967295
 8004afe:	b004      	add	sp, #16
 8004b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b04:	4834      	ldr	r0, [pc, #208]	; (8004bd8 <_printf_i+0x244>)
 8004b06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b0a:	680e      	ldr	r6, [r1, #0]
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b12:	061f      	lsls	r7, r3, #24
 8004b14:	600e      	str	r6, [r1, #0]
 8004b16:	d514      	bpl.n	8004b42 <_printf_i+0x1ae>
 8004b18:	07d9      	lsls	r1, r3, #31
 8004b1a:	bf44      	itt	mi
 8004b1c:	f043 0320 	orrmi.w	r3, r3, #32
 8004b20:	6023      	strmi	r3, [r4, #0]
 8004b22:	b91d      	cbnz	r5, 8004b2c <_printf_i+0x198>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	f023 0320 	bic.w	r3, r3, #32
 8004b2a:	6023      	str	r3, [r4, #0]
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	e7af      	b.n	8004a90 <_printf_i+0xfc>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	f043 0320 	orr.w	r3, r3, #32
 8004b36:	6023      	str	r3, [r4, #0]
 8004b38:	2378      	movs	r3, #120	; 0x78
 8004b3a:	4828      	ldr	r0, [pc, #160]	; (8004bdc <_printf_i+0x248>)
 8004b3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b40:	e7e3      	b.n	8004b0a <_printf_i+0x176>
 8004b42:	065e      	lsls	r6, r3, #25
 8004b44:	bf48      	it	mi
 8004b46:	b2ad      	uxthmi	r5, r5
 8004b48:	e7e6      	b.n	8004b18 <_printf_i+0x184>
 8004b4a:	4616      	mov	r6, r2
 8004b4c:	e7bb      	b.n	8004ac6 <_printf_i+0x132>
 8004b4e:	680b      	ldr	r3, [r1, #0]
 8004b50:	6826      	ldr	r6, [r4, #0]
 8004b52:	1d1d      	adds	r5, r3, #4
 8004b54:	6960      	ldr	r0, [r4, #20]
 8004b56:	600d      	str	r5, [r1, #0]
 8004b58:	0635      	lsls	r5, r6, #24
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	d501      	bpl.n	8004b62 <_printf_i+0x1ce>
 8004b5e:	6018      	str	r0, [r3, #0]
 8004b60:	e002      	b.n	8004b68 <_printf_i+0x1d4>
 8004b62:	0671      	lsls	r1, r6, #25
 8004b64:	d5fb      	bpl.n	8004b5e <_printf_i+0x1ca>
 8004b66:	8018      	strh	r0, [r3, #0]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	4616      	mov	r6, r2
 8004b6c:	6123      	str	r3, [r4, #16]
 8004b6e:	e7ba      	b.n	8004ae6 <_printf_i+0x152>
 8004b70:	680b      	ldr	r3, [r1, #0]
 8004b72:	1d1a      	adds	r2, r3, #4
 8004b74:	600a      	str	r2, [r1, #0]
 8004b76:	681e      	ldr	r6, [r3, #0]
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	6862      	ldr	r2, [r4, #4]
 8004b7e:	f000 f831 	bl	8004be4 <memchr>
 8004b82:	b108      	cbz	r0, 8004b88 <_printf_i+0x1f4>
 8004b84:	1b80      	subs	r0, r0, r6
 8004b86:	6060      	str	r0, [r4, #4]
 8004b88:	6863      	ldr	r3, [r4, #4]
 8004b8a:	6123      	str	r3, [r4, #16]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b92:	e7a8      	b.n	8004ae6 <_printf_i+0x152>
 8004b94:	4632      	mov	r2, r6
 8004b96:	4649      	mov	r1, r9
 8004b98:	4640      	mov	r0, r8
 8004b9a:	6923      	ldr	r3, [r4, #16]
 8004b9c:	47d0      	blx	sl
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d0ab      	beq.n	8004afa <_printf_i+0x166>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	079b      	lsls	r3, r3, #30
 8004ba6:	d413      	bmi.n	8004bd0 <_printf_i+0x23c>
 8004ba8:	68e0      	ldr	r0, [r4, #12]
 8004baa:	9b03      	ldr	r3, [sp, #12]
 8004bac:	4298      	cmp	r0, r3
 8004bae:	bfb8      	it	lt
 8004bb0:	4618      	movlt	r0, r3
 8004bb2:	e7a4      	b.n	8004afe <_printf_i+0x16a>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	4632      	mov	r2, r6
 8004bb8:	4649      	mov	r1, r9
 8004bba:	4640      	mov	r0, r8
 8004bbc:	47d0      	blx	sl
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	d09b      	beq.n	8004afa <_printf_i+0x166>
 8004bc2:	3501      	adds	r5, #1
 8004bc4:	68e3      	ldr	r3, [r4, #12]
 8004bc6:	9903      	ldr	r1, [sp, #12]
 8004bc8:	1a5b      	subs	r3, r3, r1
 8004bca:	42ab      	cmp	r3, r5
 8004bcc:	dcf2      	bgt.n	8004bb4 <_printf_i+0x220>
 8004bce:	e7eb      	b.n	8004ba8 <_printf_i+0x214>
 8004bd0:	2500      	movs	r5, #0
 8004bd2:	f104 0619 	add.w	r6, r4, #25
 8004bd6:	e7f5      	b.n	8004bc4 <_printf_i+0x230>
 8004bd8:	08004d43 	.word	0x08004d43
 8004bdc:	08004d54 	.word	0x08004d54

08004be0 <__retarget_lock_acquire_recursive>:
 8004be0:	4770      	bx	lr

08004be2 <__retarget_lock_release_recursive>:
 8004be2:	4770      	bx	lr

08004be4 <memchr>:
 8004be4:	4603      	mov	r3, r0
 8004be6:	b510      	push	{r4, lr}
 8004be8:	b2c9      	uxtb	r1, r1
 8004bea:	4402      	add	r2, r0
 8004bec:	4293      	cmp	r3, r2
 8004bee:	4618      	mov	r0, r3
 8004bf0:	d101      	bne.n	8004bf6 <memchr+0x12>
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	e003      	b.n	8004bfe <memchr+0x1a>
 8004bf6:	7804      	ldrb	r4, [r0, #0]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	428c      	cmp	r4, r1
 8004bfc:	d1f6      	bne.n	8004bec <memchr+0x8>
 8004bfe:	bd10      	pop	{r4, pc}

08004c00 <memcpy>:
 8004c00:	440a      	add	r2, r1
 8004c02:	4291      	cmp	r1, r2
 8004c04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c08:	d100      	bne.n	8004c0c <memcpy+0xc>
 8004c0a:	4770      	bx	lr
 8004c0c:	b510      	push	{r4, lr}
 8004c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c12:	4291      	cmp	r1, r2
 8004c14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c18:	d1f9      	bne.n	8004c0e <memcpy+0xe>
 8004c1a:	bd10      	pop	{r4, pc}

08004c1c <memmove>:
 8004c1c:	4288      	cmp	r0, r1
 8004c1e:	b510      	push	{r4, lr}
 8004c20:	eb01 0402 	add.w	r4, r1, r2
 8004c24:	d902      	bls.n	8004c2c <memmove+0x10>
 8004c26:	4284      	cmp	r4, r0
 8004c28:	4623      	mov	r3, r4
 8004c2a:	d807      	bhi.n	8004c3c <memmove+0x20>
 8004c2c:	1e43      	subs	r3, r0, #1
 8004c2e:	42a1      	cmp	r1, r4
 8004c30:	d008      	beq.n	8004c44 <memmove+0x28>
 8004c32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c3a:	e7f8      	b.n	8004c2e <memmove+0x12>
 8004c3c:	4601      	mov	r1, r0
 8004c3e:	4402      	add	r2, r0
 8004c40:	428a      	cmp	r2, r1
 8004c42:	d100      	bne.n	8004c46 <memmove+0x2a>
 8004c44:	bd10      	pop	{r4, pc}
 8004c46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c4e:	e7f7      	b.n	8004c40 <memmove+0x24>

08004c50 <_realloc_r>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	4607      	mov	r7, r0
 8004c54:	4614      	mov	r4, r2
 8004c56:	460e      	mov	r6, r1
 8004c58:	b921      	cbnz	r1, 8004c64 <_realloc_r+0x14>
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c60:	f7ff bc36 	b.w	80044d0 <_malloc_r>
 8004c64:	b922      	cbnz	r2, 8004c70 <_realloc_r+0x20>
 8004c66:	f7ff fbe7 	bl	8004438 <_free_r>
 8004c6a:	4625      	mov	r5, r4
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c70:	f000 f814 	bl	8004c9c <_malloc_usable_size_r>
 8004c74:	42a0      	cmp	r0, r4
 8004c76:	d20f      	bcs.n	8004c98 <_realloc_r+0x48>
 8004c78:	4621      	mov	r1, r4
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	f7ff fc28 	bl	80044d0 <_malloc_r>
 8004c80:	4605      	mov	r5, r0
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d0f2      	beq.n	8004c6c <_realloc_r+0x1c>
 8004c86:	4631      	mov	r1, r6
 8004c88:	4622      	mov	r2, r4
 8004c8a:	f7ff ffb9 	bl	8004c00 <memcpy>
 8004c8e:	4631      	mov	r1, r6
 8004c90:	4638      	mov	r0, r7
 8004c92:	f7ff fbd1 	bl	8004438 <_free_r>
 8004c96:	e7e9      	b.n	8004c6c <_realloc_r+0x1c>
 8004c98:	4635      	mov	r5, r6
 8004c9a:	e7e7      	b.n	8004c6c <_realloc_r+0x1c>

08004c9c <_malloc_usable_size_r>:
 8004c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ca0:	1f18      	subs	r0, r3, #4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	bfbc      	itt	lt
 8004ca6:	580b      	ldrlt	r3, [r1, r0]
 8004ca8:	18c0      	addlt	r0, r0, r3
 8004caa:	4770      	bx	lr

08004cac <_init>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	bf00      	nop
 8004cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb2:	bc08      	pop	{r3}
 8004cb4:	469e      	mov	lr, r3
 8004cb6:	4770      	bx	lr

08004cb8 <_fini>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	bf00      	nop
 8004cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cbe:	bc08      	pop	{r3}
 8004cc0:	469e      	mov	lr, r3
 8004cc2:	4770      	bx	lr
